<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Runoneall の 小破站</title>
  
  
  <link href="https://runoneall.github.io/atom.xml" rel="self"/>
  
  <link href="https://runoneall.github.io/"/>
  <updated>2024-10-10T16:11:21.353Z</updated>
  <id>https://runoneall.github.io/</id>
  
  <author>
    <name>Runoneall</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器启用QUIC（通用）</title>
    <link href="https://runoneall.github.io/article/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%AF%E7%94%A8QUIC%EF%BC%88%E9%80%9A%E7%94%A8%EF%BC%89.html"/>
    <id>https://runoneall.github.io/article/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%AF%E7%94%A8QUIC%EF%BC%88%E9%80%9A%E7%94%A8%EF%BC%89.html</id>
    <published>2024-10-10T15:49:00.000Z</published>
    <updated>2024-10-10T16:11:21.353Z</updated>
    
    <content type="html"><![CDATA[<ul><li>此文章是对 <a href="https://runoneall.github.io/%E8%87%AA%E5%BB%BAdoh%E6%9C%8D%E5%8A%A1%E5%99%A8-%E8%AE%BE%E7%BD%AEFirefox%E4%BD%BF%E7%94%A8.html">自建doh服务器+设置Firefox使用</a> 文章的补充</li><li>此教程适用于大部分基于 <code>Gecko内核</code> 和 <code>Chromium内核</code> 的浏览器</li><li>QUIC于 <code>2024.10.3</code> 还处于试验阶段，部分网站不支持QUIC</li></ul><h1 id="Chromium内核"><a href="#Chromium内核" class="headerlink" title="Chromium内核"></a>Chromium内核</h1><ol><li>在地址栏输入 <code>chrome://flags</code> ( <code>MicrosoftEdge</code> 为 <code>edge://flags</code> )</li><li>找到 <code>enable-quic</code></li><li>设置为 <code>Enabled</code></li></ol><h1 id="Gecko内核"><a href="#Gecko内核" class="headerlink" title="Gecko内核"></a>Gecko内核</h1><ol><li>在地址栏输入 <code>about:config</code></li><li>找到 <code>network.http.http3.enabled</code> (没有则新建，类型为 <code>bool</code> )</li><li>设置为 <code>true</code></li></ol><h1 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h1><ol><li>!!完全退出!! 浏览器 (不然部分浏览器会不生效)</li><li>重新打开浏览器，前往 <a href="https://quic.nginx.org/">quic.nginx.org</a></li><li>等待检测完成</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;此文章是对 &lt;a href=&quot;https://runoneall.github.io/%E8%87%AA%E5%BB%BAdoh%E6%9C%8D%E5%8A%A1%E5%99%A8-%E8%AE%BE%E7%BD%AEFirefox%E4%BD%BF%E7%9</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>域名迁移</title>
    <link href="https://runoneall.github.io/article/%E5%9F%9F%E5%90%8D%E8%BF%81%E7%A7%BB.html"/>
    <id>https://runoneall.github.io/article/%E5%9F%9F%E5%90%8D%E8%BF%81%E7%A7%BB.html</id>
    <published>2024-09-28T18:58:19.000Z</published>
    <updated>2024-09-28T19:03:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>做点小改动，域名迁移回GitHub Pages的免费子域了。</p><p>链接：<a href="https://runoneall.github.io/">runoneall.github.io</a></p><p>之前链接依然可用，<code>runoneall.us.kg</code> 和 <code>runoneall.nyc.mn</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;做点小改动，域名迁移回GitHub Pages的免费子域了。&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://runoneall.github.io/&quot;&gt;runoneall.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前链接依然可用，&lt;code&gt;runoneall.u</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客镜像站完成</title>
    <link href="https://runoneall.github.io/article/%E5%8D%9A%E5%AE%A2%E9%95%9C%E5%83%8F%E7%AB%99%E5%AE%8C%E6%88%90.html"/>
    <id>https://runoneall.github.io/article/%E5%8D%9A%E5%AE%A2%E9%95%9C%E5%83%8F%E7%AB%99%E5%AE%8C%E6%88%90.html</id>
    <published>2024-09-18T09:03:00.000Z</published>
    <updated>2024-09-18T09:08:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近搞了免费的 <code>nyc.mn</code> 域名并托管到了cf, 所以就搞了个博客镜像站来玩</p><ul><li>主站: <a href="https://runoneall.us.kg/">runoneall.us.kg</a></li><li>镜像站: <a href="https://runoneall.nyc.mn/">runoneall.nyc.mn</a></li></ul><p><img src="https://filecdn.runoneall.us.kg/BlogResource/PostImages/prove-domain-ownership.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近搞了免费的 &lt;code&gt;nyc.mn&lt;/code&gt; 域名并托管到了cf, 所以就搞了个博客镜像站来玩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主站: &lt;a href=&quot;https://runoneall.us.kg/&quot;&gt;runoneall.us.kg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;镜像站</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MiWiFi 3G(R3G) 一站式刷机</title>
    <link href="https://runoneall.github.io/article/MiWiFi-3G-R3G-%E4%B8%80%E7%AB%99%E5%BC%8F%E5%88%B7%E6%9C%BA.html"/>
    <id>https://runoneall.github.io/article/MiWiFi-3G-R3G-%E4%B8%80%E7%AB%99%E5%BC%8F%E5%88%B7%E6%9C%BA.html</id>
    <published>2024-09-04T03:20:19.000Z</published>
    <updated>2024-10-15T13:01:37.560Z</updated>
    
    <content type="html"><![CDATA[<ul><li>本教程提供的文件有可能不是最新的, 并且有可能过时, 请注意甄别</li><li>本教程参考 <a href="https://www.cnblogs.com/milton/p/16163521.html">小米路由器3G R3G 刷入Breed和OpenWrt 20.02.2 的记录</a>, <a href="https://www.ohyee.cc/post/note_miwifi_openwrt">小米路由器 3G 使用 OpenWRT</a>, <a href="https://www.right.com.cn/FORUM/thread-836975-1-1.html">小米R3G的USB挂载问题</a></li></ul><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>R3G路由器</li><li>电脑, 安装 <code>python3</code> 环境</li><li>安装了 <code>requests</code> 依赖包</li><li>全程使用有线连接 (!!! 不要用无线 !!!)</li><li>VPN (也许?)</li><li>!!! 眼睛与脑子 !!!</li></ul><h1 id="解锁并获取权限"><a href="#解锁并获取权限" class="headerlink" title="解锁并获取权限"></a>解锁并获取权限</h1><ol><li>下载开发版系统 <a href="https://bigota.miwifi.com/xiaoqiang/rom/r3g/miwifi_r3g_firmware_12f97_2.25.124.bin">下载地址</a></li><li>进入到路由器管理, 选择 <code>系统升级</code> - <code>本地升级</code> - <code>上传固件</code>, 选择下载的文件, 等待路由器更新重启完成</li><li>登入到路由器后台, 查看是否为开发版系统, 如果是, 进行下一步, 否则重来或寻找其他方法</li><li>下载解锁工具 <a href="https://github.com/acecilia/OpenWRTInvasion/archive/refs/tags/0.0.8.zip">下载地址</a></li><li>解压并进入, 运行 <code>pip3 install -r requirements.txt &amp;&amp; python3 remote_command_execution_vulnerability.py</code> 并填入信息, 等待一段时间后解锁成功, 然后保存 <code>FTP</code> 和 <code>SSH 或 Telnet</code> 的访问信息 (用户名 <code>root</code> 密码 <code>root</code> )</li></ol><h1 id="刷入不死Breed"><a href="#刷入不死Breed" class="headerlink" title="刷入不死Breed"></a>刷入不死Breed</h1><ol><li>使用SSH或Telnet登入到路由器 (以下简称 <code>登入到路由器</code> )</li><li>使用 <code>cat /proc/mtd</code> 查看闪存布局</li><li>使用 <code>dd if=/dev/mtd4 of=/tmp/eeprom.bin</code> 备份 <code>eeprom</code></li><li>使用FTP登入到路由器, 进入 <code>/tmp</code> 目录, 把 <code>eeprom.bin</code> 下载到本地存储</li><li>下载Breed <a href="https://breed.hackpascal.net/breed-mt7621-xiaomi-r3g.bin">下载地址</a> 并上传到路由器 <code>/tmp</code> 目录</li><li>登入到路由器, 使用 <code>cd /tmp</code> 进入到目录, 使用 <code>mtd -r write /tmp/breed-R3G.bin Bootloader</code> 刷入Breed, 完成后路由器会自动重启, 等待重启完成</li></ol><h1 id="刷入OpenWrt"><a href="#刷入OpenWrt" class="headerlink" title="刷入OpenWrt"></a>刷入OpenWrt</h1><ol><li>断开路由器电源, 按住 <code>Reset</code> 并重新接入电源, 当网口灯闪烁3次后浏览器输入 <code>192.168.1.1</code> 进入Breed管理面板</li><li>点击 <code>Mac地址修改</code> 查看是否全为 <code>FF</code>, 如果是, 点击固件更新, 在 <code>eeprom</code> 处上传备份的 <code>eeprom</code> 文件</li><li>下载OpenWrt固件 <a href="https://firmware-selector.openwrt.org/?version=23.05.4&target=ramips/mt7621&id=xiaomi_mi-router-3g">下载地址</a>, 进入后找到版本选择, 点击 <code>非SNAPSHOT</code> 的最新版本, 下载 <code>KERNEL1</code> 和 <code>ROOTFS0</code></li><li>进入Breed, 点击环境变量, 删除 <code>normal_firmware_md5</code></li><li>进入Breed, 选择固件更新, 在下拉框中选择 <code>Openwrt</code> , 按照提示上传 <code>KERNEL1</code> 和 <code>ROOTFS0</code> 文件, 点击自动重启, 稍等片刻即可安装完成</li></ol><h1 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h1><ol><li>进入 <code>System</code> - <code>Software</code></li><li>点击 <code>Update lists</code> 等待完成 (可能较慢, 如有动手能力可以点击 <code>Configure opkg</code> 自行换源)</li><li>在 <code>Filter</code> 处输入 <code>luci-i18n-base-zh-cn</code> 并等待安装完成</li><li>刷新页面</li></ol><h1 id="识别USB存储设备"><a href="#识别USB存储设备" class="headerlink" title="识别USB存储设备"></a>识别USB存储设备</h1><ol><li>登入到路由器</li><li>先运行 <code>opkg install kmod-nls-cp437 kmod-nls-iso8859-1 kmod-usb-core kmod-usb-ohci kmod-usb-storage kmod-usb2 mount-utils</code><ul><li>当你的盘为fat格式时运行 <code>opkg install kmod-fs-vfat</code></li><li>当你的盘为ext3格式时运行 <code>opkg install kmod-fs-ext3</code></li><li>当你的盘为ntfs格式时运行 <code>opkg install ntfs-3g</code></li><li>当你的盘为ext4格式时运行 <code>opkg install kmod-fs-ext4</code></li></ul></li><li>挂载<ul><li>一般为 <code>/dev/sda1</code></li><li>列出所有可用设备 <code>ls /dev | grep sda</code></li><li>使用 <code>mount /dev/sda1 /mnt</code> 将设备挂载到 <code>/mnt</code> 目录</li><li>使用 <code>cd /mnt</code> 进入到设备</li><li>使用 <code>umount /mnt</code> 取消挂载 (!!! 拔出设备前一定要做 !!!)</li><li>路由器重启后需要重新挂载</li></ul></li><li>当挂载设备耗电较大 (如硬盘盒外接硬盘) 时, 建议使用外接供电, 否则路由器容易供电不足</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;本教程提供的文件有可能不是最新的, 并且有可能过时, 请注意甄别&lt;/li&gt;
&lt;li&gt;本教程参考 &lt;a href=&quot;https://www.cnblogs.com/milton/p/16163521.html&quot;&gt;小米路由器3G R3G 刷入Breed和OpenWr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>自建doh服务器+设置Firefox使用</title>
    <link href="https://runoneall.github.io/article/%E8%87%AA%E5%BB%BAdoh%E6%9C%8D%E5%8A%A1%E5%99%A8-%E8%AE%BE%E7%BD%AEFirefox%E4%BD%BF%E7%94%A8.html"/>
    <id>https://runoneall.github.io/article/%E8%87%AA%E5%BB%BAdoh%E6%9C%8D%E5%8A%A1%E5%99%A8-%E8%AE%BE%E7%BD%AEFirefox%E4%BD%BF%E7%94%A8.html</id>
    <published>2024-08-24T06:45:07.000Z</published>
    <updated>2024-08-24T07:46:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><ul><li>本教程不会详细解释各名词含义, 需要了解自行搜索</li><li>本教程有些步骤需要自行搜索, 肯定都有答案, 站长不想再写一遍</li><li>本教程站长亲测可用, 但因网络环境差异不保证可用性</li><li>本教程适用于Android, 但也支持其他平台(可能会有出入)</li></ul><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>Cloudflare账号</li><li>Github账号</li><li>Android手机</li><li>(可选) Google Play</li><li>(可选) 一个域名</li><li>(可选) VPN</li><li>(必须) 脑子与眼睛</li></ul><h1 id="搭建doh"><a href="#搭建doh" class="headerlink" title="搭建doh"></a>搭建doh</h1><ol><li>进入Github</li><li>Fork仓库: <a href="https://github.com/tina-hello/doh-cf-workers">tina-hello&#x2F;doh-cf-workers</a></li><li>等待完成</li><li>从 README 中找到 <code>Deploy with Workers</code></li><li>跟随提示完成操作</li><li>打开 <code>Pages and Workers</code> 页面</li><li>找到名为 <code>doh</code> 的Worker并点击</li><li>点击编辑代码, 找到名为<code>path</code>的全局变量<ul><li><code>path</code>: 入口点, 默认为允许所有, 但所有人可用, 建议改为 <code>/</code>+<code>随便填, 必须为英文</code></li></ul></li><li>(如果有域名且绑定到了CF) 退出编辑, 转到 <code>设置</code> - <code>触发器</code> - <code>自定义域</code> - <code>添加自定义域</code> 绑定自定义域</li><li>将 <code>Worker地址</code> 与 <code>第8步修改的路径</code> 拼接在一起就是你的 <code>doh服务器地址</code></li><li>返回Github, 转到存储库页面, 点击 <code>Action</code>, 把里面你能找到的所有记录都删掉 (如果你不想公开你的doh服务器地址)</li></ol><h1 id="设置Firefox"><a href="#设置Firefox" class="headerlink" title="设置Firefox"></a>设置Firefox</h1><ol><li>此章节参考: <a href="https://blog.17lai.site/posts/ec2cad2">ESNI和加密DNS - 保护信息隐私的最后一块拼图</a></li><li>从 <code>Google Play</code> 上安装最新版的 <code>Firefox Nightly</code> 应用 (或你知道的其他地方) (<a href="https://www.mozilla.org/zh-CN/firefox/nightly/all/">官方网站</a>)</li><li>打开Firefox Nightly, 完成一些设置后在地址栏输入 <code>about:config</code><ol><li>点击上方搜索框</li><li>输入 <code>network.trr.mode</code> 将数值改为3或2 (<code>0</code>对应的是不开启此功能; <code>1</code>对应的是交由浏览器选择DoH与传统方式那种更快; <code>2</code>代表优先使用加密DNS查询, 如果失败则回落到普通DNS查询; <code>3</code>代表只使用加密DNS查询; <code>5</code>代表明确的关闭此功能)</li><li>输入 <code>network.trr.uri</code> 并输入之前获取的doh服务器地址</li><li>输入 <code>network.security.esni.enabled</code> (默认没有, 点击新建) 类型选 <code>布尔值</code>, 值为 <code>true</code></li><li>所有更改会自动保存, 可以通过刷新页面查看是否保存</li></ol></li><li>完全退出Firefox Nightly后重新打开, 更改生效</li><li>完成, 可前往 <a href="https://encryptedsni.com/">在线检测页面</a> 查看效果, 点击 <code>检测我的浏览器</code> 并看到四个对勾即为成功</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本教程不会详细解释各名词含义, 需要了解自行搜索&lt;/li&gt;
&lt;li&gt;本教程有些步骤需要自行搜索, 肯定都有答案,</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>通过Github Pages+Hexo搭建博客教程</title>
    <link href="https://runoneall.github.io/article/%E9%80%9A%E8%BF%87Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.html"/>
    <id>https://runoneall.github.io/article/%E9%80%9A%E8%BF%87Github-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.html</id>
    <published>2024-08-16T09:00:00.000Z</published>
    <updated>2024-10-10T16:32:39.618Z</updated>
    
    <content type="html"><![CDATA[<p>此教程为网上内容的整合，也是当前博客所使用的方法<br>此方法适用于所有系统，但会存在路径与命令区别，请自行尝试后进行修改<br>此教程使用Linux系统</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><ul><li>一个域名（没有也可以）</li><li>一台电脑（手机可用Termux）</li><li>git（用于提交代码，到<a href="https://git-scm.com/">这里</a>下载git安装包或使用包管理器安装）</li><li>一个Github账号（自行搜索）</li><li>nodejs（用于安装Hexo及Hexo插件，到<a href="https://nodejs.org/en/download">这里</a>下载或使用包管理器安装。若无特殊需要请使用LTS版本）</li><li>文本编辑器（UTF-8编码）</li><li>可能需要VPN（或换源）（站长的<a href="https://github.com/runoneall/v2server">v2ray仓库</a>，8000多个节点随便用）</li><li>脑子与一定的动手能力（！！！）</li></ul><h1 id="本地搭建博客"><a href="#本地搭建博客" class="headerlink" title="本地搭建博客"></a>本地搭建博客</h1><ul><li>使用 <code>npm install hexo-cli -g</code> 安装hexo本体</li><li>初始化博客 <code>hexo init blog</code></li><li>进入 <code>cd blog</code> （在后续步骤中，这将简写为 <code>博客根目录</code> ）</li><li>补全 <code>npm install</code></li><li>启动 <code>hexo g &amp;&amp; hexo s</code> （hexo会在4000端口启动服务，请确保端口没有被占用）</li><li>打开 <code>127.0.0.1:4000</code> 查看安装是否成功</li></ul><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>若上一步进入了博客，则安装成功，但hexo默认主题并不好看，此部分将说明主题的安装方法，若你喜欢默认主题，请略过这一步</p><ul><li>下载主题文件（一般在Github上，请自行搜索，并首选 <code>github.com</code> ）</li><li>解压主题文件（一般为 <code>.zip</code> 或 <code>.tar.gz</code> ，Windows解压工具推荐 <a href="https://7-zip.org/">7-zip</a>）</li><li>将主题文件目录放入 <code>博客根目录</code> 下的 <code>themes</code> 文件夹下</li><li>进入 <code>主题文件夹</code> （在后续步骤中，这将简写为 <code>主题根目录</code> ）</li><li>本博客使用 <code>Fluid</code> 主题，所以以 <code>Fluid</code> 主题为例</li></ul><h2 id="分支-安装并配置-Fluid-主题"><a href="#分支-安装并配置-Fluid-主题" class="headerlink" title="分支: 安装并配置 Fluid 主题"></a>分支: 安装并配置 <code>Fluid</code> 主题</h2><ul><li>进入<a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">Github Releases</a></li><li>找到标有 <code>Latest</code> 标签的版本并点击</li><li>下滑找到 <code>Assets</code> 并点击 <code>Source code</code> （<code>zip</code> 或 <code>tar.gz</code>）</li><li>将下载的压缩包解压，将文件夹重命名为 <code>fluid</code></li><li>放入 <code>博客根目录</code> 下的 <code>themes</code> 文件夹下</li><li>编辑 <code>博客根目录</code> 下的 <code>_config.yml</code> （在后续步骤中，这将简写为 <code>博客配置</code> ）<ul><li>将 <code>theme</code> 改为 <code>fluid</code></li><li>将 <code>language</code> 改为 <code>zh-CN</code> （可选）</li></ul></li><li>进入 <code>博客根目录</code> 下的 <code>themes</code> 文件夹下的 <code>fluid</code> 文件夹 （在此分支中，这将简写为 <code>Fluid主题根目录</code> ）</li><li>编辑 <code>Fluid主题根目录</code> 下的 <code>_config.yml</code> （在此分支中，这将简写为 <code>Fluid主题配置</code> ）<ul><li><code>favicon</code> （浏览器标签页图标，可为Url）</li><li><code>apple_touch_icon</code> （浏览器标签页图标，但仅用于苹果设备，可为Url）</li><li><code>copy_btn</code> （代码块复制按钮，可为 <code>true</code> 或 <code>false</code> ）</li><li><code>typing</code> （打字机，可为 <code>true</code> 或 <code>false</code> ）</li><li>页头<ul><li><code>blog_title</code> （博客首页标题）</li><li><code>menu</code> （导航栏选项，按需修改）</li></ul></li><li><code>页脚</code><ul><li><code>rss</code> （如果你的博客有rss，在这里填入地址）</li><li><code>beian</code> （如果你有备案，在这里填写）（本站长不推荐，那样会很不自由）</li></ul></li><li><code>首页</code><ul><li><code>banner_img</code> （首页大图，推荐使用图片CDN）（其它地方的 <code>banner_img</code> 也一样）</li><li><code>slogan</code> （首页副标题，这里讲述随机一言的制作方法）<ul><li>找到 <code>api</code> 选项</li><li><code>enable</code> 填入 <code>true</code></li><li><code>url</code> 填入 <code>&quot;https://v1.hitokoto.cn/&quot;</code></li><li><code>method</code> 填入 <code>GET</code></li><li><code>headers</code> 填入 <code>&#123;&#125;</code></li><li><code>keys</code> 填入 <code>[&quot;hitokoto&quot;]</code></li></ul></li></ul></li><li><code>关于页</code><ul><li><code>hexo new page about</code> （创建关于页）</li><li>编辑博客目录下的 <code>/source/about/index.md</code> 文件  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">      ---</span><br><span class="hljs-code">title: about</span><br><span class="hljs-code">layout: about</span><br><span class="hljs-code">---</span><br><span class="hljs-code"></span><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure></li><li><code>avatar</code> （你的头像，可为Url）</li><li><code>name</code> （你的互联网化名）</li><li><code>intro</code> （你的个性介绍）</li><li><code>icons</code> （你的社交平台链接）</li></ul></li><li><code>友链页</code><ul><li><code>items</code> （照着示例写）</li></ul></li></ul></li><li>更多请看注释说明和<a href="https://hexo.fluid-dev.com/docs/start">主题官网</a></li></ul><h2 id="分支结束"><a href="#分支结束" class="headerlink" title="分支结束"></a>分支结束</h2><h1 id="自定义-博客配置"><a href="#自定义-博客配置" class="headerlink" title="自定义 博客配置"></a>自定义 <code>博客配置</code></h1><ul><li><code>title</code> （博客名）</li><li><code>author</code> （作者，填你的互联网化名）</li><li><code>url</code> （填写博客地址，将作为博客访问地址）（在后续步骤中，此将简写为 <code>博客地址</code> ）</li><li><code>new_post_name</code> （新文章地址，建议 <code>:title.md</code> 适用于SEO优化）</li><li><code>plugins:</code> （填入用到的插件）（在后续步骤中，此将简写为 <code>插件列表</code> ）</li></ul><h1 id="使用-gulp-压缩博客体积"><a href="#使用-gulp-压缩博客体积" class="headerlink" title="使用 gulp 压缩博客体积"></a>使用 <code>gulp</code> 压缩博客体积</h1><ul><li>进入 <code>博客根目录</code></li><li>安装 <code>gulp</code> 及附加功能<ul><li><code>npm install --global gulp-cli</code> （全局安装gulp）</li><li><code>npm install gulp-htmlclean --save-dev</code><br><code>npm install gulp-html-minifier-terser --save-dev</code><br>（安装gulp的压缩html功能）</li><li><code>npm install gulp-clean-css --save-dev</code> （安装gulp的压缩css功能）</li><li><code>npm install gulp-terser --save-dev</code> （安装gulp的压缩js功能）</li></ul></li><li>在 <code>博客根目录</code> 新建 <code>gulpfile.js</code> 文件并输入以下内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//用到的各个插件</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-keyword">var</span> cleanCSS = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-clean-css&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-html-minifier-terser&#x27;</span>);<br><span class="hljs-keyword">var</span> htmlclean = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlclean&#x27;</span>);<br><br><span class="hljs-comment">// gulp-tester</span><br><span class="hljs-keyword">var</span> terser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-terser&#x27;</span>);<br><br><span class="hljs-comment">// 压缩js</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;compress&#x27;</span>, <span class="hljs-title function_">async</span>() =&gt;&#123;<br>  gulp.<span class="hljs-title function_">src</span>([<span class="hljs-string">&#x27;./public/**/*.js&#x27;</span>, <span class="hljs-string">&#x27;!./public/**/*.min.js&#x27;</span>])<br>    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">terser</span>())<br>    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;);<br><br><span class="hljs-comment">//压缩css</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>([<span class="hljs-string">&#x27;./public/**/*.css&#x27;</span>])<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">cleanCSS</span>(&#123;<br>            <span class="hljs-attr">compatibility</span>: <span class="hljs-string">&#x27;ie11&#x27;</span><br>        &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>));<br>&#125;);<br><br><span class="hljs-comment">//压缩html</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;minify-html&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;./public/**/*.html&#x27;</span>)<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">htmlclean</span>())<br>        .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">htmlmin</span>(&#123;<br>            <span class="hljs-attr">removeComments</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//清除html注释</span><br>            <span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//压缩html</span><br>            <span class="hljs-attr">collapseBooleanAttributes</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">//省略布尔属性的值，例如：&lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span><br>            <span class="hljs-attr">removeEmptyAttributes</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">//删除所有空格作属性值，例如：&lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span><br>            <span class="hljs-attr">removeScriptTypeAttributes</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span><br>            <span class="hljs-attr">removeStyleLinkTypeAttributes</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">//删除&lt;style&gt;和&lt;link&gt;的 type=&quot;text/css&quot;</span><br>            <span class="hljs-attr">minifyJS</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//压缩页面 JS</span><br>            <span class="hljs-attr">minifyCSS</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//压缩页面 CSS</span><br>            <span class="hljs-attr">minifyURLs</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">//压缩页面URL</span><br>        &#125;))<br>        .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;./public&#x27;</span>))<br>&#125;);<br><br><span class="hljs-comment">// 运行gulp命令时依次执行以下任务</span><br>gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;default&#x27;</span>, gulp.<span class="hljs-title function_">parallel</span>(<br>  <span class="hljs-string">&#x27;compress&#x27;</span>, <span class="hljs-string">&#x27;minify-css&#x27;</span>, <span class="hljs-string">&#x27;minify-html&#x27;</span><br>))<br></code></pre></td></tr></table></figure><ul><li>在博客启动时运行 <code>gulp</code> 命令</li></ul><h1 id="本地启动博客"><a href="#本地启动博客" class="headerlink" title="本地启动博客"></a>本地启动博客</h1><ul><li><code>hexo clean</code> （清除上一次启动生成的静态文件）</li><li><code>hexo g</code> （生成静态文件）</li><li><code>gulp</code> （压缩）</li><li><code>hexo s</code> （启动服务）</li><li>编写 <code>debug.sh</code> 以便捷启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>gulp<br>hexo s<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行时输入 `sh debug.sh`</span><br></code></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><ul><li><p>新建Github仓库，名为 <code>你注册Github时用的用户名.github.io</code></p></li><li><p>运行 <code>git config --global user.name &quot;你注册Github时用的用户名&quot;</code> 以设置用户名</p></li><li><p>运行 <code>git config --global user.email &quot;你注册Github时用的邮箱&quot;</code> 以设置邮箱</p></li><li><p>运行 <code>ssh-keygen -t rsa -C &quot;随便几个字母+数字+特殊符号(不能是引号)的组合(越长越好)&quot;</code><br>网上答案说这里要用邮箱，但实测不用邮箱也可以，用邮箱可以保证唯一性，看个人吧</p></li><li><p>连按三个回车创建密钥</p></li><li><p>进入 <code>.ssh</code> 目录（隐藏目录，自己找方法）</p></li><li><p>找到 <code>id_rsa.pub</code> 文件并复制文件内容到剪贴板（公钥）</p></li><li><p>打开<a href="https://github.com/settings/ssh/new">GitHub SSH and GPG keys</a>页面</p><ul><li><code>Title</code> 为标题，任意写</li><li><code>Key</code> 为公钥内容，将从 <code>id_rsa.pub</code> 复制的内容粘贴进去</li><li>点击 <code>Add SSH key</code> 添加</li><li>使用 <code>ssh -T git@github.com</code> 测试链接，出现 <code>Hi 你注册Github时用的用户名! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code> 则代表认证成功</li></ul></li><li><p>进入到 <code>博客根目录</code> 运行 <code>npm install hexo-deployer-git --save</code> 安装部署工具</p></li><li><p>编辑 <code>博客配置</code> 添加以下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:你注册Github时用的用户名/你注册Github时用的用户名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">blog</span>  <span class="hljs-comment">#分支名称，除main或master都行</span><br>  <span class="hljs-attr">ignore_hidden:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li><p>编写 <code>deploy.sh</code> 便捷部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>gulp<br>hexo d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">部署时运行 `sh deploy.sh`</span><br></code></pre></td></tr></table></figure></li><li><p>进入到 <code>https://github.com/你注册Github时用的用户名/你注册Github时用的用户名.github.io</code></p></li><li><p>点击 <code>Settings</code></p></li><li><p>点击 <code>Pages</code></p></li><li><p>设置 <code>Build and deployment</code></p><ul><li><code>Source</code> 选择 <code>Deploy from a branch</code></li><li><code>Branch</code> 选择 <code>博客配置</code> 设置的分支名，路径选 <code>/(root)</code></li><li>点击 <code>Save</code></li></ul></li><li><p>现在博客已成功部署好，进入 <code>https://你注册Github时用的用户名.github.io</code> 查看</p></li><li><p><code>Github Pages</code> 还可绑定自定义域名，不展开叙述</p></li></ul><h1 id="本教程完"><a href="#本教程完" class="headerlink" title="本教程完"></a>本教程完</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此教程为网上内容的整合，也是当前博客所使用的方法&lt;br&gt;此方法适用于所有系统，但会存在路径与命令区别，请自行尝试后进行修改&lt;br&gt;此教程使用Linux系统&lt;/p&gt;
&lt;h1 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RyhBotPythonSDK</title>
    <link href="https://runoneall.github.io/article/RyhBotPythonSDK.html"/>
    <id>https://runoneall.github.io/article/RyhBotPythonSDK.html</id>
    <published>2024-08-15T09:46:00.000Z</published>
    <updated>2024-08-15T10:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到RyhBotPythonSDK wiki！</p><p>项目地址: <a href="https://github.com/runoneall/RyhBotPythonSDK">runoneall&#x2F;RyhBotPythonSDK</a></p><p>RyhBotPythonSDK将帮助你更快地构建云湖机器人。它功能强大，语法简单且支持插件。</p><p>本文档将帮助你正确安装和使用RyhBotPythonSDK。</p><h1 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h1><p>RyhBotPythonSDK是使用Python编写的。为了使RyhBotPythonSDK能够在你的计算机上正确运行，请确保你已安装Python 3.10或以上的版本。你可以从 <code>python.org</code> 下载相应的安装包。</p><h1 id="附加依赖"><a href="#附加依赖" class="headerlink" title="附加依赖"></a>附加依赖</h1><p>此外，RyhBotPythonSDK还使用了一些外部依赖库。请按照以下步骤安装它们：</p><ol><li>Flask: 你可以使用命令 <code>pip3 install flask</code> 或从 <code>pypi.org</code> 安装。</li><li>Requests: 你可以使用命令 <code>pip3 install requests</code> 或从 <code>pypi.org</code> 安装。</li></ol><h1 id="关于功能"><a href="#关于功能" class="headerlink" title="关于功能"></a>关于功能</h1><p>RyhBotPythonSDK主要由三个部分组成：消息、服务器、插件</p><ul><li>消息：消息负责发送信息。它封装了云湖公 API，可以方便快捷地调用。</li><li>服务器：服务器负责接收信息。它将在0.0.0.0启动一个网络服务，以获取云湖服务器发送的消息。</li><li>插件：插件负责加载插件。当项目启动时，它将自动加载Plugins目录中的插件。（注意：此功能在旧版本中不可用。要确定此功能是否可用，可以检查RyhBotPythonSDK目录中是否存在Plugin.py）</li></ul><p>这三种功能可以独立使用。它们之间没有依赖关系。</p><h1 id="消息用法"><a href="#消息用法" class="headerlink" title="消息用法"></a>消息用法</h1><h1 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> RyhBotPythonSDK <span class="hljs-keyword">import</span> Message<br></code></pre></td></tr></table></figure><h1 id="设置消息令牌-token"><a href="#设置消息令牌-token" class="headerlink" title="设置消息令牌(token)"></a>设置消息令牌(token)</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Message.Token = <span class="hljs-string">&quot;你可以在云湖后台找到你的消息令牌&quot;</span><br></code></pre></td></tr></table></figure><h1 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Send = Message.Send()<br></code></pre></td></tr></table></figure><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Send.Text(<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span>,<br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span>,<br>    text=<span class="hljs-string">&quot;文本&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Send.Markdown(<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span>,<br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span>,<br>    markdown=<span class="hljs-string">&quot;Markdown语句&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Send.Image(<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span>,<br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span>,<br>    imageUrl=<span class="hljs-string">&quot;图片链接&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Send.File(<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span>,<br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span>,<br>    fileName=<span class="hljs-string">&quot;文件名称&quot;</span>,<br>    fileUrl=<span class="hljs-string">&quot;文件链接&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><h1 id="编辑消息"><a href="#编辑消息" class="headerlink" title="编辑消息"></a>编辑消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Edit = Message.Edit()<br></code></pre></td></tr></table></figure><h2 id="文本-1"><a href="#文本-1" class="headerlink" title="文本"></a>文本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Edit.Text(<br>    msgId=<span class="hljs-string">&quot;消息ID&quot;</span>,<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span>,<br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span>,<br>    new_text=<span class="hljs-string">&quot;新的文本&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><h2 id="Markdown-1"><a href="#Markdown-1" class="headerlink" title="Markdown"></a>Markdown</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Edit.Markdown(<br>    msgId=<span class="hljs-string">&quot;消息ID&quot;</span>,<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span>,<br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span>,<br>    new_markdown=<span class="hljs-string">&quot;新的Markdown&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><h2 id="图片-1"><a href="#图片-1" class="headerlink" title="图片"></a>图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Edit.Image(<br>    msgId=<span class="hljs-string">&quot;消息ID&quot;</span>,<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span>,<br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span>,<br>    new_image_url=<span class="hljs-string">&quot;新的图片链接&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><h2 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">Edit.File(<br>    msgId=<span class="hljs-string">&quot;消息ID&quot;</span>,<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span>,<br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span>,<br>    new_file_name=<span class="hljs-string">&quot;新的文件名称&quot;</span>,<br>    new_file_url=<span class="hljs-string">&quot;新的文件链接&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><h1 id="获取消息"><a href="#获取消息" class="headerlink" title="获取消息"></a>获取消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Messages = Message.Messages()<br></code></pre></td></tr></table></figure><h2 id="前向"><a href="#前向" class="headerlink" title="前向"></a>前向</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Messages.Before(<br>    chat_id=<span class="hljs-string">&quot;目标ID&quot;</span>,<br>    chat_type=<span class="hljs-string">&quot;目标类型&quot;</span>,<br>    before=消息数量,  <span class="hljs-comment">#Int</span><br>)<br></code></pre></td></tr></table></figure><h2 id="后向"><a href="#后向" class="headerlink" title="后向"></a>后向</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">Messages.After(<br>    chat_id=<span class="hljs-string">&quot;目标ID&quot;</span><br>    chat_type=<span class="hljs-string">&quot;目标类型&quot;</span><br>    message_id=<span class="hljs-string">&quot;消息ID&quot;</span>,  <span class="hljs-comment"># 基于某条消息，获取后续的消息</span><br>    after=消息数量,  <span class="hljs-comment"># 整型</span><br>)<br></code></pre></td></tr></table></figure><h1 id="管理看板-dashboard"><a href="#管理看板-dashboard" class="headerlink" title="管理看板(dashboard)"></a>管理看板(dashboard)</h1><h2 id="用户看板"><a href="#用户看板" class="headerlink" title="用户看板"></a>用户看板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Board = Message.Board()<br></code></pre></td></tr></table></figure><h3 id="文本-2"><a href="#文本-2" class="headerlink" title="文本"></a>文本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Board.Text(<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span><br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span><br>    text=<span class="hljs-string">&quot;看板文本&quot;</span><br>)<br></code></pre></td></tr></table></figure><h3 id="Markdown-2"><a href="#Markdown-2" class="headerlink" title="Markdown"></a>Markdown</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Board.Markdown(<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span><br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span><br>    markdown=<span class="hljs-string">&quot;看板Markdown文本&quot;</span><br>)<br></code></pre></td></tr></table></figure><h3 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Board.Html(<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span><br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span><br>    html=<span class="hljs-string">&quot;看板HTML文本&quot;</span><br>)<br></code></pre></td></tr></table></figure><h3 id="取消看板"><a href="#取消看板" class="headerlink" title="取消看板"></a>取消看板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Board.Dismiss(<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span><br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span><br>)<br></code></pre></td></tr></table></figure><h2 id="全局看板"><a href="#全局看板" class="headerlink" title="全局看板"></a>全局看板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BoardAll = Message.Board.All()<br></code></pre></td></tr></table></figure><h3 id="文本-3"><a href="#文本-3" class="headerlink" title="文本"></a>文本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">BoardAll.Text(<br>    text=<span class="hljs-string">&quot;看板文本&quot;</span><br>)<br></code></pre></td></tr></table></figure><h3 id="Markdown-3"><a href="#Markdown-3" class="headerlink" title="Markdown"></a>Markdown</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">BoardAll.Markdown(<br>    markdown=<span class="hljs-string">&quot;看板Markdown文本&quot;</span><br>)<br></code></pre></td></tr></table></figure><h3 id="Html-1"><a href="#Html-1" class="headerlink" title="Html"></a>Html</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">BoardAll.Html(<br>    html=<span class="hljs-string">&quot;看板HTML文本&quot;</span><br>)<br></code></pre></td></tr></table></figure><h3 id="取消看板-1"><a href="#取消看板-1" class="headerlink" title="取消看板"></a>取消看板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">BoardAll.Dismiss()<br></code></pre></td></tr></table></figure><h1 id="撤回消息"><a href="#撤回消息" class="headerlink" title="撤回消息"></a>撤回消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">Delete = Message.Delete<br><br>Delete(<br>    msgId=<span class="hljs-string">&quot;消息ID&quot;</span><br>    chatid=<span class="hljs-string">&quot;目标ID&quot;</span><br>    chattype=<span class="hljs-string">&quot;目标类型&quot;</span><br>)<br></code></pre></td></tr></table></figure><h1 id="服务器用法"><a href="#服务器用法" class="headerlink" title="服务器用法"></a>服务器用法</h1><h1 id="导入模块-1"><a href="#导入模块-1" class="headerlink" title="导入模块"></a>导入模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> RyhBotPythonSDK <span class="hljs-keyword">import</span> Server<br></code></pre></td></tr></table></figure><h1 id="接收普通消息"><a href="#接收普通消息" class="headerlink" title="接收普通消息"></a>接收普通消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@Server.Message.Normal</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">NormalHandle</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 你的代码实现</span><br></code></pre></td></tr></table></figure><h1 id="接收指令消息"><a href="#接收指令消息" class="headerlink" title="接收指令消息"></a>接收指令消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@Server.Message.Command</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CommandHandle</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 你的代码实现</span><br></code></pre></td></tr></table></figure><h1 id="添加机器人消息"><a href="#添加机器人消息" class="headerlink" title="添加机器人消息"></a>添加机器人消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@Server.Message.BotFollowed</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BotFollowedHandle</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 你的代码实现</span><br></code></pre></td></tr></table></figure><h1 id="删除机器人消息"><a href="#删除机器人消息" class="headerlink" title="删除机器人消息"></a>删除机器人消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@Server.Message.BotUnFollowed</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BotUnFollowedHandle</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 你的代码实现</span><br></code></pre></td></tr></table></figure><h1 id="机器人设置消息"><a href="#机器人设置消息" class="headerlink" title="机器人设置消息"></a>机器人设置消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@Server.Message.BotSettings</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BotSettingsHandle</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 你的代码实现</span><br></code></pre></td></tr></table></figure><h1 id="用户加入消息"><a href="#用户加入消息" class="headerlink" title="用户加入消息"></a>用户加入消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@Server.Message.GroupJoin</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GroupJoinHandle</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 你的代码实现</span><br></code></pre></td></tr></table></figure><h1 id="用户退出消息"><a href="#用户退出消息" class="headerlink" title="用户退出消息"></a>用户退出消息</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@Server.Message.GroupLeave</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GroupLeaveHandle</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 你的代码实现</span><br></code></pre></td></tr></table></figure><h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 你的代码实现</span><br><br>Server.Start(<br>    host = <span class="hljs-string">&quot;Host&quot;</span><br>    port = Port  <span class="hljs-comment"># 整型</span><br>    debug = (<span class="hljs-literal">True</span> / <span class="hljs-literal">False</span>) <span class="hljs-comment"># 是否启用调试模式</span><br>)<br></code></pre></td></tr></table></figure><h1 id="插件用法"><a href="#插件用法" class="headerlink" title="插件用法"></a>插件用法</h1><p>此SDK内置了两个插件和一个插件管理器</p><h1 id="插件管理器"><a href="#插件管理器" class="headerlink" title="插件管理器"></a>插件管理器</h1><p>此管理器是一个Python文件。使用Python运行它以获取使用说明。<code>python3 plugin-tool.py</code></p><h1 id="导入插件"><a href="#导入插件" class="headerlink" title="导入插件"></a>导入插件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> RyhBotPythonSDK.Plugin <span class="hljs-keyword">import</span> Plugin<br></code></pre></td></tr></table></figure><h2 id="从网址安装插件"><a href="#从网址安装插件" class="headerlink" title="从网址安装插件"></a>从网址安装插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 plugin-tool.py install &lt;链接&gt;<br></code></pre></td></tr></table></figure><ul><li><code>&lt;链接&gt;</code>: 资源地址，一个以.zip格式结尾的压缩包</li></ul><h2 id="从本地文件安装插件"><a href="#从本地文件安装插件" class="headerlink" title="从本地文件安装插件"></a>从本地文件安装插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 plugin-tool.py loadfile &lt;文件路径&gt;<br></code></pre></td></tr></table></figure><ul><li><code>&lt;文件路径&gt;</code>: 文件路径。当你无法通过互联网下载插件时，请使用此命令从本地文件安装它。它是一个以.zip格式结尾的压缩包。</li></ul><h2 id="显示插件信息"><a href="#显示插件信息" class="headerlink" title="显示插件信息"></a>显示插件信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 plugin-tool.py info &lt;插件名称&gt;<br></code></pre></td></tr></table></figure><ul><li><code>&lt;插件名称&gt;</code>: 插件名称，使用此命令获取插件的详细信息</li></ul><h2 id="列出已安装的插件"><a href="#列出已安装的插件" class="headerlink" title="列出已安装的插件"></a>列出已安装的插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 plugin-tool.py list<br></code></pre></td></tr></table></figure><p>列出所有已安装的插件</p><h2 id="移除插件"><a href="#移除插件" class="headerlink" title="移除插件"></a>移除插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 plugin-tool.py remove &lt;plugin name&gt;<br></code></pre></td></tr></table></figure><ul><li><code>&lt;plugin name&gt;</code>: 插件名称，使用此命令移除插件</li></ul><h1 id="Html插件"><a href="#Html插件" class="headerlink" title="Html插件"></a>Html插件</h1><p>一个内置插件。为RyhBotPythonSDK提供Html消息支持</p><h2 id="设置令牌-token"><a href="#设置令牌-token" class="headerlink" title="设置令牌(token)"></a>设置令牌(token)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Plugin.Html.SendHtml.Token=<span class="hljs-string">&quot;你可以在云湖后台找到你的消息令牌&quot;</span><br></code></pre></td></tr></table></figure><h2 id="发送Html消息"><a href="#发送Html消息" class="headerlink" title="发送Html消息"></a>发送Html消息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Plugin.Html.SendHtml.SendHtml(<br>    recvId=<span class="hljs-string">&quot;目标ID&quot;</span>,<br>    recvType=<span class="hljs-string">&quot;目标类型&quot;</span>,<br>    html=<span class="hljs-string">&#x27;HTML文本&#x27;</span><br>)<br></code></pre></td></tr></table></figure><h1 id="Sqlite插件"><a href="#Sqlite插件" class="headerlink" title="Sqlite插件"></a>Sqlite插件</h1><p>一个内置插件，使Sqlite数据库的使用更加简单直观</p><h2 id="导入模块-2"><a href="#导入模块-2" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> RyhBotPythonSDK.Plugin <span class="hljs-keyword">import</span> Plugin<br>SqlitePlugin = Plugin.Sqlite<br></code></pre></td></tr></table></figure><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">database, cursor = SqlitePlugin.db.connect(<span class="hljs-string">&#x27;你的sqlite文件路径&#x27;</span>)<br>SqlitePlugin.Execute.database = database<br></code></pre></td></tr></table></figure><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">SqlitePlugin.Execute.create_table(<br>    cursor, <br>    table_info = &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;表名&#x27;</span>,<br>        <span class="hljs-string">&#x27;item&#x27;</span>: [<br>            &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;INTEGER PRIMARY KEY AUTOINCREMENT&#x27;</span>&#125;, <span class="hljs-comment"># 主键</span><br>            &#123;<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;TEXT&#x27;</span>&#125;, <span class="hljs-comment"># 字段</span><br>            ... <span class="hljs-comment"># 更多字段</span><br>        ]<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">SqlitePlugin.Execute.insert(<br>    cursor, <br>    insert_info = &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;表名&#x27;</span>,<br>        <span class="hljs-string">&#x27;item&#x27;</span>: [<br>            &#123;<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;&quot;aaa&quot;&#x27;</span>&#125;, <span class="hljs-comment"># 字段</span><br>            ... <span class="hljs-comment"># 更多字段</span><br>        ]<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">SqlitePlugin.Execute.drop_table(<br>    cursor, <br>    table_name = <span class="hljs-string">&#x27;表名&#x27;</span><br>)<br></code></pre></td></tr></table></figure><h2 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">result = SqlitePlugin.Execute.run_command(<br>    cursor, <br>    <span class="hljs-string">&quot;SQL命令&quot;</span><br>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">SqlitePlugin.Execute.delete(<br>    cursor,<br>    table_name = <span class="hljs-string">&#x27;表名&#x27;</span>,<br>    condition = <span class="hljs-string">&#x27;id=1&#x27;</span> <span class="hljs-comment"># 筛选条件，可选</span><br>)<br></code></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">SqlitePlugin.Execute.update(<br>    cursor,<br>    update_info = &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;表名&#x27;</span>,<br>        <span class="hljs-string">&#x27;item&#x27;</span>: [<br>            &#123;<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;&quot;更新测试&quot;&#x27;</span>&#125;, <span class="hljs-comment"># 字段</span><br>            ... <span class="hljs-comment"># 更多字段</span><br>        ]<br>    &#125;,<br>    condition = <span class="hljs-string">&#x27;id=1&#x27;</span> <span class="hljs-comment"># 筛选条件，可选</span><br>)<br></code></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">result = SqlitePlugin.Execute.select(<br>    cursor,<br>    table_name = <span class="hljs-string">&#x27;表名&#x27;</span>,<br>    condition = <span class="hljs-string">&#x27;id=1&#x27;</span> <span class="hljs-comment"># 筛选条件，可选</span><br>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h2 id="断开数据库连接"><a href="#断开数据库连接" class="headerlink" title="断开数据库连接"></a>断开数据库连接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">SqlitePlugin.db.disconnect(cursor, database)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎来到RyhBotPythonSDK wiki！&lt;/p&gt;
&lt;p&gt;项目地址: &lt;a href=&quot;https://github.com/runoneall/RyhBotPythonSDK&quot;&gt;runoneall&amp;#x2F;RyhBotPythonSDK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;R</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于星月Minecraft版本库</title>
    <link href="https://runoneall.github.io/article/%E8%AE%B0%E5%BD%95%E6%98%9F%E6%9C%88Minecraft%E7%89%88%E6%9C%AC%E5%BA%93.html"/>
    <id>https://runoneall.github.io/article/%E8%AE%B0%E5%BD%95%E6%98%9F%E6%9C%88Minecraft%E7%89%88%E6%9C%AC%E5%BA%93.html</id>
    <published>2024-06-17T15:54:23.000Z</published>
    <updated>2024-06-19T12:22:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个始于2020年的项目，做它的初衷，只是为了给我玩的为数不多的游戏一个版本留档，当时这还只是一个私有项目，并不对外开放。</p><p>后来，渐渐的我发现有许多人，因为各种各样的原因，有心购买游戏却无力，亦或是需要某个特定的版本来完成特定的事，在网上苦苦寻找却不得。我想，既然我有这些资源，为什么不公开出来供大家一起使用呢？这便是版本库对外开放的契因。</p><p>我们深知这个版本库还很不尽人意，界面简陋，功能稀少，甚至可能还有一堆的问题。因此我们从V1开始，就一直在不断地完善改进它，希望能给每一个使用版本库的你，带来更好的体验。</p><p>如果你喜欢它，且已经实现了经济独立，可以考虑通过捐赠来支持我们。这可以在很大程度上用于提升环境配置及开发积极性，否则请你不要打赏，分享与宣传也是对我们的强有力的支持。</p><p>转载自<a href="https://spectrollay.github.io/minecraft_repository/">星月Minecraft版本库</a><br>转载自<code>云湖</code>Spectrollay（9356107）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个始于2020年的项目，做它的初衷，只是为了给我玩的为数不多的游戏一个版本留档，当时这还只是一个私有项目，并不对外开放。&lt;/p&gt;
&lt;p&gt;后来，渐渐的我发现有许多人，因为各种各样的原因，有心购买游戏却无力，亦或是需要某个特定的版本来完成特定的事，在网上苦苦寻找却不得。我</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>写一篇和老手机的回忆</title>
    <link href="https://runoneall.github.io/article/%E5%86%99%E4%B8%80%E7%AF%87%E5%92%8C%E8%80%81%E6%89%8B%E6%9C%BA%E7%9A%84%E5%9B%9E%E5%BF%86.html"/>
    <id>https://runoneall.github.io/article/%E5%86%99%E4%B8%80%E7%AF%87%E5%92%8C%E8%80%81%E6%89%8B%E6%9C%BA%E7%9A%84%E5%9B%9E%E5%BF%86.html</id>
    <published>2024-06-17T15:12:30.000Z</published>
    <updated>2024-06-18T11:58:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>OPPO A31</strong>，最经典的OPPO低端机，也可以说是OPPO低端机的始祖。别人送了我爷爷了一台淘汰下来的A31c，给小时候的我当玩具了，陪我度过了了不少童年的时光，那段在老家隔着一条公路蹭WIFI玩游戏，隔着一扇卷帘门在寒风下蹭WIFI下载ROM的时光。愤怒的小鸟2，捣蛋猪，登山赛车，地铁跑酷，部落冲突…得益于超低分辨率所以骁龙410基本上不怎么卡，拆下来背板后黑色的涂层很有科技感，TF卡很难插拔，方方正正的设计很有味道加上轻盈的手感，给我带来的冲击不亚于我第一次摸到索尼Xperia XZ1。</p><blockquote><p>OPPO A31有白色、蓝色两种颜色，机身高度为131.9毫米，宽度为65.54毫米，厚度为8.03毫米，重量为135克。<br>OPPO A31搭载骁龙410处理器，电池容量为2000毫安时，摄影方面搭载800万像素后置摄像头和200万像素前置摄像头，具有3.5毫米耳机接口和Micro USB v2.0数据接口。</p></blockquote><p>小时候给它刷机，不小心刷砖了。直到几年前发现了吃灰已久的它，抱着试一试的心态在网上找到了救砖包，结果成功救活了，看着它那陌生的开机第一屏，一阵阵惊呼吓到了我的妈妈，我不知道说什么好。那晚我彻夜难眠。</p><p>后来还是老样子，给这个手机找到了很多古老的刷机包，一个个刷，一个个体验LZY大佬移植的当年或知名，或默默无闻，如今或生存，或已经销声匿迹的OS。历史沉沦之感与惆怅之心交织在一起，这些刷机包带来的新鲜感是当今换了不少手机所不能体现的。</p><p>有一次在刷回官方的时候不小心把 <strong>基带</strong> 干掉了，去当地的OPPO官方万能售后也没法搞回来，索性直接把他当作一个小MP3来使用，刷上干净的类原生ROM，调整好功耗，刷上蝰蛇模块，连上耳机，便有了一种回到当年的复古感。这种复古感和当年我把箱子里积灰的 <strong>三星S3</strong> 拿出来，连上现代常见的蓝牙耳机来收打电话那种古老又先进的商务感甚为相似。</p><blockquote><p>基带：Baseband 信源（信息源，也称发射端）发出的没有经过调制（进行频谱搬移和变换）的原始电信号所固有的频带（频率带宽），称为基本频带，简称基带。<br>三星盖乐世S3是韩国三星电子的旗舰级智能手机，采用Android 4.0.4（Ice Cream Sandwich）操作系统，为三星盖乐世S2的后继机种；其于2012年5月3日在英国伦敦发表。</p></blockquote><p>那年夏天在被窝里戴上耳机连接A31c，用 <strong>MARENOL</strong> 把自己与世界分离，蒙上眼睛减缓呼吸，一天不吃不喝，直到我爸一脚把锁着的屋门踹开，把我从被窝里拽出来，摔掉了它，屏幕那一刻永远定格在了白色。</p><blockquote><p>MARENOL是由LeaF创作的G2R2018参赛曲目，取得了个人战第5名。<br>本曲以带有血腥猎奇向的BGA而著称，此处不予以介绍。<br>曲目名称一般认为由英文单词“mare”（噩梦）与“-ol”（醇类及酚类物质的英文后缀）组合而成，因此也被称为“噩梦醇”。据此推测，本曲名应代指的是由LeaF虚构的一种可以治疗精神疾病的药物，但其副作用是带来接近死亡般强烈而真实的噩梦。永远到达不了死亡的真实。</p></blockquote><p>后来尝试修复，但是拆开以后发现屏问题不大，但是内伤严重，主板直接弯了，焊点也从SoC和主板的连接处断开了，便没有了再修的冲动。</p><p>后来在和同学聊天的时候得知他也有一台 <strong>OPPO A31</strong>，由于我同学也想体验一下类原生以及模块带来的音质变化，于是便借我把玩了几天。那几天我看着这并不属于我的另一台A31，一股不可名状的感觉油然而生。我小心翼翼地备份基带，备份数据，刷机，一气呵成。</p><blockquote><p>OPPO A31是OPPO联合苏宁手机于2015年4月9日发布的一款手机产品，是OPPO A系列首款产品。<br>OPPO A31有白色、蓝色两种颜色，机身高度为131.9毫米，宽度为65.54毫米，厚度为8.03毫米，重量为135克。<br>OPPO A31搭载骁龙410处理器，电池容量为2000毫安时，摄影方面搭载800万像素后置摄像头和200万像素前置摄像头，具有3.5毫米耳机接口和Micro USB v2.0数据接口。</p></blockquote><p>当我依依不舍地把它交还给我的同学，在发现同学的眼中并没有出现我所期望的惊喜和激动后，我才发现，原来世界上失去的不止有我的那台A31c，还有人们对玩具随年龄增长而日渐淡薄甚至消失的那份最初始，最纯粹的喜悦。</p><p>转载自 <code>云湖</code>Louis（8668120）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;OPPO A31&lt;/strong&gt;，最经典的OPPO低端机，也可以说是OPPO低端机的始祖。别人送了我爷爷了一台淘汰下来的A31c，给小时候的我当玩具了，陪我度过了了不少童年的时光，那段在老家隔着一条公路蹭WIFI玩游戏，隔着一扇卷帘门在寒风下蹭WIFI下载</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>重大新闻! Minecraft基岩版插件社区或将不复存在</title>
    <link href="https://runoneall.github.io/article/%E9%87%8D%E5%A4%A7%E6%96%B0%E9%97%BB-Minecraft%E5%9F%BA%E5%B2%A9%E7%89%88%E6%8F%92%E4%BB%B6%E7%A4%BE%E5%8C%BA%E6%88%96%E5%B0%86%E4%B8%8D%E5%A4%8D%E5%AD%98%E5%9C%A8.html"/>
    <id>https://runoneall.github.io/article/%E9%87%8D%E5%A4%A7%E6%96%B0%E9%97%BB-Minecraft%E5%9F%BA%E5%B2%A9%E7%89%88%E6%8F%92%E4%BB%B6%E7%A4%BE%E5%8C%BA%E6%88%96%E5%B0%86%E4%B8%8D%E5%A4%8D%E5%AD%98%E5%9C%A8.html</id>
    <published>2024-06-17T14:58:51.000Z</published>
    <updated>2024-06-17T15:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Minecraft-重大新闻-Minecraft基岩版插件社区或将不复存在"><a href="#Minecraft-重大新闻-Minecraft基岩版插件社区或将不复存在" class="headerlink" title="[Minecraft]重大新闻! Minecraft基岩版插件社区或将不复存在"></a>[Minecraft]重大新闻! Minecraft基岩版插件社区或将不复存在</h2><hr><h4 id="注意‼️文章中的插件指的是MC基岩版服务端中的使用加载器加载的插件-Plugin-，而非在客户端即可加载的模组-Addon"><a href="#注意‼️文章中的插件指的是MC基岩版服务端中的使用加载器加载的插件-Plugin-，而非在客户端即可加载的模组-Addon" class="headerlink" title="注意‼️文章中的插件指的是MC基岩版服务端中的使用加载器加载的插件(Plugin)，而非在客户端即可加载的模组(Addon)"></a>注意‼️文章中的插件指的是MC基岩版服务端中的使用加载器加载的插件(Plugin)，而非在客户端即可加载的模组(Addon)</h4><h4 id="文章中可能有错误出现，请谅解，如果有错误请告诉我，我会及时改正"><a href="#文章中可能有错误出现，请谅解，如果有错误请告诉我，我会及时改正" class="headerlink" title="文章中可能有错误出现，请谅解，如果有错误请告诉我，我会及时改正"></a>文章中可能有错误出现，请谅解，如果有错误请告诉我，我会及时改正</h4><hr><p>近日，Mojang宣布将从Minecraft服务器删除 PDB¹ 文件[预计将在1.21(1.21.10)版本],这将严重影响MC基岩版插件开发[第三方开发工具将不能使用,只有具有特殊访问权限的开发者(Minecraft 官方合作伙伴)才能继续进行更新]。对此,社区中有两种猜测：1.Mojang(微软)为了让基岩版的内置商店发展。2.为了防止第三方外挂客户端进行作弊。但无论如何这都将对基岩版插件社区造成沉重打击。</p><p>截至文章发布,<a href="https://github.com/LiteLDev">LiteLDev</a>宣布将停止开发 <a href="https://github.com/LiteLDev/LeviLamina">LeviLamina</a>  (原LiteLonder加载器)，<a href="https://github.com/bdsx/bdsx">BDSX</a>开发人员也表示如果官方删除PDB文件，项目将不会继续更新</p><p>以下为<a href="https://github.com/LiteLDev">LiteLDev</a>及<a href="https://github.com/bdsx/bdsx">BDSX</a>宣布的内容：</p><blockquote><p>这个存储库将被存档，因为Mojang计划从他们未来发布的二进制文件中删除符号文件。</p><p>尽管社区要求提供完整的 PDB¹ 文件，但 Mojang 拒绝了，现在打算从未来的版本中删除符号文件。</p><p>这将使调试服务器和开发插件变得不可能，导致 LeviLamina 和其他插件的开发结束。</p><p>因此，未来不会开发任何重要的插件，例如关键错误修复、反作弊插件和社区需要的其他功能插件。但是，那些开发作弊的人仍然可以这样做，这使得社区很难创建反作弊插件来保护服务器。</p><p>Mojang在开发服务器方面并不擅长，现在他们使社区无法开发插件。这是一个非常糟糕的决定。</p><p>Mojang对社区的立场令人深感失望。我们敦促社区采取行动，发出我们的声音。通过在社交媒体上表达我们的担忧并向Mojang施加压力，我们希望他们能够重新考虑他们的决定。社区团结和集体努力可能会鼓励Mojang改变他们的方法。</p><p>如果您对本通知有任何疑问或意见，请联系。<a href="mailto:&#108;&#105;&#x74;&#101;&#108;&#x64;&#x65;&#x76;&#64;&#108;&#105;&#116;&#x65;&#x6c;&#x64;&#101;&#x76;&#46;&#x63;&#x6f;&#x6d;">&#108;&#105;&#x74;&#101;&#108;&#x64;&#x65;&#x76;&#64;&#108;&#105;&#116;&#x65;&#x6c;&#x64;&#101;&#x76;&#46;&#x63;&#x6f;&#x6d;</a><br><a href="https://imgse.com/i/pk0wkUU"><img src="https://s21.ax1x.com/2024/06/17/pk0wkUU.jpg" alt="pk0wkUU.jpg"></a></p><p><a href="https://imgse.com/i/pk0wFET"><img src="https://s21.ax1x.com/2024/06/17/pk0wFET.jpg" alt="pk0wFET.jpg"></a></p></blockquote><blockquote><p>在BDS v.1.21预览版中，删除了非常重要且必不可少的调试信息<br>适用于 BDSX 等基于 BDS 的服务器软件。<br>所以很抱歉，维护 BDSX 几乎是不可能的。<br>如果 Mojang 在发布中撤销该决定，我将保留这个项目，但如果他们不这样做，我想让这个服务器成为 Minecraft 和编程社区。<br><a href="https://imgse.com/i/pk0wMb6"><img src="https://s21.ax1x.com/2024/06/17/pk0wMb6.jpg" alt="pk0wMb6.jpg"></a></p></blockquote><p>如果官方不再开放 PDB¹ 文件，基岩版插件社区或许不会消失，但插件支持的版本一定不会更新，除非有了新的加载方式，但这很一定非常艰难。</p><p>写文章不易，点个赞再走吧，给个金币就更好了</p><p>¹:PDB即Program Database File<em>程序数据库文件</em>是用来存储程序信息的</p><p>转载自 <code>云湖</code>星凌（9481822）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Minecraft-重大新闻-Minecraft基岩版插件社区或将不复存在&quot;&gt;&lt;a href=&quot;#Minecraft-重大新闻-Minecraft基岩版插件社区或将不复存在&quot; class=&quot;headerlink&quot; title=&quot;[Minecraft]重大新闻! M</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Serv00搭建各种服务</title>
    <link href="https://runoneall.github.io/article/Serv00%E6%90%AD%E5%BB%BA%E5%90%84%E7%A7%8D%E6%9C%8D%E5%8A%A1.html"/>
    <id>https://runoneall.github.io/article/Serv00%E6%90%AD%E5%BB%BA%E5%90%84%E7%A7%8D%E6%9C%8D%E5%8A%A1.html</id>
    <published>2024-06-16T02:09:36.000Z</published>
    <updated>2024-06-16T02:30:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Serv00搭建各种服务"><a href="#Serv00搭建各种服务" class="headerlink" title="Serv00搭建各种服务"></a>Serv00搭建各种服务</h1><p><a href="https://www.serv00.com/">这个平台</a>是个 Virtual Host ，没有 Root ，还是 FreeBSD 的系统，不是 Linux ，不太好用。但是优点是隔离性差， Memory 和 vCPU 能短时间内超过 100% 进行调用。</p><p>已经玩了不少时间了，起初看到 Github 上有使用 Serv00 搭建 Vless 节点的<a href="https://github.com/qwer-search/serv00-vless">仓库</a>，就上手玩了一下，后来发现极其不稳， screen 运行的进程总是过一段时间就掉了（后经网友讨论确认为Serv00有时候会重启宿主机），又得ssh上去启动，相当不友好，且后来又发现了 Hax 这样的玩具，就对 Serv00 视如敝履了。</p><p>但是这两天有<a href="https://jq.qq.com/?_wv=1027&k=qssjFvAs">群友</a>突然提醒我才想起，我在 Hax 上用的很舒服的 pm2 也可以在 Serv00 上使用，这个十年有效期的玩具突然显得有用了起来。</p><p>经过我的尝试，成功在 Serv00 上部署了一些服务，接下来进行记录：</p><h1 id="面板自带功能"><a href="#面板自带功能" class="headerlink" title="面板自带功能"></a>面板自带功能</h1><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>Serv00 上如果想要使用自己的域名，有两种方式，一种是通过 Cloudflare 提供的 Argo 隧道，不仅能绑域名，免配置 ssl ，还可以享受 Cloudflare 的免费 CDN 提速。第二种就是直接使用面板内自带的 DNS 服务器功能绑定自己的域名。</p><p>在 Panel 中进入 DNS zones 选项卡，使用 Add new zone 功能添加自己的域名或者自己的域名的子域，然后在 Zone list 中找到刚刚添加的域名，点击 Edit 查看 DNS 记录，把当中列出的全部记录添加到自己的域名的 DNS 记录中即可完成域名的绑定。</p><p>Serv00 本身对于绑定在其上的域名提供了许多的服务支持，这里所说的绑定在Serv00上的域名包括自己绑定的自己的域名，以及 Serv00 在注册账户时赠送的域名 <code>USERNAME.serv00.net</code> ，其服务包括免费的一键申请式的 SSL 证书、域名邮箱、 DNS 管理等多种功能。</p><h3 id="SSL证书申请"><a href="#SSL证书申请" class="headerlink" title="SSL证书申请"></a>SSL证书申请</h3><p>在 Panel 中进入 WWW websites 选项卡，点击 Manage SSL certificates ，在你需要申请 SSL 证书的域名的 A 记录指向的那个 IP 地址右侧点击 Manage ，再点击 Add certificate ， Type 选择 Generate Let’s Encrypt certificate ，Domain 选择要申请 SSL 证书的域名，再点击 Add 即可。</p><h3 id="域名邮箱"><a href="#域名邮箱" class="headerlink" title="域名邮箱"></a>域名邮箱</h3><p>Panel 中进入 E-mail 选项卡，注册账号后会自动注册一个域名邮箱，用户名是 <code>USERNAME@USERNAME.serv00.net</code> 是 Serv00 的账户密码。可以使用 Add new e-mail 功能新建邮箱账户。</p><p>也可以在 Add new alias 功能中新建别名邮箱，其别名邮箱功能也提供了和 Cloudflare 一样的 Catch-all 的 Advanced settings 选项，用来批量注册东西十分方便。</p><p>目前我的测试中，似乎没有在 Manage whitelist 中添加进白名单的域名邮箱发来的邮件全部都会被识别为垃圾邮件。所以有需要的话可以在 Manage whitlist 中添加你需要接受邮件的邮箱的域名，比如 <code>qq.com</code> 、 <code>gmail.com</code> 等等。</p><p>如果绑定了自己的域名，想要使用自己的域名配置域名邮箱的话，要在 Domain list 中找到自己的域名，点击最右边的 DKIM ， action 选择 Add DNS record automatically ，然后 Sign domain 以注册域名，使得新的域名邮箱能够通过一些邮件接收服务器的验证。</p><p>Open web client 功能就可以进入邮箱的登录页面了，其使用方法与大多数的邮箱相同，不再赘述。</p><h3 id="DNS管理"><a href="#DNS管理" class="headerlink" title="DNS管理"></a>DNS管理</h3><p>DNS zones 选项卡中在自己绑定的域名右侧点击 Edit ，即可查看当前域名的所有 DNS 记录，在 Add new record 中可以手动添加新的 DNS 记录，与大多数的域名服务商提供的 DNS 管理的功能类似。</p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>WWW websites 选项卡中可以根据语言不同添加多种网站，其中 PHP 的 <code>eval() function</code> 和 <code>exec() function</code> 都要在添加完网站后，在Manage &gt; Details 中打开。不同类型的网页其 Details 中的选项也都有差异，可以按需查看配置，这里重点讲一下 Proxy 类型指向自己的应用程序监听端口的配置。</p><p>Add new website 功能中， Domain 填写自己的域名或者 serv00 分配的域名，或者它们的子域，展开 Advanced settings， Website type 选择 Proxy ，Proxy target 选择 localhost ， Proxy port 选择自己的应用监听的端口，其他选项留空或者保持默认，点击 Add 即可。接下来就能使用刚刚填写的域名访问自己部署的对应端口的应用了。如果需要 https 访问，再按前文的步骤去申请 SSL 证书即可。</p><h2 id="运行自己的应用"><a href="#运行自己的应用" class="headerlink" title="运行自己的应用"></a>运行自己的应用</h2><p>Additional services 选项卡中找到 Run your own applications 项目，将其设置为 Enabled 即可。<strong>如果不开启这一项，自己的用户目录下的所有文件都无法添加可执行权限。</strong></p><h2 id="File-manager"><a href="#File-manager" class="headerlink" title="File manager"></a>File manager</h2><p>文件管理，有一定的在线编辑和预览的功能，兼具文件的上传下载，删除新建等各种管理功能，十分便利。</p><h2 id="Port-reservation"><a href="#Port-reservation" class="headerlink" title="Port reservation"></a>Port reservation</h2><p>需要使用端口都得在这申请。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>Serv00 提供了 MySQL 、 PostgreSQL 、 MongoDB 三种数据库，可以按需新建数据库、数据库用户。同时， Serv00 还提供了三种数据库的 webui ，十分便利。</p><p>需要注意的是，所有数据库在新建时，其用户名和数据库名都有一个 <code>mxxx_</code> 的前缀，在使用时容易被忽视。</p><h2 id="Cron-jobs"><a href="#Cron-jobs" class="headerlink" title="Cron jobs"></a>Cron jobs</h2><p>Cron jobs 选项卡提供了一些计划性任务的设置功能，在这里可以设置开机自启任务，或者定时循环任务，当然常用的还是开机自启任务的设定， Specify time 选择 After reboot 即为开机自启。</p><h1 id="部署应用前的一些准备工作"><a href="#部署应用前的一些准备工作" class="headerlink" title="部署应用前的一些准备工作"></a>部署应用前的一些准备工作</h1><p>在部署自己的应用之前，我建议提前安装好 pm2 以及 Cloudflared （可选）。前者是进程管理工具，用来方便开机自启，以及程序崩溃后自启，查阅进程运行情况等等。后者是 Cloudflare 的 Argo 隧道客户端，用它也可以给自己部署的应用加域名。特别是 Uptime Kuma ，更加推荐使用 Cloudflared 加域名，而不建议使用面板自带的 Proxy 。</p><h2 id="Pm2"><a href="#Pm2" class="headerlink" title="Pm2"></a>Pm2</h2><p>这个是重中之重，如果不是成功安装了 pm2 ，我甚至不会尝试探索 Serv00 这个玩具有什么用，所以 pm2 的安装方法记录在开头。</p><p>在 SSH 连接 serv00 之后，直接使用一键脚本安装 pm2 ：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -s https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/k0baya/</span>alist_repl<span class="hljs-regexp">/main/</span>serv00/install-pm2.sh)<br></code></pre></td></tr></table></figure><blockquote><p>如果安装完成后执行 <code>pm2</code> 提示命令未找到，你可以断开 SSH 连接，再重新连接，即可。</p></blockquote><h2 id="Cloudflared"><a href="#Cloudflared" class="headerlink" title="Cloudflared"></a>Cloudflared</h2><p>Cloudflared 官方仓库并没有构建 FreeBSD 系统上能够使用的二进制文件，但是同样的，我找到了<a href="https://cloudflared.bowring.uk/">第三方的构筑</a>。使用第三方构筑的二进制文件，就能愉快的使用隧道了。</p><p>关于 Cloudflared 是什么，有什么用，ARGO_TOKEN 如何获取等部分，这里不再赘述，详细可以查看我的关于 CodeSandbox 和 Hax 的文章。</p><p>创建并进入Cloudflared 的工作目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/domains/cloudflared &amp;&amp; <span class="hljs-built_in">cd</span> ~/domains/cloudflared<br></code></pre></td></tr></table></figure><p>下载 Cloudflared：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://cloudflared.bowring.uk/binaries/cloudflared-freebsd-latest.7z &amp;&amp; 7z x cloudflared-freebsd-latest.7z &amp;&amp; <span class="hljs-built_in">rm</span> cloudflared-freebsd-latest.7z &amp;&amp; <span class="hljs-built_in">mv</span> -f ./temp/* ./cloudflared &amp;&amp; <span class="hljs-built_in">rm</span> -rf temp<br></code></pre></td></tr></table></figure><p>测试运行：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./cloudflared</span> tunnel <span class="hljs-params">--edge-ip-version</span> auto <span class="hljs-params">--protocol</span> http2 <span class="hljs-params">--heartbeat-interval</span> 10s run <span class="hljs-params">--token</span> ARGO_TOKEN<br></code></pre></td></tr></table></figure><blockquote><p>其中 ARGO_TOKEN 要替换成自己的。确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p></blockquote><p>使用 pm2 启动 Cloudflared：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start</span> <span class="hljs-string">.</span><span class="hljs-comment">/cloudflared</span> <span class="hljs-literal">--</span> <span class="hljs-comment">tunnel</span> <span class="hljs-literal">--</span><span class="hljs-comment">edge</span><span class="hljs-literal">-</span><span class="hljs-comment">ip</span><span class="hljs-literal">-</span><span class="hljs-comment">version auto</span> <span class="hljs-literal">--</span><span class="hljs-comment">protocol http2</span> <span class="hljs-literal">--</span><span class="hljs-comment">heartbeat</span><span class="hljs-literal">-</span><span class="hljs-comment">interval 10s run</span> <span class="hljs-literal">--</span><span class="hljs-comment">token ARGO_TOKEN</span><br></code></pre></td></tr></table></figure><blockquote><p>其中 ARGO_TOKEN 要替换成自己的。</p></blockquote><p>接着去 CLoudflare 的面板中设置域名对应端口，即可使用域名访问自己搭建的服务了。</p><h2 id="安装-go1-22"><a href="#安装-go1-22" class="headerlink" title="安装 go1.22"></a>安装 go1.22</h2><blockquote><p>如果你有安装自己使用 go build 构建的需求，你可以选择安装最新的 go1.22 ，这里记录其安装过程。</p></blockquote><p>由于 Serv00 服务器上并未提供 go1.22 ，只提供了 go1.20.3 ，无法正常进行构建工作，所以需要手动安装 go1.22 环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建安装目录</span><br><span class="hljs-built_in">mkdir</span> -p ~/local/soft &amp;&amp; <span class="hljs-built_in">cd</span> ~/local/soft<br><span class="hljs-comment"># 下载编译好的 go1.22 的程序包</span><br>wget https://dl.google.com/go/go1.22.0.freebsd-amd64.tar.gz<br><span class="hljs-comment"># 解压</span><br>tar -xzvf go1.22.0.freebsd-amd64.tar.gz<br><span class="hljs-comment"># 删除压缩文件</span><br><span class="hljs-built_in">rm</span> go1.22.0.freebsd-amd64.tar.gz<br><span class="hljs-comment"># 修改 .profile 文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=~/local/soft/go/bin:$PATH&#x27;</span> &gt;&gt; ~/.profile<br><span class="hljs-comment"># 使 .profile 的修改生效</span><br><span class="hljs-built_in">source</span> ~/.profile<br><span class="hljs-comment"># 检查 go 版本</span><br>go version<br></code></pre></td></tr></table></figure><h1 id="部署自己的应用"><a href="#部署自己的应用" class="headerlink" title="部署自己的应用"></a>部署自己的应用</h1><blockquote><p>关于设定 PHP 版本、插件、参数等配置均可参考文档的<a href="https://docs.serv00.com/htaccess/"> .htaccess </a>部分进行配置，由于 PHP 的应用部署实在是太简单，故本文不会过多介绍。</p></blockquote><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>实际上在 serv00 的<a href="https://docs.serv00.com/">文档</a>中有搭建网站的示例，没错，示例就有 WordPress ，实际上 WordPress 确实可以搭建，十分简单好用。这里不做过多介绍，按照文档一步步操作即可。</p><p>除了 WordPress 外，文档中还详细介绍了 Redis、Memcached、Imapsync、WP-CLI、Tomcat 等服务的搭建方法，有需求的都可以照着抄。</p><h2 id="KodBox"><a href="#KodBox" class="headerlink" title="KodBox"></a>KodBox</h2><p>虽然 Serv00 能够部署 KodBox，但是实在是不太好用。最直观的感受就是卡，因为 KodBox 运行期间需要调用多个 PHP 组件，而 Serv00 限制同时处理三个 PHP 进程，所以显得特别慢。其次， Serv00 没有 Root 权限，部分 PHP 插件没有安装，也无法安装，导致有一些 KodBox 的插件无法正常运行。</p><p>当然如果只是图新奇搭一个玩玩，也是可以的。下面是步骤：</p><p>首先在 Panel 中 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>PHP</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 安装KodBox</span><br>bash &lt;(curl -s https:<span class="hljs-regexp">//</span>pan.rappit.site<span class="hljs-regexp">/d/</span>shell<span class="hljs-regexp">/kodbox1.49/</span>serv00-kodbox-install.sh)<br></code></pre></td></tr></table></figure><p>然后去 Panel 中的 MySQL 选项卡，新建数据库和用户，用以接入 KodBox 。再去 WWW Websites 选项卡中找到 用户名.serv00.net ，点击右侧的 Manage &gt; Details 进入设置，把 GZIP compression、Allow PHP eval() function、Allow PHP exec() function 三个功能打开。</p><p>然后使用浏览器访问你的 KodBxo 的域名，进行安装配置即可。初次启动需要较长的时间，请耐心等待。</p><h2 id="Lsky-Pro"><a href="#Lsky-Pro" class="headerlink" title="Lsky-Pro"></a><a href="https://github.com/lsky-org/lsky-pro">Lsky-Pro</a></h2><p>一开始看<a href="https://docs.lsky.pro/">兰空图床的文档</a>没看到 webdav 功能的相关介绍，只看到几个我都不用的存储介质，遂不感兴趣的搁置了，然而群友近日又提起，我打开 GitHub 才发现首页有个 Commit 的标题就是 webdav 相关，即兰空图床支持 webdav 。于是我便部署了一下，体验感觉还不错，简单易用。</p><p>本来无意在本篇文章再多写 PHP 相关的站点部署，因为过于简单。但是奈何群友有需求，遂做个简单的步骤记录：</p><p>首先在 Panel 中 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>PHP</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着SSH登入，并进入刚刚你新建的域名目录下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 下载图床应用</span><br>release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/lsky<span class="hljs-literal">-org</span>/lsky<span class="hljs-literal">-pro</span>/releases/latest)<br>asset_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$release_info</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&#x27;.assets[] | select(.name != &quot;source code&quot;) | .browser_download_url&#x27;</span>)<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-literal">-o</span> temp.zip <span class="hljs-string">&quot;<span class="hljs-variable">$asset_url</span>&quot;</span> &amp;&amp; unzip <span class="hljs-literal">-q</span> temp.zip &amp;&amp; <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> temp.zip<br><span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> public_html &amp;&amp; ln <span class="hljs-literal">-s</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PWD</span>/public&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$PWD</span>/public_html&quot;</span><br></code></pre></td></tr></table></figure><p>接着在 Panel 中 WWW websites 选项卡内，点击自己刚刚创建的用于部署 Lsky-Pro 的域名的 Manage &gt; Details ，在 <strong>Open Basedir directories</strong> 的最末添加：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:/usr/home/</span>用户名/domains/xxx.<span class="hljs-title class_">USERNAME</span>.serv00.net<br></code></pre></td></tr></table></figure><blockquote><p>记得把用户名和最末的域名换成自己的。</p></blockquote><p>然后把 <strong>GZIP compression</strong> 、<strong>Allow PHP eval() function</strong> 、<strong>Allow PHP exec() function</strong> 都打开，点击 save changes 保存。</p><p>然后去 Panel 中的 MySQL 选项卡，新建数据库和用户，用以接入 Lsky-Pro 。</p><p>然后使用浏览器访问你的 Lsky-Pro 的域名，进行安装配置即可。</p><blockquote><p>上面的应用不需要占用端口。</p></blockquote><hr><blockquote><p>下面的应用每一个都能够 &#x2F; 需要占用端口。</p></blockquote><h2 id="Vless"><a href="#Vless" class="headerlink" title="Vless"></a>Vless</h2><p>这个肯定是第一时间部署的，每次遇到这样的平台，第一时间总是想着能不能搭建节点。</p><h3 id="①"><a href="#①" class="headerlink" title="①"></a>①</h3><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Vless 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着SSH登入，并进入刚刚你新建的域名目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆源仓库</span><br><span class="hljs-built_in">rm</span> -rf public_html &amp;&amp; git <span class="hljs-built_in">clone</span> https://github.com/qwer-search/serv00-vless public_html &amp;&amp; <span class="hljs-built_in">cd</span> public_html &amp;&amp; <span class="hljs-built_in">rm</span> -f README.md<br></code></pre></td></tr></table></figure><p>使用vim编辑或者直接去 Panel 中的 File Manager 选项卡在线编辑 <code>app.js</code> 文件，修改端口为刚刚放行的端口。</p><p>安装依赖：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>安装完毕后，使用pm2启动并守护vless进程：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> app.js <span class="hljs-comment">--name vless</span><br></code></pre></td></tr></table></figure><p>接着去你的代理客户端软件中手动添加 vless 配置即可：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>地址</td><td>Panel中WWW Websites 选项卡里的你的 Domain name</td></tr><tr><td>端口</td><td>你放行的端口</td></tr><tr><td>用户 id</td><td>37a0bd7c-8b9f-4693-8916-bd1e2da0a817</td></tr><tr><td>传输协议</td><td>ws</td></tr><tr><td>伪装域名</td><td>同地址</td></tr><tr><td>ws path</td><td>&#x2F;</td></tr></tbody></table><p>上表没有给出的可以不填。</p><h3 id="②"><a href="#②" class="headerlink" title="②"></a>②</h3><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Vless 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下，再使用 <code>npm</code> 命令安装 <code>@3Kmfi6HP/nodejs-proxy</code> ：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install @<span class="hljs-number">3</span>Kmfi6HP/nodejs-proxy<br></code></pre></td></tr></table></figure><blockquote><p>被删库了可以自己换个源安装，比如：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm --registry http://r.cnpmjs<span class="hljs-meta">.org</span> install <span class="hljs-subst">@3</span>Kmfi6HP/nodejs-proxy<br></code></pre></td></tr></table></figure><p>这个源如果也不行了请自己找其他源替换。</p></blockquote><p>再使用 pm2 启动：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 记得把 PORT 替换成自己放行的端口。</span><br>pm2 <span class="hljs-built_in">start</span> npx <span class="hljs-comment">--name vless -- nodejs-proxy -p PORT</span><br></code></pre></td></tr></table></figure><p>接着访问这个刚刚添加的站点，即可在网页上直接获取配置。<br><strong>哦对，有个小 <code>bug</code> ，端口需要改成 443 ，而网页中默认给的配置是 80 。</strong></p><blockquote><p>之所以说这个 <code>npm</code> 包不安全，是因为其配置在网页上都可以看到，而且网页设计不太合理，有一个不带 <code>uuid</code> 的中转页面，所以可以使用 <strong>fofa</strong> 、 <strong>shodan</strong> 等网络空间扫描工具批量扫出来，而且不止 Serv00 一个平台有人使用，如果你感兴趣，你可以去搜搜看，可以收获一大批 Vless 节点。</p><p>这里放一个 Serv00 上的，我在 fofa 上搜到的页面作为部署示例：<a href="https://pclwgdwv.serv00.net/">https://pclwgdwv.serv00.net/</a></p></blockquote><h2 id="Alist"><a href="#Alist" class="headerlink" title="Alist"></a>Alist</h2><p>Alist 官方仓库没有构筑 FreeBSD 系统下能够运行的 Alist 可执行文件，但是我在 Github 上发现了一个使用 Github Workflow 自动构筑 FreeBSD 适用的 Alist 的<a href="https://github.com/uubulb/alist-freebsd">仓库</a>，使用这个仓库就可以很便利的在Serv00上部署 Alist。</p><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Alist 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 使用一键命令安装 Alist<br>wget -O alist-freebsd.<span class="hljs-keyword">sh</span> https://raw.githubusercontent.<span class="hljs-keyword">com</span>/k0baya/alist_repl/main/serv00/alist-freebsd.<span class="hljs-keyword">sh</span> &amp;&amp; <span class="hljs-keyword">sh</span> alist-freebsd.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>在 Panel 中进入 MySQL 选项卡，使用 Add database 功能新建一个数据库。</p><blockquote><p>密码要求含有大写字母、小写字母和数字三种字符，且长度必须超过6个字符。</p></blockquote><p>接下来进入 File manager 选项卡，进入 <code>~/domains/xxx.USERNAME.serv00.net/public_html/data</code> 路径，可以看到一个名为 <code>config.json</code> 的文件，右键点击，选择 View&#x2F;Edit &gt; Source Editor ，进行编辑：</p><p>我主要修改了 CDN、database、scheme 三个部分，其中CDN可以在 <a href="https://link.zhihu.com/?target=https://alist.nn.ci/zh/config/configuration.html%23cdn">Alist 的官方文档</a>找到，请选择你本地网络连接速度最快的一个。</p><p>scheme 部分，我选择修改 adress 为 <code>127.0.0.1</code>本地回环，是为了避免被他人使用 <code>http://ip:port</code>的方式进行访问。至于自己怎么访问，我在本文后面的部分会进行介绍。port 要改成自己前面放行的端口。</p><p>database 部分，type 需要改成 <code>mysql</code> ，host 填写你在注册邮件中看到的 mysql 的地址， port 是默认的 3306，用户名、密码、数据库名则按照你创建的情况进行填写。</p><blockquote><p>最新版本的 Alist 如果不想开启 S3 Server，请把对应的配置文件中的端口配置为 0 。</p></blockquote><p>改完之后，点击 save 保存，接着回到 SSH 窗口中进行操作：</p><p>测试启动 Alist：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">./alist <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><blockquote><p>确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p></blockquote><p>使用 pm2 启动并管理 alist：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./alist <span class="hljs-comment">-- server</span><br></code></pre></td></tr></table></figure><blockquote><p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p></blockquote><h2 id="Synctv"><a href="#Synctv" class="headerlink" title="Synctv"></a><a href="https://synctv.wiki/">Synctv</a></h2><p>群友仿照 alist-freebsd 的仓库的 workflow 进行构筑的。部署简单，与 alist 类似。首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Synctv 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 下载可执行文件</span><br>release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/shangskr/synctv<span class="hljs-literal">-freebsd</span>/releases/latest)<br>asset_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$release_info</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&#x27;.assets[] | select(.name != &quot;source code&quot;) | .browser_download_url&#x27;</span>)<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-literal">-o</span> synctv <span class="hljs-string">&quot;<span class="hljs-variable">$asset_url</span>&quot;</span> &amp;&amp; chmod +x synctv<br></code></pre></td></tr></table></figure><p>新建启动脚本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; start.sh &lt;&lt; EOF<br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment"># 如果不希望被使用 http://ip:port 的方式访问，取消注释下一行</span><br><span class="hljs-comment"># export SYNCTV_SERVER_LISTEN=127.0.0.1</span><br><span class="hljs-comment"># 把下一行的最末的PORT改成自己放行的端口</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">SYNCTV_SERVER_PORT</span>=PORT<br>exec ./synctv<span class="hljs-built_in"> server </span>--data-dir ./<br>EOF<br></code></pre></td></tr></table></figure><p>添加可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x start.sh<br></code></pre></td></tr></table></figure><p>测试运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./start.sh<br></code></pre></td></tr></table></figure><blockquote><p>确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p></blockquote><p>使用pm2启动并管理：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./<span class="hljs-built_in">start</span>.sh <span class="hljs-comment">--name synctv</span><br></code></pre></td></tr></table></figure><blockquote><p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p></blockquote><h2 id="One-api"><a href="#One-api" class="headerlink" title="One-api"></a>One-api</h2><p><del>源仓库没有提供freebsd平台的二进制文件，需要自己构建，但是很简单</del> 。我已经写了一个仓库用于自动化构建 freebsd 版本的 one-api 二进制文件，可以直接下载使用。</p><blockquote><p>如果你想使用 New-API ，可以使用这个仓库<a href="https://github.com/k0baya/new-api-freebsd">k0baya&#x2F;new-api-freebsd</a>，用法与本节介绍的 One-API 基本一致，对比One-API添加了一些更方便的功能。也许之后 One-API 也会加入这些功能。</p></blockquote><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 One-API 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 one-api</span><br>release_info=$(curl -s https://api.github.com/repos/k0baya/one-api-freebsd/releases/latest)<br>asset_url=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$release_info</span>&quot;</span> | jq -r <span class="hljs-string">&#x27;.assets[] | select(.name != &quot;source code&quot;) | .browser_download_url&#x27;</span>)<br>curl -L -o one-api <span class="hljs-string">&quot;<span class="hljs-variable">$asset_url</span>&quot;</span> &amp;&amp; <span class="hljs-built_in">chmod</span> +x one-api<br></code></pre></td></tr></table></figure><p>新建启动脚本：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">cat &gt; <span class="hljs-built_in">start</span>.sh &lt;&lt; <span class="hljs-literal">EOF</span><br><span class="hljs-comment">#!/bin/sh</span><br><span class="hljs-comment"># 如果你有设置主题的需要，可以取消注释下一行，然后按照自己的需求设置。</span><br><span class="hljs-comment"># export THEME=&quot;berry&quot;</span><br>export TIKTOKEN_CACHE_DIR=<span class="hljs-string">&quot;$PWD&quot;</span><br><span class="hljs-comment"># 把下一行的 PORT 改为自己放行的端口</span><br>exec ./<span class="hljs-literal">one</span>-api <span class="hljs-comment">--port PORT --log-dir ./logs</span><br><span class="hljs-literal">EOF</span><br></code></pre></td></tr></table></figure><p>添加可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x start.sh<br></code></pre></td></tr></table></figure><p>保存后回到 terminal 中，测试运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./start.sh<br></code></pre></td></tr></table></figure><blockquote><p>确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p></blockquote><p>使用pm2启动并管理：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./<span class="hljs-built_in">start</span>.sh <span class="hljs-comment">--name one-api</span><br></code></pre></td></tr></table></figure><blockquote><p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p></blockquote><h2 id="Uptime-Kuma"><a href="#Uptime-Kuma" class="headerlink" title="Uptime-Kuma"></a>Uptime-Kuma</h2><p>受限于 FreeBSD 的平台限制，1.23版本内置了 PlayWright ，无法运行，所以只能安装 1.22 版本。切记先去 Panel 中放行 TCP 端口。</p><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Uptime-Kuma 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着 SSH 登入，并进入刚刚你新建的域名目录下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 下载 v1.22.1 版本的源代码</span><br><span class="hljs-attribute">cd</span> ~/domains &amp;&amp; wget https://github.com/louislam/uptime-kuma/archive/refs/tags/<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.zip &amp;&amp; unzip <span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.zip &amp;&amp; rm -rf public_html &amp;&amp; mv -f uptime-kuma-<span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span> public_html &amp;&amp; rm -f <span class="hljs-number">1</span>.<span class="hljs-number">22</span>.<span class="hljs-number">1</span>.zip &amp;&amp; cd public_html<br></code></pre></td></tr></table></figure><p>设置生产模式：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm ci <span class="hljs-comment">--production</span><br></code></pre></td></tr></table></figure><p>下载dist文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/louislam/u</span>ptime-kuma<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.22.1/</span>dist.tar.gz &amp;&amp; tar -xzvf dist.tar.gz &amp;&amp; rm dist.tar.gz<br></code></pre></td></tr></table></figure><p>安装补充依赖：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>安装过程中多少会有报错，无视就好，实际上最后可以正常运行。内置的Cloudflared反向代理在FreeBSD平台上无法使用，但是可以使用上述的外置的Cloudflared进行反代，使用自己的域名。</p><p>测试运行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">server</span>/server.js --<span class="hljs-attr">port=</span>PORT<br></code></pre></td></tr></table></figure><blockquote><p>记得把PORT替换成你放行的端口。确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p></blockquote><p>使用pm2管理后台运行：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pm2 <span class="hljs-keyword">start</span> <span class="hljs-keyword">server</span>/<span class="hljs-keyword">server</span>.js <span class="hljs-comment">--name uptime-kuma -- --port=PORT</span><br></code></pre></td></tr></table></figure><blockquote><p>记得把PORT替换成你放行的端口。</p></blockquote><blockquote><p>如果你不希望自己的Uptime-Kuma被人使用 <code>http://IP:PORT</code>的方式访问，你可以在最后的执行命令添加 <code>--host=127.0.0.1</code>的尾缀，这样就只能通过反向代理的域名进行访问了:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start server/server</span><span class="hljs-string">.</span><span class="hljs-comment">js</span> <span class="hljs-literal">--</span><span class="hljs-comment">name uptime</span><span class="hljs-literal">-</span><span class="hljs-comment">kuma</span> <span class="hljs-literal">--</span> <span class="hljs-literal">--</span><span class="hljs-comment">port=PORT</span> <span class="hljs-literal">--</span><span class="hljs-comment">host=127</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">0</span><span class="hljs-string">.</span><span class="hljs-comment">1</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p></blockquote><h2 id="Bingo（暂时无法正常使用）"><a href="#Bingo（暂时无法正常使用）" class="headerlink" title="Bingo（暂时无法正常使用）"></a>Bingo（暂时无法正常使用）</h2><p>先放行一个端口。在 Panel 中进入 File manager 选项卡，点击左侧的 My Files 进入你的用户根目录，找到 <code>.profile</code>文件，右键选择 View&#x2F;Edit &gt; Choose other &gt;Source Editor 进行编辑，在最末加上以上两行并保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> node=<span class="hljs-string">&#x27;node20&#x27;</span><br><span class="hljs-built_in">alias</span> npm=<span class="hljs-string">&#x27;npm20&#x27;</span><br></code></pre></td></tr></table></figure><p>应用更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.profile<br></code></pre></td></tr></table></figure><blockquote><p>先新建一个目录用于存放 Bingo 的相关文件，进入目录后执行下述操作。</p></blockquote><p>下载源码：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/weaigc/bingo<br></code></pre></td></tr></table></figure><p>进入源码所在目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> bingo<br></code></pre></td></tr></table></figure><p>安装依赖：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm20 <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>下载build好的 <code>.next</code>资源：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -O <span class="hljs-keyword">next</span>.tar.gz https:<span class="hljs-regexp">//</span>pan.saika.free.hr<span class="hljs-regexp">/d/</span>local/<span class="hljs-keyword">next</span>.tar.gz &amp;&amp; tar -xzvf <span class="hljs-keyword">next</span>.tar.gz &amp;&amp; rm <span class="hljs-keyword">next</span>.tar.gz<br></code></pre></td></tr></table></figure><p>添加环境变量文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> .env.example .<span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><p>接着在 Panel 中进入 File manager 选项卡，进入Bingo 源码所在的目录，找到 <code>server.js</code>文件，右键选择 View&#x2F;Edit &gt; Choose other &gt;Source Editor 进行编辑，修改第7行中的端口为你放行的端口。再编辑 <code>.env</code>文件，添加你的 <code>BING_HEADER</code>。</p><p>测试启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm20 <span class="hljs-built_in">run</span> start<br></code></pre></td></tr></table></figure><blockquote><p>确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p></blockquote><p>使用pm2启动并管理：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start npm</span> <span class="hljs-literal">--</span><span class="hljs-comment">name bingo</span> <span class="hljs-literal">--</span> <span class="hljs-comment">run start</span><br></code></pre></td></tr></table></figure><h2 id="Refresh-gpt-chat"><a href="#Refresh-gpt-chat" class="headerlink" title="Refresh-gpt-chat"></a>Refresh-gpt-chat</h2><p>用来对接 ninja、warpgpt 等能够使用 access_Token 作为 API Key 请求 GPT 的工具，以使用永久有效期的 Refresh_token 来获取更好的体验。</p><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Refresh-gpt-chat 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 下载 refresh-gpt-chat</span><br><span class="hljs-attribute">wget</span> -O refresh-gpt-chat.jar https://github.com/Yanyutin753/refresh-gpt-chat/releases/download/v0.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>/refresh-gpt-chat-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><p>使用 pm2 启动：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">pm2 start java19 <span class="hljs-params">--name</span> refresh-gpt-chat -- -jar refresh-gpt-chat.jar <span class="hljs-params">--server</span>.port=端口 <span class="hljs-params">--server</span>.servlet.context-path=/ <span class="hljs-params">--getAccessTokenUrl=https</span>:<span class="hljs-string">//</span>你的ninja地址<span class="hljs-string">/auth/refresh_token</span> <span class="hljs-params">--chatUrl=https</span>:<span class="hljs-string">//</span>你的ninja地址<span class="hljs-string">/v1/chat/completions</span><br></code></pre></td></tr></table></figure><p>再套域名，接下来就可以直接使用 <code>https://你套的域名/v1/chat/completions/</code> 当作API端点，使用 <code>refresh_token</code> 做 API_Keys ，使用 ChatGPT 了。</p><p>然后在 one-api 中添加自定义渠道， <code>Base URL</code> 填写你 <code>https://你套的域名</code>，模型填入你的 refresh_token 对应的账号所支持的模型，如果和我一样手持大把 3.5 的账号想用来做 API 用，可以选择全部 GPT3.5 的相关模型，然后在 <code>模型重定向</code>中填入以下内容：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">&#123;<br>  &quot;gpt<span class="hljs-string">-3</span>.5-turbo<span class="hljs-string">-0301</span>&quot;: &quot;gpt<span class="hljs-string">-3</span>.5-turbo&quot;,<br>  &quot;gpt<span class="hljs-string">-3</span>.5-turbo<span class="hljs-string">-0613</span>&quot;: &quot;gpt<span class="hljs-string">-3</span>.5-turbo&quot;,<br>  &quot;gpt<span class="hljs-string">-3</span>.5-turbo<span class="hljs-string">-16</span>k&quot;: &quot;gpt<span class="hljs-string">-3</span>.5-turbo&quot;,<br>  &quot;gpt<span class="hljs-string">-3</span>.5-turbo<span class="hljs-string">-16</span>k<span class="hljs-string">-0613</span>&quot;: &quot;gpt<span class="hljs-string">-3</span>.5-turbo&quot;,<br>  &quot;gpt<span class="hljs-string">-3</span>.5-turbo<span class="hljs-string">-1106</span>&quot;: &quot;gpt<span class="hljs-string">-3</span>.5-turbo&quot;,<br>  &quot;gpt<span class="hljs-string">-3</span>.5-turbo-instruct&quot;: &quot;gpt<span class="hljs-string">-3</span>.5-turbo&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>密钥填写你的 <code>refresh_token</code>即可，如果你有多个账号，可以将批量勾选上，然后一行写一个 <code>refresh_token</code>。</p><blockquote><p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p></blockquote><h2 id="Gpt4-copilot-java"><a href="#Gpt4-copilot-java" class="headerlink" title="Gpt4-copilot-java"></a><a href="https://github.com/Yanyutin753/gpt4-copilot-java-sh">Gpt4-copilot-java</a></h2><p>支持 cocopilot 的 ccu 和 copilot 的 ghu 调用 copilot 转 GPT-4 的接口转换工具。 Java 写的，可以在 Serv00 运行。</p><blockquote><p>目前更推荐这个方法：<a href="https://blog.rappit.site/2024/02/07/copilot-to-api-free-temp/#lvguanjun-copilot-to-chatgpt4">lvguanjun&#x2F;copilot-to-chatgpt4</a><br>比起 Gpt4-copilot-java 更轻量更强大。</p></blockquote><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Gpt4-copilot-java 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 下载 fat jar 包</span><br>RELEASE_INFO=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-string">&quot;https://api.github.com/repos/Yanyutin753/gpt4-copilot-java-sh/releases/latest&quot;</span>)<br>JAR_DOWNLOAD_URL=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$RELEASE_INFO</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&#x27;.assets[] | select(.name|test(&quot;.jar$&quot;)) | .browser_download_url&#x27;</span>)<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-literal">-o</span> gpt4<span class="hljs-literal">-copilot-java</span>.jar <span class="hljs-string">&quot;<span class="hljs-variable">$JAR_DOWNLOAD_URL</span>&quot;</span><br></code></pre></td></tr></table></figure><p>测试运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 把PORT改为自己放行的端口，最后的server.servlet.context-path参数可以改成自己喜欢的尾缀</span><br>java19 -jar gpt4-copilot-java.jar --server.<span class="hljs-attribute">port</span>=PORT --server.servlet.<span class="hljs-attribute">context-path</span>=/<br></code></pre></td></tr></table></figure><blockquote><p>测试没有问题之后，按 <code>Ctrl+c</code>即可停止运行。</p></blockquote><p>使用 pm2 启动并管理：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pm2 start java19 <span class="hljs-attr">--name</span> gpt4-copilot-java -- -jar gpt4-copilot-java<span class="hljs-selector-class">.jar</span> <span class="hljs-attr">--server</span>.port=PORT <span class="hljs-attr">--server</span><span class="hljs-selector-class">.servlet</span>.context-path=/<br></code></pre></td></tr></table></figure><blockquote><p>始皇的公车：ghu_ThisIsARealFreeCopilotKeyByCoCopilot （已失效）</p><p>免费公车白嫖请求示例：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">curl <span class="hljs-params">--location</span> &#x27;http<span class="hljs-params">(s)</span>:<span class="hljs-string">//ip</span><span class="hljs-function">:port_or_URL</span>/cocopilot/v1/chat/completions&#x27; <br><span class="hljs-params">--header</span> &#x27;Content-Type: application/json&#x27; <br><span class="hljs-params">--header</span> &#x27;Authorization: Bearer ghu_ThisIsARealFreeCopilotKeyByCoCopilot&#x27; <br><span class="hljs-params">--data</span> &#x27;&#123;<br><span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;gpt-4&quot;</span>,<br><span class="hljs-string">&quot;messages&quot;</span>: [&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;鲁迅打周树人&quot;</span>&#125;]<br>&#125;&#x27;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p></blockquote><h2 id="Zfile"><a href="#Zfile" class="headerlink" title="Zfile"></a><a href="https://zfile.vip/">Zfile</a></h2><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Zfile 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载 fat jar 包</span><br>wget --no-check-certificate -O zfile.jar https:<span class="hljs-regexp">//</span>c.jun6.net<span class="hljs-regexp">/ZFILE/</span>zfile-release.jar<br></code></pre></td></tr></table></figure><p>测试运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">java19 -jar -Duser.<span class="hljs-attribute">timezone</span>=Asia/Shanghai zfile.jar --zfile.log.<span class="hljs-attribute">path</span>=<span class="hljs-variable">$PWD</span>/logs --zfile.db.<span class="hljs-attribute">path</span>=<span class="hljs-variable">$PWD</span>/zfile --server.<span class="hljs-attribute">port</span>=PORT<br></code></pre></td></tr></table></figure><blockquote><p>记得把端口改成自己的。测试没有问题之后，按 <code>Ctrl+c</code>即可停止运行。</p></blockquote><p>使用pm2启动并管理：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pm2 start java19 --name zfile -- -jar -Duser.<span class="hljs-attribute">timezone</span>=Asia/Shanghai zfile.jar --zfile.log.<span class="hljs-attribute">path</span>=<span class="hljs-variable">$PWD</span>/logs --zfile.db.<span class="hljs-attribute">path</span>=<span class="hljs-variable">$PWD</span>/zfile --server.<span class="hljs-attribute">port</span>=PORT<br></code></pre></td></tr></table></figure><blockquote><p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p></blockquote><h2 id="Halo"><a href="#Halo" class="headerlink" title="Halo"></a>Halo</h2><blockquote><p><strong>慎重部署，内存会超100%，不知道会不会封号</strong></p></blockquote><p><a href="https://github.com/halo-dev/halo">halo</a> 自从升级 2.0 版本开始，很长时间内都没有提供构筑好的 jar 包，甚至于在GitHub上都出现了第三方的，使用 GitHub workflow 自动化构筑 jar 包的<a href="https://github.com/Lu7fer/Jar4Halo">仓库</a>。但是，自从<a href="https://github.com/halo-dev/halo/releases/tag/v2.12.0-alpha.1">2.12.0-alpha.1版本</a>开始，halo 的官方仓库又开始提供构筑好的 jar 包了，刚好这些天在玩 Serv00 ，遂尝试部署了一下，成功。现记录一下：</p><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Halo 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>并在 MySQL 选项卡中中新建 MySQL 数据库，用于填入接入 Halo 。</p><p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 下载jar包</span><br>release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/halo<span class="hljs-literal">-dev</span>/halo/releases/latest)<br>jar_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$release_info</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&#x27;.assets[] | select(.name | endswith(&quot;.jar&quot;)) | .browser_download_url&#x27;</span>)<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-string">&quot;<span class="hljs-variable">$jar_url</span>&quot;</span> <span class="hljs-literal">-o</span> halo.jar<br></code></pre></td></tr></table></figure><p>在 <code>halo.jar</code> 所在路径下新建 <code>.halo2</code> 文件夹，进入其中，新建文件 <code>application.yaml</code> 然后并配置其内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 新建文件夹</span><br><span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">.halo2</span><br><span class="hljs-comment"># 新建并填入配置</span><br><span class="hljs-string">cat</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">.halo2/application.yaml</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-string">你在面板中放行的端口</span><br>  <span class="hljs-comment"># Response data gzip.</span><br>  <span class="hljs-attr">compression:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment">#sql:</span><br>  <span class="hljs-comment">#  init.platform: mysql</span><br>  <span class="hljs-attr">r2dbc:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">r2dbc:pool:mysql://数据库地址:3306/数据库名</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">数据库用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">数据库密码</span><br><span class="hljs-attr">halo:</span><br>  <span class="hljs-comment"># Your admin client path is https://your-domain/&#123;admin-path&#125;</span><br>  <span class="hljs-attr">admin-path:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-comment"># memory or level</span><br>  <span class="hljs-attr">cache:</span> <span class="hljs-string">level</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>在 <code>halo.jar</code> 所在路径下新建 <code>run.sh</code> 运行脚本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; run.sh &lt;&lt; EOF<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HALO_WORK_DIR</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PWD</span>/.halo2&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HALO_EXTERNAL_URL</span>=<span class="hljs-string">&quot;https://你的域名&quot;</span><br>exec java17 -server -Xms128m -Xmx256m -jar -Duser.<span class="hljs-attribute">timezone</span>=Asia/Shanghai <span class="hljs-variable">$PWD</span>/halo.jar --spring.config.<span class="hljs-attribute">additional-location</span>=<span class="hljs-variable">$PWD</span>/.halo2/application.yaml<br>EOF<br></code></pre></td></tr></table></figure><p>测试运行：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">chmod +x <span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> &amp;&amp; ./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><blockquote><p>确定运行没有问题后，按 <code>Ctrl+c</code>即可停止运行。</p></blockquote><p>使用pm2管理运行：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">chmod +x <span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> &amp;&amp; pm2 start ./<span class="hljs-keyword">run</span>.<span class="hljs-keyword">sh</span> --name halo<br></code></pre></td></tr></table></figure><blockquote><p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p></blockquote><h2 id="Go-proxy-bingai"><a href="#Go-proxy-bingai" class="headerlink" title="Go-proxy-bingai"></a>Go-proxy-bingai</h2><p><a href="https://github.com/adams549659584/go-proxy-bingai">这个仓库</a>是 Bingo 的前身，当初玩 Replit 时我便有在使用，只可惜作者早已弃坑，所以当初我才找到了当时还能用的 Bingo 使用。</p><p>在 Bingo 也长期未更新，无法正常使用的如今，我的目光转向了另一个<a href="https://github.com/Harry-zklcdc/go-proxy-bingai">二改仓库</a>。Harry-zklcdc 维护的 Go-proxy-bingai 的分支仓库目前还能够正常使用。而且在与开发者反馈了几个 bug 之后，开发者都会花时间认真复现，并快速修复，其体验实在是不错。</p><p><del>虽然原仓库的 Release 中并未提供 FreeBSD 系统适用的二进制文件，但是我们能够自己构建。我已经构建了一份放在这篇博客底部的QQ群的群文件中</del> 。<del>我写了一个仓库用于自动化构建 FreeBSD 版本的 go-proxy-bingai ，可以从我的仓库下载使用。</del> 作者已经开始提供 FreeBSD 的构建，故我的仓库已经存档。</p><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的 USERNAME.serv00.net 删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Go-proxy-bingai 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着 SSH 登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载可执行文件</span><br>release_info=$(curl -s https://api.github.com/repos/Harry-zklcdc/go-proxy-bingai/releases | jq -r <span class="hljs-string">&#x27;[.[] | select(.prerelease==false)][0]&#x27;</span>)<br>download_url=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$release_info</span>&quot;</span> | jq -r <span class="hljs-string">&#x27;.assets[] | select(.name==&quot;go-proxy-bingai-freebsd-amd64.tar.gz&quot;) | .browser_download_url&#x27;</span>)<br>curl -L <span class="hljs-string">&quot;<span class="hljs-variable">$download_url</span>&quot;</span> -o go-proxy-bingai-freebsd-amd64.tar.gz&amp;&amp; tar -xzf go-proxy-bingai-freebsd-amd64.tar.gz &amp;&amp; <span class="hljs-built_in">rm</span> go-proxy-bingai-freebsd-amd64.tar.gz &amp;&amp; <span class="hljs-built_in">chmod</span> +x go-proxy-bingai<br></code></pre></td></tr></table></figure><p>新建启动脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat &gt; entrypoint.sh &lt;&lt; EOF<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">被注释的环境变量请根据自己的需求，按照原仓库的 wiki 中的介绍进行填入。</span><br>export BYPASS_SERVER=&quot;https://bypass.zklcdc.xyz&quot;  # 作者本人的公共bypass服务，可用性未知。<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> Go_Proxy_BingAI_USER_TOKEN_1=<span class="hljs-string">&quot;xxx&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> Go_Proxy_BingAI_USER_TOKEN_2=<span class="hljs-string">&quot;xxx&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> USER_KievRPSSecAuth=<span class="hljs-string">&quot;xxx&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> USER_RwBf=<span class="hljs-string">&quot;xxx&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> USER_MUID=<span class="hljs-string">&quot;xxx&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> APIKEY=<span class="hljs-string">&quot;sk-xxx&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> BING_BASE_URL=<span class="hljs-string">&quot;https://www.bing.com&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> SYDNEY_BASE_URL=<span class="hljs-string">&quot;https://sydney.bing.com&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> HTTP_PROXY=<span class="hljs-string">&quot;http://172.17.0.1:18080&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> HTTPS_PROXY=<span class="hljs-string">&quot;http://172.17.0.1:18080&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> Go_Proxy_BingAI_AUTH_KEY=<span class="hljs-string">&quot;xxx&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">请把下一行双引号中的内容替换成你放行的端口。</span><br>export PORT=&quot;xxx&quot;<br>chmod +x go-proxy-bingai &amp;&amp; exec ./go-proxy-bingai<br>EOF<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 测试运行</span><br><span class="hljs-built_in">chmod</span> +x entrypoint.sh &amp;&amp; ./entrypoint.sh<br><span class="hljs-comment"># 使用 pm2 管理运行</span><br>pm2 start ./entrypoint.sh --name go-proxy-bingai<br></code></pre></td></tr></table></figure><blockquote><p><strong>请注意，如果你需要使用其 web 功能，而不仅仅是 api 功能，请务必使用 https 访问，不然无法打开。你可以选择使用面板自带的 proxy 添加域名并申请 ssl 证书，亦或者直接使用 cloudflared 隧道。</strong></p></blockquote><blockquote><p>同样的，你还可以使用 Cloudflared 隧道添加域名，而不选择使用 Proxy 。</p></blockquote><h2 id="Pentaract"><a href="#Pentaract" class="headerlink" title="Pentaract"></a><a href="https://github.com/Dominux/Pentaract">Pentaract</a></h2><blockquote><p>不建议使用，目前 Bug 众多，而且对 Telegram 账号有一定要求，目前暂不清楚 Telegram 限制账号的评定标准。</p></blockquote><p>可以自行构建或者使用使用我构建的成品。由于该应用需要使用具有超级管理员权限的 PostgreSQL ，故不可使用 Serv00 自带的 PostgreSQL ，需要远程连接。</p><p>编译成品下载地址：<a href="https://pan.rappit.site/download/%E6%8D%AF%E9%A5%AC/pentaract-freebsd_X64.tar.gz">pentaract-freebsd_X64.tar.gz</a></p><p>前端构建简单，这里不再赘述，而且由于其 <code>Dockerfile</code> 内构建前端使用的是 Node.js 21 而目前 FreeBSD Port 最高只有 Node.js 20 ，故不推荐在 FreeBSD 上直接构建，可以使用 GItHub Actions 进行构建，或是自己在 Node.js 21 的环境下构建再复制，甚至干脆直接从作者预构建的 Docker 镜像内打包出来使用。（经过测试，使用 Nodejs20 构建也可以正常使用。）</p><p>Serv00 上的构建法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换 Node.js 版本为 Nodejs20</span><br><span class="hljs-built_in">alias</span> node=node20<br><span class="hljs-built_in">alias</span> npm=npm20<br><span class="hljs-comment"># 全局安装 pnpm</span><br>npm install -g pnpm<br><span class="hljs-built_in">source</span> ~/.bashrc<br><span class="hljs-comment"># 构建前端</span><br>pnpm install<br>VITE_API_BASE=<span class="hljs-string">&#x27;/api&#x27;</span> pnpm run build<br><span class="hljs-comment"># 移动构建产物到工作目录</span><br><span class="hljs-built_in">mkdir</span> -p ~/pentaract/ui &amp;&amp; <span class="hljs-built_in">cp</span> -R ./dist/* ~/pentaract/ui<br></code></pre></td></tr></table></figure><p>后端的构建，可以使用 GItHub Actions ，或者本地 FreeBSD 虚拟机，甚至直接在 Serv00 上构建。这里记录一下在 Serv00 上构建的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 克隆仓库到 Serv00 上</span><br>git <span class="hljs-built_in">clone</span> https://github.com/Dominux/Pentaract &amp;&amp; <span class="hljs-built_in">cd</span> Pentaract/pentaract<br><span class="hljs-comment"># 构建</span><br>LIBCLANG_PATH=/usr/local/llvm16/lib cpuset -l 0 cargo build --release<br><span class="hljs-comment"># 移动构建产物到工作目录</span><br><span class="hljs-built_in">mkdir</span> -p ~/pentaract &amp;&amp; <span class="hljs-built_in">cp</span> ./target/release/pentaract ~/pentaract/pentaract<br></code></pre></td></tr></table></figure><p>然后去 <a href="https://supabase.com/">supabase</a> 注册一个免费的PostgreSQL ，记录下数据库的用户名、密码、数据库名、地址，用于后续填入环境变量。</p><p>接着在 <code>~/pentaract</code> 路径下新建一个启动脚本，按照要求填入所有的环境变量：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; start.sh &lt;&lt; EOF<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PORT</span>=xxxx<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">WORKERS</span>=4<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CHANNEL_CAPACITY</span>=32<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">SUPERUSER_EMAIL</span>=xxxx@xxxx.com<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">SUPERUSER_PASS</span>=xxxx<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">ACCESS_TOKEN_EXPIRE_IN_SECS</span>=1800<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">REFRESH_TOKEN_EXPIRE_IN_DAYS</span>=14<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">SECRET_KEY</span>=xxx<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">TELEGRAM_API_BASE_URL</span>=https://api.telegram.org<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">DATABASE_USER</span>=xxxx<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">DATABASE_PASSWORD</span>=xxxx<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">DATABASE_NAME</span>=xxxx<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">DATABASE_HOST</span>=xxxx<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">DATABASE_PORT</span>=5432<br>chmod +x pentaract &amp;&amp; exec ./pentaract<br>EOF<br></code></pre></td></tr></table></figure><p>给启动脚本赋权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x start.sh<br></code></pre></td></tr></table></figure><p><del>前端的 <code>index-22eec6d1.js</code> 文件内的 <code>http://localhost:8000</code> 需要更改为 serv00 的 url 或者 ip:port 。你可以去文件管理中编辑，查找替换即可，也可以使用sed命令简单更改一下：</del> 已经重新构建前端并替换，现无需此步。</p><p>测试运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./start.sh<br></code></pre></td></tr></table></figure><p>使用 pm2 管理：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./<span class="hljs-built_in">start</span>.sh <span class="hljs-comment">--name pentaract</span><br></code></pre></td></tr></table></figure><h2 id="OneList"><a href="#OneList" class="headerlink" title="OneList"></a><a href="https://github.com/msterzhang/onelist">OneList</a></h2><p>原作者似乎已经弃坑，故我的仓库没有做自动检测构建。但是体验还不错，有 Emby 既视感了，配合小雅的 Alist 岂不美哉。</p><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 OneList 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 OneList</span><br>wget https://github.com/k0baya/onelist-freebsd/releases/download/v2.0.5/onelist<br><span class="hljs-comment"># 初始化配置</span><br><span class="hljs-built_in">chmod</span> +x onelist &amp;&amp; ./onelist -run config<br></code></pre></td></tr></table></figure><p>接着回到 Panel 中，进入File manager选项卡，进入 OneList 所在路径，可以看到一个名为 <code>config.env</code> 的文件，右键点击，选择View&#x2F;Edit &gt; Source Editor，进行编辑：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 服务设置</span><br><span class="hljs-comment"># 注意要改为未被占用的端口</span><br><span class="hljs-attr">API_PORT</span>=<span class="hljs-number">5245</span><br><span class="hljs-attr">FaviconicoUrl</span>=https://wework.qpic.cn/wwpic/<span class="hljs-number">818353</span>_fizV30xbQCGPQRP_1677394564/<span class="hljs-number">0</span><br><span class="hljs-attr">API_SECRET</span>=fRVvjcNd11gYGI85StVaeCtPVSmJTRRE<br><br><span class="hljs-comment"># Env有两种模式，Debug及Release，主要用在数据库为mysql时候，需要注意修改Env环境和mysql密码对应</span><br><span class="hljs-attr">Env</span>=Debug<br><br><span class="hljs-comment"># 管理员账户设置，用于初始化管理员账户</span><br><span class="hljs-attr">UserEmail</span>=xxxx.@qq.com<br><span class="hljs-attr">UserPassword</span>=xxxxx<br><br><span class="hljs-comment"># 数据库设置</span><br><span class="hljs-attr">DB_DRIVER</span>=sqlite<br><span class="hljs-attr">DB_USER</span>=root<br><span class="hljs-attr">DbName</span>=<span class="hljs-literal">on</span>elist<br><br><span class="hljs-comment"># 如果上面DB_DRIVER类型为mysql，就需要正确填下以下参数</span><br><span class="hljs-attr">DB_PASSWORD_Debug</span>=<span class="hljs-number">123456</span><br><span class="hljs-attr">DB_PASSWORD_Release</span>=<span class="hljs-number">123456</span><br><br><span class="hljs-comment"># TheMovieDb Key</span><br><span class="hljs-comment"># 在https://www.themoviedb.org网站申请</span><br><span class="hljs-attr">KeyDb</span>=<span class="hljs-number">22</span>f10ca52f109158ac7fe064ebbcf697<br></code></pre></td></tr></table></figure><p>你可以按照自己的需求配置端口、管理员账户、数据库。 MySQL 性能更好哦~</p><p>测试运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./onelist -<span class="hljs-built_in">run</span> server<br></code></pre></td></tr></table></figure><p>使用 pm2 管理：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./onelist <span class="hljs-comment">-- -run server</span><br></code></pre></td></tr></table></figure><h2 id="WarpGPT"><a href="#WarpGPT" class="headerlink" title="WarpGPT"></a><a href="https://github.com/oliverkirk-sudo/WarpGPT">WarpGPT</a></h2><p>这个没什么多说的，可以使用 access_Token 作为 API Key 请求 ChatGPT 接口，也就是所谓的 chat2api 。配合前文的 Refresh-gpt-chat 就可以把永久有效期的 Refresh_token 作为 API Key 来使用，十分的好用。</p><p>源仓库没有 Release ，故<a href="https://github.com/k0baya/warpgpt-freebsd">我的仓库</a>没有做自动检测构建。如果有更新需求需要手动触发 workflow 。你有需要也可以自己fork一份然后手动触发 workflow 。</p><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 WarpGPT 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载二进制文件</span><br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/k0baya/</span>warpgpt-freebsd<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/latest/</span>warpgpt &amp;&amp; chmod +x warpgpt<br></code></pre></td></tr></table></figure><p>添加启动脚本：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs d">cat &gt; start.sh &lt;&lt; EOF<br><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">export</span> TMPDIR=<span class="hljs-string">&quot;$PWD&quot;</span><br>chmod +x warpgpt &amp;&amp; exec ./warpgpt<br>EOF<br></code></pre></td></tr></table></figure><p>给启动脚本赋权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x start.sh<br></code></pre></td></tr></table></figure><p>配置环境变量：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile">cat &gt; .env &lt;&lt; EOF<br>proxy = <span class="hljs-string">&quot;http://127.0.0.1:10809&quot;</span>   <span class="hljs-comment">#代理地址 （选填）</span><br>port = 5000                        <span class="hljs-comment">#程序运行端口</span><br>host = &#x27;127.0.0.1&#x27;                 <span class="hljs-comment">#可访问ip，0.0.0.0允许所有ip</span><br>verify = false                     <span class="hljs-comment">#是否对访问进行验证</span><br>auth_key = <span class="hljs-string">&quot;&quot;</span>                      <span class="hljs-comment">#若开启访问验证，则需要在Header中添加AuthKey字段，且值为auth_key的值才能访问 （选填）</span><br>arkose_must = false                <span class="hljs-comment">#是否强行gpt3.5进行验证</span><br>OpenAI_HOST = <span class="hljs-string">&quot;chat.openai.com&quot;</span>    <span class="hljs-comment">#openai网页api接口地址 （选填）</span><br>openai_api_host = <span class="hljs-string">&quot;api.openai.com&quot;</span> <span class="hljs-comment">#openai官方api接口 （选填）</span><br>proxy_pool_url=<span class="hljs-string">&quot;&quot;</span>                  <span class="hljs-comment">#ipidea代理池链接 （选填）</span><br><span class="hljs-comment">#示例http://api.proxy.ipidea.io/getProxyIp?num=10&amp;return_type=json&amp;lb=1&amp;sb=0&amp;flow=1&amp;regions=us&amp;protocol=http，根据访问频次设置num值</span><br>log_level = <span class="hljs-string">&quot;debug&quot;</span>                <span class="hljs-comment">#日志等级</span><br><br>redis_address = <span class="hljs-string">&quot;127.0.0.1:6379&quot;</span>   <span class="hljs-comment">#redis地址（若不开启代理池可选填）</span><br>redis_passwd = <span class="hljs-string">&quot;&quot;</span>                  <span class="hljs-comment">#redis密码</span><br>redis_db = 0                       <span class="hljs-comment">#选择的redis数据库</span><br>EOF<br></code></pre></td></tr></table></figure><blockquote><p>如果有 redis 需求，可以查阅官方文档：<a href="https://docs.serv00.com/Redis/">Redis</a></p></blockquote><p>使用 pm2 管理运行：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start bash</span> <span class="hljs-literal">--</span><span class="hljs-comment">name warpgpt</span> <span class="hljs-literal">--</span> <span class="hljs-comment">start</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span><br></code></pre></td></tr></table></figure><h2 id="Coze-discord-proxy"><a href="#Coze-discord-proxy" class="headerlink" title="Coze-discord-proxy"></a><a href="https://github.com/deanxv/coze-discord-proxy">Coze-discord-proxy</a></h2><p>代理 Discord 对话 Coze-Bot ，实现以 API 形式请求 GPT4 模型，提供对话、文生图、图生文、知识库检索等功能。功能不多赘述，详细去源仓库查看。</p><p>同样的，我写了一个用于构建 FreeBSD 版本的<a href="https://github.com/k0baya/coze-discord-proxy-freebsd">仓库</a>。在这里感谢论坛用户 <a href="https://linux.do/u/reno/summary">Reno</a> 的测试，没有测试人员的测试，也不会有部署的过程记录了。</p><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Coze-discord-proxy 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载二进制文件</span><br>release_info=$(curl -s https://api.github.com/repos/k0baya/coze-discord-proxy-freebsd/releases/latest)<br>asset_url=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$release_info</span>&quot;</span> | jq -r <span class="hljs-string">&#x27;.assets[] | select(.name != &quot;source code&quot;) | .browser_download_url&#x27;</span>)<br>curl -L -o coze-discord-proxy <span class="hljs-string">&quot;<span class="hljs-variable">$asset_url</span>&quot;</span> &amp;&amp; <span class="hljs-built_in">chmod</span> +x coze-discord-proxy<br></code></pre></td></tr></table></figure><p>添加启动脚本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; start.sh &lt;&lt; EOF<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 根据你的需求自行填入环境变量</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PORT</span>=<span class="hljs-string">&quot;PORT&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">USER_AUTHORIZATION</span>=<span class="hljs-string">&quot;XXXXXX&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">BOT_TOKEN</span>=<span class="hljs-string">&quot;XXXXXX&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GUILD_ID</span>=<span class="hljs-string">&quot;XXXXXX&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">COZE_BOT_ID</span>=<span class="hljs-string">&quot;XXXXXX&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PROXY_SECRET</span>=<span class="hljs-string">&quot;XXXXXX&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CHANNEL_ID</span>=<span class="hljs-string">&quot;XXXXXX&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">TZ</span>=<span class="hljs-string">&quot;Asia/Shanghai&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">DATA_GYM_CACHE_DIR</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PWD</span>&quot;</span><br>chmod +x coze-discord-proxy &amp;&amp; exec ./coze-discord-proxy<br>EOF<br></code></pre></td></tr></table></figure><p>给启动脚本赋权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x coze-discord-proxy<br></code></pre></td></tr></table></figure><p>添加多机器人配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p app/coze-discord-proxy/data/config<br><span class="hljs-built_in">touch</span> app/coze-discord-proxy/data/config/bot_config.json<br></code></pre></td></tr></table></figure><p>然后回到 Panel 中，进入File manager选项卡，进入 <code>bot_config.json</code> 所在路径，右键点击它，选择View&#x2F;Edit &gt; Source Editor，进行编辑：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<br>  &#123;<br>    <span class="hljs-string">&quot;proxySecret&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>, // 接口请求密钥(<span class="hljs-name">PROXY_SECRET</span>)(<span class="hljs-name">注意:此密钥在环境变量PROXY_SECRET中存在时该Bot才可以被匹配到!</span>)<br>    <span class="hljs-string">&quot;cozeBotId&quot;</span>: <span class="hljs-string">&quot;12***************31&quot;</span>, // coze托管的机器人ID<br>    <span class="hljs-string">&quot;model&quot;</span>: [<span class="hljs-string">&quot;gpt-3.5&quot;</span>,<span class="hljs-string">&quot;gpt-3.5-16k&quot;</span>], // 模型名称(<span class="hljs-name">数组格式</span>)(<span class="hljs-name">与请求参数中的model对应</span>,如请求中的model在该json中未匹配到则会抛出异常)<br>    <span class="hljs-string">&quot;channelId&quot;</span>: <span class="hljs-string">&quot;12***************56&quot;</span>  // [<span class="hljs-name">可选</span>]discord频道ID(<span class="hljs-name">机器人必须在此频道所在的服务器</span>)(<span class="hljs-name">目前版本下该参数仅用来活跃机器人</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;proxySecret&quot;</span>: <span class="hljs-string">&quot;456&quot;</span>,<br>    <span class="hljs-string">&quot;cozeBotId&quot;</span>: <span class="hljs-string">&quot;12***************64&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: [<span class="hljs-string">&quot;gpt-4&quot;</span>,<span class="hljs-string">&quot;gpt-4-16k&quot;</span>],<br>    <span class="hljs-string">&quot;channelId&quot;</span>: <span class="hljs-string">&quot;12***************78&quot;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-string">&quot;proxySecret&quot;</span>: <span class="hljs-string">&quot;789&quot;</span>,<br>    <span class="hljs-string">&quot;cozeBotId&quot;</span>: <span class="hljs-string">&quot;12***************12&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: [<span class="hljs-string">&quot;dall-e-3&quot;</span>],<br>    <span class="hljs-string">&quot;channelId&quot;</span>: <span class="hljs-string">&quot;12***************24&quot;</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>使用 pm2 管理运行：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start bash</span> <span class="hljs-literal">--</span><span class="hljs-comment">name coze</span><span class="hljs-literal">-</span><span class="hljs-comment">discord</span><span class="hljs-literal">-</span><span class="hljs-comment">proxy</span> <span class="hljs-literal">--</span> <span class="hljs-comment">start</span><span class="hljs-string">.</span><span class="hljs-comment">sh</span><br></code></pre></td></tr></table></figure><h2 id="Memos"><a href="#Memos" class="headerlink" title="Memos"></a><a href="https://github.com/usememos/memos">Memos</a></h2><p>一款开源、轻量级的笔记服务。轻松捕捉并分享您的精彩想法。</p><p>这个仓库比较难受的是，其在源码的<a href="https://github.com/usememos/memos/blob/edc7645086d285f50e484861705ffee3a626f97a/server/server.go#L85">这个位置</a>强制要求其 gRPC 服务的端口为 Memos 监听端口+1，故这个应用需要占用两个端口，而且必须是两个连续的端口。</p><p>同样的，我写了一个用于构建 FreeBSD 版本的<a href="https://github.com/k0baya/memos-binary">仓库</a>。</p><p>首先在 Panel 中放行 <strong>两个相邻的端口</strong> ，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>刚刚放行的<strong>两个相邻的端口中小的那一个</strong></td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">API_URL=<span class="hljs-string">&quot;https://api.github.com/repos/k0baya/memos-binary/releases/latest&quot;</span><br>DOWNLOAD_URL=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-variable">$API_URL</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&quot;.assets[] | select(.name == \&quot;</span>memos<span class="hljs-literal">-freebsd-amd64</span>.tar.gz\<span class="hljs-string">&quot;) | .browser_download_url&quot;</span>)<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-variable">$DOWNLOAD_URL</span> <span class="hljs-literal">-o</span> memos<span class="hljs-literal">-freebsd-amd64</span>.tar.gz<br>tar <span class="hljs-literal">-xzvf</span> memos<span class="hljs-literal">-freebsd-amd64</span>.tar.gz &amp;&amp; <span class="hljs-built_in">rm</span> memos<span class="hljs-literal">-freebsd-amd64</span>.tar.gz &amp;&amp; chmod +x memos<br></code></pre></td></tr></table></figure><p>关于运行，有两种方式进行：</p><p>① SQLite</p><p>如果选择使用 SQLite 作为数据库运行，则可以直接运行：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 假定你的数据文件打算存储在 /home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span><br><span class="hljs-comment"># 新建数据文件夹</span><br>mkdir -p <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span><br><span class="hljs-comment"># 测试运行</span><br><span class="hljs-string">./memos</span> <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span><br><span class="hljs-comment"># 使用 pm2 管理</span><br>pm2 start <span class="hljs-string">./memos</span> <span class="hljs-params">--name</span> memos -- <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span><br></code></pre></td></tr></table></figure><p>② 外接 MySQL &#x2F; PostgreSQL</p><p>你可以使用面板自带的 MySQL &#x2F; PostgreSQL 新建数据库，或者使用其他平台提供的远程数据库：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 假定你的数据文件打算存储在 /home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span><br><span class="hljs-comment"># 新建数据文件夹</span><br>mkdir -p <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span><br><span class="hljs-comment"># 测试运行（MySQL）（MySQL需要管理员权限，你可以选择远程连接）</span><br><span class="hljs-string">./memos</span> <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span> <span class="hljs-params">--driver</span> mysql <span class="hljs-params">--dsn</span> mysql:<span class="hljs-string">//root</span><span class="hljs-function">:password123</span>@localhost<span class="hljs-function">:3306</span>/mydb<br><span class="hljs-comment"># 测试运行（PostgreSQL）</span><br><span class="hljs-string">./memos</span> <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span> <span class="hljs-params">--driver</span> postgres <span class="hljs-params">--dsn</span> postgresql:<span class="hljs-string">//user</span><span class="hljs-function">:password123</span>@localhost<span class="hljs-function">:5432</span>/mydb?sslmode=disable<br><span class="hljs-comment"># 使用 pm2 管理（MySQL）（MySQL需要管理员权限，你可以选择远程连接）</span><br>pm2 start <span class="hljs-string">./memos</span> <span class="hljs-params">--name</span> memos -- <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span> <span class="hljs-params">--driver</span> mysql <span class="hljs-params">--dsn</span> mysql:<span class="hljs-string">//root</span><span class="hljs-function">:password123</span>@localhost<span class="hljs-function">:3306</span>/mydb<br><span class="hljs-comment"># 使用 pm2 管理（PostgreSQL）</span><br>pm2 start <span class="hljs-string">./memos</span> <span class="hljs-params">--name</span> memos -- <span class="hljs-params">--mode</span> prod <span class="hljs-params">--port</span> PORT <span class="hljs-params">--data</span> <span class="hljs-string">/home/username/domains/xxx.USERNAME.serv00.net/public_html/data</span> <span class="hljs-params">--driver</span> postgres <span class="hljs-params">--dsn</span> postgresql:<span class="hljs-string">//user</span><span class="hljs-function">:password123</span>@localhost<span class="hljs-function">:5432</span>/mydb?sslmode=disable<br></code></pre></td></tr></table></figure><h2 id="Frps"><a href="#Frps" class="headerlink" title="Frps"></a>Frps</h2><p>内网穿透嘛，懂的都懂，这里只做服务端的部署记录，客户端可以查看 <a href="https://gofrp.org/zh-cn/">Frp 的官方文档</a>自行配置。感谢群友的率先测试：<a href="https://blog.theyouyi.site/archives/serv00-frps">youyi</a></p><p>首先在 Panel 中放行两个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来映射转发内网服务的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><blockquote><p>同样的，你可以设置多个域名使用 Proxy 指向同一个端口，在 Frpc 客户端配置中使用域名分发不同的服务。具体可以查阅官方文档。</p></blockquote><p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/fatedier/frp/releases/latest)<br>download_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$release_info</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&#x27;.assets[] | select(.name | contains(&quot;freebsd_amd64.tar.gz&quot;)) | .browser_download_url&#x27;</span>)<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-string">&quot;<span class="hljs-variable">$download_url</span>&quot;</span> <span class="hljs-literal">-o</span> frp_freebsd_amd64.tar.gz <br>tar <span class="hljs-literal">-xzvf</span> frp_freebsd_amd64.tar.gz <span class="hljs-literal">--strip-components</span>=<span class="hljs-number">1</span><br><span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> frp_freebsd_amd64.tar.gz<br></code></pre></td></tr></table></figure><p>接着编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 按照自己的实际情况和需求进行配置，这里只做最简单的http转发配置示例</span><br><span class="hljs-built_in">cat</span> &gt; frps.toml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">bindPort = 监听端口</span><br><span class="hljs-string">vhostHTTPPort = 映射转发端口</span><br><span class="hljs-string">auth.token = &quot;密码&quot;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./frps <span class="hljs-comment">-- -c frps.toml</span><br></code></pre></td></tr></table></figure><blockquote><p>客户端配置示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">serverAddr</span> = <span class="hljs-string">&quot;x.x.x.x&quot;</span><br><span class="hljs-attr">serverPort</span> = Frps 的监听端口<br><span class="hljs-attr">auth.token</span> = <span class="hljs-string">&quot;密码&quot;</span><br><br><span class="hljs-section">[[proxies]]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;web&quot;</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;http&quot;</span><br><span class="hljs-attr">localPort</span> = <span class="hljs-number">80</span><br><span class="hljs-attr">customDomains</span> = [<span class="hljs-string">&quot;www.yourdomain.com&quot;</span>]<br><br><span class="hljs-section">[[proxies]]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;web2&quot;</span><br><span class="hljs-attr">type</span> = <span class="hljs-string">&quot;http&quot;</span><br><span class="hljs-attr">localPort</span> = <span class="hljs-number">8080</span><br><span class="hljs-attr">customDomains</span> = [<span class="hljs-string">&quot;www.yourdomain2.com&quot;</span>]<br></code></pre></td></tr></table></figure></blockquote><h2 id="Rclone"><a href="#Rclone" class="headerlink" title="Rclone"></a><a href="https://rclone.org/">Rclone</a></h2><p>Rclone 是一款管理云存储文件的命令行程序。它功能丰富，可替代云供应商的网络存储界面。超过 70 种云存储产品支持 Rclone，包括 S3 对象存储、企业和消费者文件存储服务以及标准传输协议。</p><p>具体用法与配置请查阅其<a href="https://rclone.org/docs/">官方文档</a>。</p><p>如果你需要使用 Rclone 的 web ui ，你可以按照前文所述的大多数应用一样，先放行端口，添加域名，申请好 SSL 证书，并进入其目录下的 <code>public_html</code> 路径下再进行程序本体的下载部署。</p><p>下载最新版 Rclone：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/rclone/rclone/releases/latest)<br>download_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$release_info</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&#x27;.assets[] | select(.name | contains(&quot;-freebsd-amd64.zip&quot;)) | .browser_download_url&#x27;</span>)<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-string">&quot;<span class="hljs-variable">$download_url</span>&quot;</span> <span class="hljs-literal">-o</span> rclone<span class="hljs-literal">-freebsd-amd64</span>.zip<br>outer_folder=<span class="hljs-variable">$</span>(unzip <span class="hljs-literal">-l</span> rclone<span class="hljs-literal">-freebsd-amd64</span>.zip | grep <span class="hljs-string">&#x27;/&#x27;</span> | sed <span class="hljs-literal">-n</span> <span class="hljs-string">&#x27;1p&#x27;</span> | sed <span class="hljs-string">&#x27;s#^.* \([^/]*\)/.*$#\1#&#x27;</span>)<br>unzip rclone<span class="hljs-literal">-freebsd-amd64</span>.zip<br><span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;<span class="hljs-variable">$outer_folder</span>&quot;</span>/* . &amp;&amp; <span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> <span class="hljs-string">&quot;<span class="hljs-variable">$outer_folder</span>&quot;</span> rclone<span class="hljs-literal">-freebsd-amd64</span>.zip<br></code></pre></td></tr></table></figure><p>经我测试，目前 v1.63.1 之后的版本的 FreeBSD 版的构建都有无法识别 <code>mount</code> 命令的问题，在我查阅其 issue —— <a href="https://github.com/rclone/rclone/issues/7432">#7432</a> 、 <a href="https://github.com/rclone/rclone/issues/5843#issuecomment-1784149722">#5843</a> 后，确定这个 bug 已经好几个月没有修复了。所以我建议在此 bug 修复前，使用 v1.63.1 版本。</p><p>下载 v1.63.1 版本 Rclone ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -L https://github.com/rclone/rclone/releases/download/v1.63.1/rclone-v1.63.1-freebsd-amd64.zip -o rclone-freebsd-amd64.zip<br>outer_folder=$(unzip -l rclone-freebsd-amd64.zip | grep <span class="hljs-string">&#x27;/&#x27;</span> | sed -n <span class="hljs-string">&#x27;1p&#x27;</span> | sed <span class="hljs-string">&#x27;s#^.* \([^/]*\)/.*$#\1#&#x27;</span>)<br>unzip rclone-freebsd-amd64.zip<br><span class="hljs-built_in">mv</span> <span class="hljs-string">&quot;<span class="hljs-variable">$outer_folder</span>&quot;</span>/* . &amp;&amp; <span class="hljs-built_in">rm</span> -rf <span class="hljs-string">&quot;<span class="hljs-variable">$outer_folder</span>&quot;</span> rclone-freebsd-amd64.zip<br></code></pre></td></tr></table></figure><p>配置 Rclone 的存储：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">./rclone config<br></code></pre></td></tr></table></figure><blockquote><p>启动 web ui：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./rclone</span> rcd <span class="hljs-params">--rc-web-gui</span> <span class="hljs-params">--rc-user</span> 用户名 <span class="hljs-params">--rc-pass</span> 密码 <span class="hljs-params">--rc-addr</span> :端口<br></code></pre></td></tr></table></figure><p>pm2 管理 web ui：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">pm2 start</span> <span class="hljs-string">.</span><span class="hljs-comment">/rclone</span> <span class="hljs-literal">--</span> <span class="hljs-comment">rcd</span> <span class="hljs-literal">--</span><span class="hljs-comment">rc</span><span class="hljs-literal">-</span><span class="hljs-comment">web</span><span class="hljs-literal">-</span><span class="hljs-comment">gui</span> <span class="hljs-literal">--</span><span class="hljs-comment">rc</span><span class="hljs-literal">-</span><span class="hljs-comment">user 用户名</span> <span class="hljs-literal">--</span><span class="hljs-comment">rc</span><span class="hljs-literal">-</span><span class="hljs-comment">pass 密码</span> <span class="hljs-literal">--</span><span class="hljs-comment">rc</span><span class="hljs-literal">-</span><span class="hljs-comment">addr :端口</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="Cloudreve"><a href="#Cloudreve" class="headerlink" title="Cloudreve"></a><a href="https://cloudreve.org/">Cloudreve</a></h2><p>Cloudreve 可助你即刻构建出兼备自用或公用的网盘服务，通过多种存储策略的支持、虚拟文件系统等特性实现灵活的文件管理体验。</p><p>同样的，我编写了一个用于自动化构建 FreeBSD 版本的 Cloudreve 的仓库：<a href="https://github.com/k0baya/cloudreve-freebsd">k0baya&#x2F;cloudreve-freebsd</a> 前后端分离构建，前端静态文件在 Cloudreve 本体同路径下的 <code>static</code> 文件夹内。</p><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 Cloudreve 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">release_info=<span class="hljs-variable">$</span>(<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> https://api.github.com/repos/k0baya/cloudreve<span class="hljs-literal">-freebsd</span>/releases/latest)<br>download_url=<span class="hljs-variable">$</span>(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$release_info</span>&quot;</span> | jq <span class="hljs-literal">-r</span> <span class="hljs-string">&#x27;.assets[] | select(.name | contains(&quot;freebsd-amd64.tar.gz&quot;)) | .browser_download_url&#x27;</span>)<br><span class="hljs-built_in">curl</span> <span class="hljs-literal">-L</span> <span class="hljs-string">&quot;<span class="hljs-variable">$download_url</span>&quot;</span> <span class="hljs-literal">-o</span> cloudreve<span class="hljs-literal">-freebsd-amd64</span>.tar.gz <br>tar <span class="hljs-literal">-xzvf</span> cloudreve<span class="hljs-literal">-freebsd-amd64</span>.tar.gz<br><span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> cloudreve<span class="hljs-literal">-freebsd-amd64</span>.tar.gz<br></code></pre></td></tr></table></figure><p>Cloudreve 在首次启动时，会创建初始管理员账号，请注意保管管理员密码，此密码只会在首次启动时出现。如果您忘记初始管理员密码，需要删除同级目录下的 <code>cloudreve.db</code> ，重新启动主程序以初始化新的管理员账户。</p><p>Cloudreve 默认会监听 <code>5212</code> 端口。首次启动时，Cloudreve 会在同级目录下创建名为 <code>conf.ini</code> 的配置文件，你可以修改此文件进行一些参数的配置（比如端口），保存后需要重新启动 Cloudreve 生效。</p><p>一个完整的配置文件示例如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[System]</span><br><span class="hljs-comment">; 运行模式</span><br><span class="hljs-attr">Mode</span> = master<br><span class="hljs-comment">; 监听端口</span><br><span class="hljs-attr">Listen</span> = :<span class="hljs-number">5212</span><br><span class="hljs-comment">; 是否开启 Debug</span><br><span class="hljs-attr">Debug</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment">; Session 密钥, 一般在首次启动时自动生成</span><br><span class="hljs-attr">SessionSecret</span> = <span class="hljs-number">23333</span><br><span class="hljs-comment">; Hash 加盐, 一般在首次启动时自动生成</span><br><span class="hljs-attr">HashIDSalt</span> = something really hard to guss<br><span class="hljs-comment">; 呈递客户端 IP 时使用的 Header</span><br><span class="hljs-attr">ProxyHeader</span> = X-Forwarded-For<br><br><span class="hljs-comment">; SSL 相关</span><br><span class="hljs-section">[SSL]</span><br><span class="hljs-comment">; SSL 监听端口</span><br><span class="hljs-attr">Listen</span> = :<span class="hljs-number">443</span><br><span class="hljs-comment">; 证书路径</span><br><span class="hljs-attr">CertPath</span> = C:\Users\i\Documents\fullchain.pem<br><span class="hljs-comment">; 私钥路径</span><br><span class="hljs-attr">KeyPath</span> = C:\Users\i\Documents\privkey.pem<br><br><span class="hljs-comment">; 启用 Unix Socket 监听</span><br><span class="hljs-section">[UnixSocket]</span><br><span class="hljs-attr">Listen</span> = /run/cloudreve/cloudreve.sock<br><span class="hljs-comment">; 设置产生的 socket 文件的权限</span><br><span class="hljs-attr">Perm</span> = <span class="hljs-number">0666</span><br><br><span class="hljs-comment">; 数据库相关，如果你只想使用内置的 SQLite 数据库，这一部分直接删去即可</span><br><span class="hljs-section">[Database]</span><br><span class="hljs-comment">; 数据库类型，目前支持 sqlite/mysql/mssql/postgres</span><br><span class="hljs-attr">Type</span> = mysql<br><span class="hljs-comment">; MySQL 端口</span><br><span class="hljs-attr">Port</span> = <span class="hljs-number">3306</span><br><span class="hljs-comment">; 用户名</span><br><span class="hljs-attr">User</span> = root<br><span class="hljs-comment">; 密码</span><br><span class="hljs-attr">Password</span> = root<br><span class="hljs-comment">; 数据库地址</span><br><span class="hljs-attr">Host</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-comment">; 数据库名称</span><br><span class="hljs-attr">Name</span> = v3<br><span class="hljs-comment">; 数据表前缀</span><br><span class="hljs-attr">TablePrefix</span> = cd_<br><span class="hljs-comment">; 字符集</span><br><span class="hljs-attr">Charset</span> = utf8mb4<br><span class="hljs-comment">; SQLite 数据库文件路径</span><br><span class="hljs-attr">DBFile</span> = cloudreve.db<br><span class="hljs-comment">; 进程退出前安全关闭数据库连接的缓冲时间</span><br><span class="hljs-attr">GracePeriod</span> = <span class="hljs-number">30</span><br><span class="hljs-comment">; 使用 Unix Socket 连接到数据库</span><br><span class="hljs-attr">UnixSocket</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">; 从机模式下的配置</span><br><span class="hljs-section">[Slave]</span><br><span class="hljs-comment">; 通信密钥</span><br><span class="hljs-attr">Secret</span> = <span class="hljs-number">1234567891234567123456789123456712345678912345671234567891234567</span><br><span class="hljs-comment">; 回调请求超时时间 (s)</span><br><span class="hljs-attr">CallbackTimeout</span> = <span class="hljs-number">20</span><br><span class="hljs-comment">; 签名有效期</span><br><span class="hljs-attr">SignatureTTL</span> = <span class="hljs-number">60</span><br><br><span class="hljs-comment">; 跨域配置</span><br><span class="hljs-section">[CORS]</span><br><span class="hljs-attr">AllowOrigins</span> = *<br><span class="hljs-attr">AllowMethods</span> = OPTIONS,GET,POST<br><span class="hljs-attr">AllowHeaders</span> = *<br><span class="hljs-attr">AllowCredentials</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">SameSite</span> = Default<br><span class="hljs-attr">Secure</span> = lse<br><br><span class="hljs-comment">; Redis 相关</span><br><span class="hljs-section">[Redis]</span><br><span class="hljs-attr">Server</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span><br><span class="hljs-attr">Password</span> =<br><span class="hljs-attr">DB</span> = <span class="hljs-number">0</span><br><br><span class="hljs-comment">; 从机配置覆盖</span><br><span class="hljs-section">[OptionOverwrite]</span><br><span class="hljs-comment">; 可直接使用 `设置名称 = 值` 的格式覆盖</span><br><span class="hljs-attr">max_worker_num</span> = <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>你可以使用 <code>vim</code> 或者 Panel 中的 File manager 选项卡，进入 <code>conf.ini</code> 所在路径路径，右键点击，选择 View&#x2F;Edit &gt; Source Editor ，进行编辑。</p><p>修改完配置文件后，测试启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./cloudreve<br></code></pre></td></tr></table></figure><p>使用 pm2 管理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 start ./cloudreve<br></code></pre></td></tr></table></figure><h2 id="PanIndex"><a href="#PanIndex" class="headerlink" title="PanIndex"></a><a href="https://github.com/px-org/PanIndex">PanIndex</a></h2><p>一个简易的网盘目录列表。</p><p>同样的，我编写了一个用于自动化构建 FreeBSD 版本的 PanIndex 的仓库：<a href="https://github.com/k0baya/panindex-freebsd">k0baya&#x2F;panindex-freebsd</a>。</p><blockquote><p>后台地址（默认）：<code>http://ip:port/admin</code><br>默认账号：<code>admin</code><br>默认密码：<code>PanIndex</code></p></blockquote><p>首先在 Panel 中放行一个端口，接着按照下表 Add a New Website ：</p><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>Domain</td><td><code>xxx.USERNAME.serv00.net</code>（也可以把原有的USERNAME.serv00.net删掉后重新添加）</td></tr><tr><td>Website Type</td><td>proxy</td></tr><tr><td>Proxy Target</td><td>localhost</td></tr><tr><td>Proxy URL</td><td>留空</td></tr><tr><td>Proxy port</td><td>你准备用来部署 PanIndex 的端口</td></tr><tr><td>Use HTPPS</td><td>False</td></tr><tr><td>DNS support</td><td>True</td></tr></tbody></table><p>添加完新站点后，继续点击上方的 Manage SSL certificates ，接着在出口 IP 的右侧点击 Manage ，再点击 Add certificate ：</p><table><thead><tr><th>Type</th><th>Domain</th></tr></thead><tbody><tr><td>Generate Let’s Encrypted certificate</td><td>与刚刚添加的站点域名保持一致（如果是原有的 <code>USERNAME.serv00.net</code> ，可以省略此步）</td></tr></tbody></table><p>接着SSH登入，并进入刚刚你新建的域名目录下的 <code>public_html</code> 路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">release_info=$(curl -s https://api.github.com/repos/k0baya/panindex-freebsd/releases/latest)<br>asset_url=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$release_info</span>&quot;</span> | jq -r <span class="hljs-string">&#x27;.assets[] | select(.name != &quot;source code&quot;) | .browser_download_url&#x27;</span>)<br>curl -L -o panindex <span class="hljs-string">&quot;<span class="hljs-variable">$asset_url</span>&quot;</span> &amp;&amp; <span class="hljs-built_in">chmod</span> +x panindex<br></code></pre></td></tr></table></figure><p>创建配置文件：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">cat &gt; <span class="hljs-built_in">config</span>.<span class="hljs-keyword">json </span>&lt;&lt; EOF<br>&#123;<br>  <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;port&quot;</span>: <span class="hljs-number">5238</span>,<br>  <span class="hljs-string">&quot;log_level&quot;</span>: <span class="hljs-string">&quot;info&quot;</span>,<br>  <span class="hljs-string">&quot;data_path&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;cert_file&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;key_file&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;config_query&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;db_type&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;dsn&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;ui&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><blockquote><p>数据库支持 sqlite (默认)、mysql、postgres ，如果需要接入 MySQL 或者 PostgreSQL ，请写成数据库链接的方式填入 dsn 。注意，如果是 Serv00 自带的 PostgreSQL ，请在数据库链接最末加上 <code>?sslmode=disable</code> 以禁用 SSL 连接。</p></blockquote><p>编写好配置文件后，测试运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./panindex <span class="hljs-attribute">-c</span>=config.json<br></code></pre></td></tr></table></figure><p>使用 pm2 管理：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">pm2 <span class="hljs-built_in">start</span> ./panindex <span class="hljs-comment">-- -c=config.json</span><br></code></pre></td></tr></table></figure><h2 id="Artalk"><a href="#Artalk" class="headerlink" title="Artalk"></a><a href="https://github.com/ArtalkJS/Artalk">Artalk</a></h2><p>似乎有几个群友在用这个，为方便查阅统一收录在本文，具体内容可以去群友的博客查看：<br><a href="https://blog.sinzmise.top/posts/13624/"><img src="https://blog.sinzmise.top/img/avatar.png"></a></p><blockquote><p>点击图片进入</p></blockquote><h1 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h1><p>听说 Serv00 会不定时重启机器，所以我们把 pm2 添加开机自启，可以保证每次重启都能由 pm2 调动 Alist 和 Cloudflared 。而且 Serv00 每三个月内必须要有一次登录面板或者 SSH 连接，不然会删号，也可以通过一个脚本解决问题，接下来我会详细说明。</p><h2 id="自动续期"><a href="#自动续期" class="headerlink" title="自动续期"></a>自动续期</h2><p>可以用青龙面板的自动任务定期登录SSH解决。在青龙面板中添加Linux依赖 <code>sshpass</code>，然后添加定时任务：名称随意，命令&#x2F;脚本 <code>sshpass -p &#39;密码&#39; ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt 用户名@地址 &quot;exit&quot;</code>，定时规则 <code>1 1 1 * *</code>。这样就会每个月自动ssh连接一次，实现续期。</p><blockquote><p>你还可以使用自身 SSH 自身的方式进行自动续期，操作如下：</p><p>进入一个自己喜欢的路径，使用 <code>cat</code> 命令新建 <code>auto-renew.sh</code> 脚本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat &gt; auto-renew.sh &lt;&lt; EOF<br><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span><br>  sshpass -p <span class="hljs-string">&#x27;密码&#x27;</span> ssh -o <span class="hljs-attribute">StrictHostKeyChecking</span>=<span class="hljs-literal">no</span> -o <span class="hljs-attribute">UserKnownHostsFile</span>=/dev/null -tt 用户名@地址 <span class="hljs-string">&quot;exit&quot;</span> &amp;<br>  sleep 259200  #30天为259200秒<br>done<br>EOF<br></code></pre></td></tr></table></figure><p>记得把其中的密码、用户名、ssh的地址修改为你自己的。</p><p>给 <code>auto-renew.sh</code>添加可执行权限：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">chmod +<span class="hljs-attribute">x</span> auto-renew<span class="hljs-selector-class">.sh</span><br></code></pre></td></tr></table></figure><p>使用pm2启动：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">pm2 start ./<span class="hljs-built_in">auto</span>-renew.sh<br></code></pre></td></tr></table></figure><p>这样就会每隔一个月自动执行一次SSH连接，自己SSH自己进行续期。</p></blockquote><h2 id="自动启动"><a href="#自动启动" class="headerlink" title="自动启动"></a>自动启动</h2><p>听说 Serv00 的主机会不定时重启，所以需要添加自启任务。</p><p>在 Panel 中找到 Cron jobs 选项卡，使用 Add cron job 功能添加任务，Specify time 选择 After reboot，即为重启后运行。Form type 选择 Advanced，Command 写：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>你的用户名<span class="hljs-regexp">/.npm-global/</span>bin/pm2 resurrect<br></code></pre></td></tr></table></figure><blockquote><p>记得把你的用户名改为你的用户名</p></blockquote><p>添加完之后，在 SSH 窗口保存 pm2 的当前任务列表快照：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">pm2 <span class="hljs-keyword">save</span><br></code></pre></td></tr></table></figure><p>这样每次 serv00 不定时重启任务时，都能自动调用 pm2 读取保存的任务列表快照，恢复任务列表。<strong>如果在保存了任务列表快照后又改变了任务 pm2 的任务列表，需要重新执行 <code>pm2 save</code> 以更新任务列表。</strong></p><p><strong>欢迎进群讨论，一起学习探讨：<a href="https://jq.qq.com/?_wv=1027&k=qssjFvAs">受虐滑稽</a></strong></p><p>摘自 <a href="https://blog.rappit.site/2024/01/27/serv00_logs/">https://blog.rappit.site/2024/01/27/serv00_logs/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Serv00搭建各种服务&quot;&gt;&lt;a href=&quot;#Serv00搭建各种服务&quot; class=&quot;headerlink&quot; title=&quot;Serv00搭建各种服务&quot;&gt;&lt;/a&gt;Serv00搭建各种服务&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.serv00.co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>EVA全解析（TV版+旧剧场版）</title>
    <link href="https://runoneall.github.io/article/EVA%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%88TV%E7%89%88-%E6%97%A7%E5%89%A7%E5%9C%BA%E7%89%88%EF%BC%89.html"/>
    <id>https://runoneall.github.io/article/EVA%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%88TV%E7%89%88-%E6%97%A7%E5%89%A7%E5%9C%BA%E7%89%88%EF%BC%89.html</id>
    <published>2024-06-16T02:08:39.000Z</published>
    <updated>2024-06-16T02:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EVA全解析（TV版-旧剧场版）"><a href="#EVA全解析（TV版-旧剧场版）" class="headerlink" title="EVA全解析（TV版+旧剧场版）"></a>EVA全解析（TV版+旧剧场版）</h1><p><strong>本文适合认真看过《EVA》的新观众，不适合已经深入分析的大神。</strong></p><p><strong>本文较长，大概有5万字、230张图片左右，自备零食。</strong></p><p><strong>本文的创作过程参考了很多知乎答案，豆瓣影评，各大贴吧论坛，能想起来的引用部分已标注，其他部分为原创，如有侵权还望告知。</strong></p><p><strong>本文多为鄙人愚见，水平有限，如有不妥之处，还望谅解。</strong></p><p><strong>—————————–正文开始———————————–</strong></p><p><strong>【目录】</strong></p><p><strong>0.写在前面的话</strong></p><p>一<strong>0.1《EVA》的各种版本</strong></p><p>一<strong>0.2观看《EVA》的正确顺序和姿势</strong></p><p><strong>1.制作背景</strong></p><p>一<strong>1.1动漫的变革</strong></p><p>一<strong>1.2庵野秀明如是说</strong></p><p><strong>2.剧情分析</strong></p><p>一<strong>2.1世界观</strong></p><p>一<strong>2.2时间线</strong></p><p>一<strong>2.3庵野秀明如是说</strong></p><p>一<strong>2.4各方势力的较量</strong></p><p>一一<strong>2.4.1最终目的</strong></p><p>一一<strong>2.4.2群雄博弈</strong></p><p>一一<strong>2.4.3 EOE</strong></p><p>一一<strong>2.4.4漫画版EOE</strong></p><p><strong>3.人物分析</strong></p><p>一<strong>3.1碇真嗣</strong></p><p>一一<strong>3.1.1每人心中都有一个碇真嗣</strong></p><p>一一<strong>3.1.2真嗣为什么对着明日香手淫</strong></p><p>一一<strong>3.1.3真嗣为什么要掐死明日香</strong></p><p>一一<strong>3.1.4如此碇真嗣人设的意义</strong></p><p>一<strong>3.2明日香</strong></p><p>一一<strong>3.2.1并不傲娇的明日香</strong></p><p>一一<strong>3.2.2可怜的悲剧</strong></p><p>一一<strong>3.2.3孤独的战士</strong></p><p>一一<strong>3.2.4既定的宿命</strong></p><p>一<strong>3.3绫波丽</strong></p><p>一一<strong>3.3.1二号绫波丽的成”人”之路</strong></p><p>一一<strong>3.3.2三号绫波丽的成”神”之路</strong></p><p>一一<strong>3.3.3大白绫波丽的真”心”为你</strong></p><p>一一<strong>3.3.4绫波丽的影响</strong></p><p>一<strong>3.4葛城美里</strong></p><p>一一<strong>3.4.1美里与加持</strong></p><p>一一<strong>3.4.2美里与真嗣</strong></p><p>一<strong>3.5碇源渡</strong></p><p>一<strong>3.6赤木律子</strong></p><p>一<strong>3.7加持良介</strong></p><p>一<strong>3.8渚熏</strong></p><p><strong>4.特点分析</strong></p><p>一<strong>4.1细节</strong></p><p>一<strong>4.2配乐</strong></p><p>一<strong>4.3风格</strong></p><p>一<strong>4.4手法</strong></p><p>一一<strong>4.4.1场面描写</strong></p><p>一一<strong>4.4.2对比</strong></p><p>一一<strong>4.4.3平行蒙太奇</strong></p><p>一<strong>4.5镜头与构图</strong></p><p>一<strong>4.6台词</strong></p><p><strong>5.综合评价</strong></p><p>一<strong>5.1客观评论</strong></p><p>一<strong>5.2个人感受</strong></p><p><strong>————————————————————————–</strong></p><p><strong>【0.写在前面的话】</strong></p><p>相信和我年龄差不多的小伙伴们对《新世纪福音战士》（ 《Neon Genesis Evangelion》，以下简称《EVA》 ）一定不陌生，小时候爱看动画片的我们每天放学之后气势汹汹地守在电视机屏幕前等着《EVA》片头曲的出现，带着“一脸懵逼”的表情看着机器人打怪兽，相信当年的光腚总局也是“一脸懵逼”引进《EVA》的，因为剧中有很多不和谐内容，所以经过删改之后福音战士也尴尬地成为了天鹰战士。</p><p>其实我在2011年的时候又看过一遍《EVA》，当时只是纯粹的消遣怀旧，年少无知，浑然不知此坑极深，看完一头雾水，并深知自己智商急需充值。在衣姐推荐我看《穆赫兰道》之后莫名其妙地喜欢上这种“怪异”的作品，为我打开了电影之门，于是就鬼使神差地成了影迷，这陆续几年也认真看了一千多部电影，而且最近阴差阳错地迷上了赛博朋克和其他软硬科幻，这才突然想起来自己还有一部萝卜片（机器人动画）没有看。于是2016年再看《EVA》，“山重水复疑无路，柳暗花明又一村”的感觉萦绕在我的脑海里，久久挥之不去。</p><p>所以我突然决定写点什么，本文也并非为了找存在感而过度解读， <strong>目的是让小伙伴们更好地理解《EVA》</strong> ，现在或许我身边没人会看这个上世纪的老动画片，或许看了也没什么人会产生和我一样的共鸣，也许在很长很长一段时间内，此文就是我为了情怀写给自己看的。也许很久以后，我会嘲笑2016年的自己，文笔烂，没内涵，结构差，总结不到位，观点幼稚而悲观，也许很久很久以后，我也会怀念那个对《EVA》很有激情的自己。</p><p><strong>【0.1《EVA》的各种版本】</strong></p><p>①1995年的动画片（以下简称TV版）一共26集，其中第1~ 24集为主线剧情，25集和26集因资金不足（其实从16集开始就能看出来缺钱了），通篇都是意识流手法阐述剧情，虽然没有偏离主旨，但大部分观众和粉丝表示看不懂和愤怒。</p><p>②1997年的两部剧场版《死于新生》和《Air&#x2F;真心为你》,也叫旧剧场版。</p><p>《死于新生》的剧情和TV版1<del>24剧情几乎一致，也可以说是重要剧情回顾吧，里面多了一些重要线索的解读，如果看过TV版1</del>24集，不愿继续纠结，不看也罢。</p><p>《Air&#x2F;真心为你》是《EVA》公认的大结局（ 《The End Of Evangelion》 以下简称EOE）,剧情接TV版24集（可以认为Air对应TV25，真心为你对应TV26），是我迄今为止看过最震撼的电影了，并没有之一。</p><blockquote><p>③1999年出版的《EVA漫画版》。<br>其实1995年2月《EVA漫画版》已经出版，可是出版到第4期停载，1999年复载，由动画版人物设计贞本义行绘画，漫画的创作，实际上是在EVA动画企划后开始的。漫画版的连载时间是早于动画上映的，但是构想与企划则是动画在后。漫画的创作也是基于动画的企划而作的，但并非单纯把动画漫画化，而是贞本义行先生根据自己理解所作的改编作品。（来自百度百科）</p></blockquote><p>漫画剧情和TV版略有不同，但主旨没变，而且多了很多TV版的解答，剧情脉络更为清晰。漫画版的最终结局和《Air&#x2F;真心为你》的略有不同，看完《EVA》TV版和旧剧场版强烈推荐来看漫画。</p><p>④新剧场版：制作精良，场面酷炫，一大波周边正在接近，有人说其是商业圈钱之作，也有人说是良心大作。但因世界观和一些风格已经偏离原著，本人并不是很推崇（真相就是看完EVA已经非常累了实在没精力分析新剧场版），故文此文不予讨论，大家有兴趣可以看一下，画面确实很好，动作场面很燃，并有新的角色出现。</p><p>2007年出版的《EVA新剧场版：序》，也叫EVA1.0。</p><p>2009年出版的《EVA新剧场版：破》，也叫EVA2.0。</p><p>2012年出版的《EVA新剧场版：Q》，也叫EVA3.0。</p><p>暂定2018年出版的《EVA新剧场版：|▎》，也叫EVA4.0。</p><p>⑤其他版本：比如2003或者2005重制版，换汤不换药，如果不愿继续纠结直接无视即可，其实2003版本加了很多细节的改动，画面也增强了，还是很推荐的。（如果你喜欢《EVA》，那肯定不会只看一遍。）</p><p>⑥根据版本的不同有些细节可能会略有不同，请不必过分计较。</p><p> <strong>【0.2观看《EVA》的正确顺序和姿势</strong> 】</p><p>找一段自己头脑能保持清醒的时间，先看TV版1-26集（25、26确实比较蛋疼），再跪着看完《Air&#x2F;真心为你》，再看《EVA漫画版》，再看此文，再看各大论坛的解析评论，最后高举双手对着天花板做拥抱状并正式宣布自己成为EVA的终身粉丝。</p><p><strong>【1.制作背景】</strong></p><p>80-90年代的日本大家都懂的，经济急速发展，但所谓物极必反，急速发展的代价不只是急速衰落，伴随而来的还有文化的年代错位，社会巨大的精神压力，普通日本人不得不短时间经历多次文化变革。对比当时的日本电影，比如黑泽明，表现的就是这种文化矛盾。经济衰落是一方面，当时社会大环境的压力是前提，可这跟我们ACG（动画、漫画、游戏相关行业）有何关系呢？</p><p>这里就不得不提一下当时轰动一时的“宫崎事件”了：宫崎家的少爷宫崎勤采用惨无人道的方式杀害了4名小女孩，而警察发现此人是个标准宅男，家里全是漫画和AV，典型OTAKU（御宅族，热衷于动漫及电脑游戏等次文化的人，在当时多用于贬义）。</p><p><img src="https://pic2.zhimg.com/80/433294f4a01c746619dafd2d69ba15a1_720w.webp"></p><blockquote><p>放在现在大家可能会感觉没什么，但在当时宫崎勤的状况已经完全偏离了日本人对于正常人类的定义。<br>而御宅族形象，则被宫崎事件典型化：人际关系及与人沟通出现问题，没法接近女性，是典型的失败者。事件引起社会哗然，之后更有反对御宅及动漫画的一连串示威、声讨行动，对动漫画及同人界的禁制及自我监察达到史无前例的顶峰。伴随着案件的审理期间，整个业界面对长达几年的低潮期：题材倒退、数量减少，倍受各方歧视批判，其中更有多个反对组织行动冒起，包括最激烈的“有害图书运动”。（此段来自百度百科）</p></blockquote><p>喜欢动漫和变态杀人魔被社会舆论和大众精神压力强行画上了等号。</p><p>说成有史以来ACG被黑的最惨的一次应该也不过分，可以说是ACG的世界末日。</p><p><strong>【1.1动漫的变革】</strong></p><p>在此之前日本的动漫除了《高达》这种大众经典之作，大部分都是给小孩子看的动画片。而1995年对日本的ACG来说可谓是具有重要意义跨时代的一年，有两部动漫神作开始进入人们的视界，一部是鬼才导演押井守的《攻壳机动队》让大家认识到原来动漫也可以这么严肃，和电影的区别只是表现形式不同，另一部就是痞子导演庵野秀明的《EVA》。</p><p>《EVA》的出现可谓给日本民众打了当头一棒：</p><blockquote><p>原来ACG也可以这么高大上？心理学？哲学？神学？意识流？存在主义？后现代？卧槽？首先在档次上立马和小孩子过家家的动画片区分出来，有一种你看“小黄书”，我看“红楼梦”的感觉。</p></blockquote><p>革命性地改变了人们心目中ACG的形象，可谓醍醐灌顶，其次更为重要的是《EVA》承载的信息量实在是太大了，数以亿吨的信息量把所有人都吓到了。</p><p>另一方面《EVA》中描绘的末世情节在当时的日本大众心中引起了强烈共鸣，此处引用村上春树的一段话：“一九九五年一月和三月发生的阪神大震灾与地铁沙林事件，是日本战后历史的具有极其重要意义的两大悲剧，是即使说『日本人的意识状态因此而前后截然不同』也不为过的重大事件。有可能作为一对灾难（catastrophe）、作为在讲述我们的精神史方面无可忽视的大型里程碑存续下去。”</p><p>至此ACG开始走向成人化。（这里的成人并不是色情的意思&#x3D;。&#x3D;）</p><p><strong>【1.2庵野秀明如是说】</strong></p><p>此段来自漫画第一话庵野秀明的《我们到底想做什么——写在EVA开播之前》：</p><blockquote><p>故事中有个14岁的少年，害怕与别人接触。<br>他认为自己的行为是无所谓的，放弃让别人了解自己。<br>生活在一个封闭的世界。<br>自认自己遭到父亲遗弃，自己是个没有用的人。<br>却没有自杀的勇气，是个胆小的少年。<br>故事中还有一个29岁的女性，与别人接触时尽可能的保持距离，从表面的接触中逃开，以保护自己。<br>两个人都受到伤害感到极度恐惧。<br>两个人都欠缺一般主角所具备的积极性，让人觉得不合适。<br>但是我还是让他们当主角。<br>有人说”生活就是需要变化”。<br>我希望在这个故事结束时，不管世界也好，他们也罢，都能有所改变。<br>所以我创作了这部作品。<br>这就是我真正的心情。<br>《EVA》是我在颓废了4年，什么事都不干之后，全心投入的作品。<br>逃避了4年，就是死不了的我，秉持着唯一信念”不能逃避”！的情况下再度创作的作品。<br>想要让自己的心情表现在影片中而产生的作品。<br>我知道这是一个冲动，傲慢而且困难重重的举动。<br>但却是我的目标。<br>结果还不晓得。<br>因为在我心中这个故事还没有结束。<br>真嗣，美里，零等人会变成如何，往哪里去，还不清楚。<br>因为工作人员的想法究竟如何也还不清楚。<br>感觉上很没有责任感吧。<br>但这却是我们为了达到和作品[同步]的目标所产生的结果。<br>“即使如此，也是仿造的。”<br>虽然背负着这种风险，但现在我们也只能依着这种方法制作。<br>因为我们的[原创]，只出现在那个地方……<br>1995.7.17 一个阴雨的日子</p></blockquote><p><strong>【2.剧情分析】</strong></p><p><strong>【2.1世界观】</strong></p><p>EVA剧情的大背景源于希伯来圣经，也就是犹太教的《旧约》，《旧约》后来被基督宗教全盘收纳为《圣经全书》的前部分，是用希伯来语写成的，《圣经》后一部分称为《新约》。</p><p>坦白说各种经书这块我也没整明白，反正就是很久很久以前地球上开始生长生命之树，一级一级地产生各种各样的生物，扩散于地球的陆地、海洋与天空，使天地之间充满了生机，生命之树最终生出Adam（亚当）和Lilith（莉莉丝），这俩就是世界上存在的雄体和雌体的最高形式。</p><blockquote><p>之后生命之树就此瓦解，剩余的部分根须，便化成了朗基奴斯之枪，而在此之中，朗基奴斯之枪也就是后来的“弑神之枪”，（名字是来自《圣经》，根据《圣经》记载，当耶稣被钉在十字架上，一名百夫长用枪刺伤了他的侧腹。这名百夫长就叫做朗基努斯。）在《EVA》中朗基努斯之枪是唯一可以直接穿过A.T.Field（也被翻译成绝对领域）并有效杀伤使徒的武器。（此段来自百度百科）</p></blockquote><p>亚当被看作为使徒的始祖。亚当之卵，称作“白之月”，也就是使徒的生命之源，埋藏于南极地底，亚当隐藏在其中，人类依靠这个巨大空间建立了南极地下基地，2000年，人类利用存在于白之月之中的亚当进行科学试验，最终引发了第二次冲击。</p><p>莉莉丝被看作为人类的始祖。莉莉丝之卵，称作“黑之月”，也就是人类的生命之源，埋藏于日本箱根，莉莉丝隐藏在其中，并且人类依靠这个巨大空间（就是那个89%被掩埋的地下空间，即NERV本部所在地），建造了人类的新要塞——TOKYO-3（第三新东京市）。Seele计划利用存在于黑之月之中的莉莉丝进行自己的补完计划。黑之月在《The<br>End Of Evangelion》中被大白绫波丽（莉莉丝）吸引而出，后成为人类灵魂回归的中心。</p><p>这个世界一共有18个使徒。第一使徒亚当（Adam），第二使徒莉莉丝，第3~16个使徒就是TV版中出现的各种来袭的怪物，第17个使徒是渚熏（也被称为人造使徒），第18使徒是人类（也就是Lilin，李林）。人类是背叛了上帝的“莉莉丝”与地狱的老大“撒旦”的后裔，所以也被称作恶魔之子，人类的存在是有罪的。李林这个名字来源是犹太教传说中，莉莉丝与恶魔生下的后代“Lilin”。（所以基督教认为，人生而有罪，人的生命就是向上帝赎罪的过程，相信对基督教有点了解的小伙伴都不难理解。）</p><p>不知道什么时候有人发现了死海文书，内容令人震惊，不但指出人类与使徒的起源，还指出将来某一时刻由亚当与莉莉丝所生的一切必将归还本体（可以理解为新的轮回，重启），重新生长出生命之树并产生新形态的生命体（成神）。</p><p>就圣经而言，人类是唯一选择了智慧之果的使徒，其他使徒选择的是生命之果（即S2机关，可以不进食生存，自我再生）。人类因为没选择生命之果，故A.T.Field较弱，不足以维持单一个体的状态，而分散为许多小个体，这就是人类，人类补完计划由此而产生，后被完全苏醒的莉莉丝全数同化吸收，成为一体。</p><p>至于亚当和莉莉丝之前的事情，那就在《圣经》里了，不在本文讨论范围之内，有兴趣的小伙伴可以自行搜索。亚当和莉莉丝还有人类的来历在不同的宗教典籍里可能会有不同版本，这里只讲一下《旧约》，便于大家理解《EVA》的世界观设定即可。</p><p><strong>【2.2时间线】</strong></p><p>此段内容为搬运+修改+补充：</p><p>1999年，冬月与碇唯在京都大学相识。不久之后，六分仪源渡（与碇唯结婚后改姓为碇，叫碇源渡）和冬月相识。当时和碇唯已经在交往中，老碇一边接近碇唯，一边接触她背后的组织Seele。</p><p>2000年9月13日，第二次冲击发生。在南极大陆上发生了一起给地球带来巨大浩劫的异变，造成海面水位上升、地轴扭曲。如同恐龙灭绝的传说，巨大的陨石撞击地球之后灰尘遮盖天空，造成全球性气温下降、经济崩坏、民族纷争、内战……世界人口急速减少，只剩下原来的一半。南极成为了宁静的残亡地域，人类虽没像恐龙那样灭绝，但复兴工作却无比严峻。</p><p>2001年，碇真嗣出生，并且，所有EVA的驾驶员都在这一年出生。</p><p>2002年，老碇和冬月为了调查第二次浩劫的起因前往南极。国联正式发表公告，称2000年9月13 日世界规模的大灾害，是由于有超光速（爱因斯坦的棺材板我已经帮大家压住了）数倍的大质量陨石，冲击南极大陆所引致，其破害性相当于40亿年前的地球被小行星撞击，但对于造成第二次浩劫真正的原因，却无人知晓。现实毕竟难以掩盖，在专家圈内，流传着一些保留下来的照片，在冲击造成的光影中，有一个巨人般的影像，也有在南极等地的幸存者称，在冲击波浪的中心，有数对巨大的翅膀。因第二次浩劫受到惊吓而陷入自闭状态的葛城美里，被国联保护。</p><p>2003年，国联完成了对南极的调查，根据调查结果设立了位于箱根的人工进化研究所（就是后来的NERV）。冬月首次探访人工进化研究所，之后开始协助老碇。在人工进化研究所的地下有个广大的球形巨大空洞，而NERV本部就利用这个空洞而建造，表面上是开始对南极事故（亚当）的研究，实际上则是Seele开始三大计划，即人类补完计划、E计划和亚当计划。</p><p>亚当计划：复原原始形态亚当的计划。虽然也可以说是为了制造EVA（E计划）才复原的亚当，但Seele的赎罪仪式也有使用亚当来进行的计划（用渚熏），而老碇为了自己的计划，也曾利用过亚当。</p><p>E计划：为了消灭使徒并进行仪式，按照计划需要至少12台EVA。在亚当计划开始之前是使用莉莉丝来制造EVA，但是在亚当计划开始后，二号机以后的EVA都是从亚当制造而来。（随二号机来日本的，就是加持所带来的亚当。）</p><p>这两个计划对于人类补完计划都是必须的，原本亚当计划和E计划是一个概念，但是后来逐渐分开了。</p><p>此时，E计划启动，零号机也开始建造了。</p><p>2004年，进行了初号机启动实验，在幼小的真嗣面前，发生了事故，真嗣的母亲碇唯在实验中消失了，同时二号机的实验也失败了，明日香母亲神经错乱（实际上是，碇唯的灵魂融于初号机，明日香母亲的部分灵魂融入二号机）。碇唯事件以后没多久，老碇决定转移实行“自己的人类补完计划”（在这之前的他们，其目的只是实行E计划而已）。</p><p>2005年，葛城美里和赤木律子在第2新东京市的东京大学内相识，之后加持良介和美里相识，没多久，加持和美里开始同居，与此同时，第3新东京市开始建设。</p><p>2007年，美里和加持分手。</p><p>2008年，赤木直子（赤木律子的妈妈）博士完成了MAGI（生物电脑，人工智能计算机，NERV的主系统）的基础理论。跟随着母亲，律子也加入研究所，成为主要执行人。</p><p>2009年，葛城美里加入研究所。</p><p>2010年，NERV的中枢电脑MAGI完成的当日，开发者赤木直子在掐死第一个绫波丽后自杀，人工进化研究所经过改造，成为了新的秘密组织NERV。</p><p>2014年，第二个绫波丽转学进入第3新东京市第一中学校内（后来加持调查发现，这个中学实际上是老碇暗自安排的EVA驾驶员的候补队）。</p><p>2015年，使徒袭来！从第二次浩后经过了15年，人类总算能重新繁荣起来。EVA已有3台可以实际使用了，而后也发现了三位14岁的少男少女可以担任EVA的驾驶员，人们不得不把未来的希望寄望在他们身上。面对重现的使徒们，肩上背负着人类存亡如此重大命运的少年们的战争现在开始了。（TV第一集）</p><p><strong>【2.3庵野秀明如是说】</strong></p><p>此段也是来自漫画第一话庵野秀明的《我们到底想做什么——写在EVA开播之前》：</p><blockquote><p>时间是2015年，过半数的人类在15年前丧生的世界，就像埋在便利商店的架子中，奇迹般的复兴，生产，流通，消费，竞技逐渐复生的世界。<br>就像看惯了这种景象，封闭，毁灭如同家常便饭般的人类居住的世界。<br>原来要承担次世代责任的小孩人数剧减的世界。<br>日本放弃了毁灭的旧东京，迁都长野县，建设了第二新东京市，但这实际是迁都计划的幌子，主要是建设迎敌要塞——第三新东京市的世界。<br>而这个都市莫名的遭到来路不明的物体“使徒”侵袭的世界。<br>这就是《新世纪Evangelion福音战士》粗略世界观。<br>充满了悲观印象色彩的世界观<br>我们排除了具有乐观气氛的舞台，开始了这个故事。</p></blockquote><p><strong>【2.4各方势力的较量】</strong></p><p><strong>【2.4.1最终目的】</strong></p><p>①Seele（在德语中是“灵魂”之意），迷之宗教组织，NERV的上级，神秘并有很大权利，能调用世界上很多资金，甚至可以干涉联合国事务，手中有“死海文书”，背后操纵整个人类，最终目的是实施“人类补完计划”（核心理念是“自我赎罪”）。</p><p>根据人类的起源（恶魔之子），Seele认为现在的人类是罪恶的，让人类都变橙汁（LCL之海，是一个没有AT力场的世界，在这个世界，人类的意识无分彼此，所有人的灵魂都栖息于由莉莉斯的血构成的巨大海洋之内），这个过程也正是向上帝赎罪。而且人类并不是单纯的灭亡，而是转化成新的形态，所有人合而为一，成为单一生命体，与其说是让人类灭亡，倒不如说是让人类重生。</p><p>人类（无论是肉体还是心灵）都是由脆弱的物质构成的，非常容易受到伤害，而在人与人之间，心灵的世界是彼此隔绝的，要使人类向更高的领域进化，就必须使人的心灵摆脱躯体的束缚，重新回到人类的诞生之地“莉莉丝之卵”中。唯有如此，才能最终拆除人与人之间的心灵屏障，使不同的心灵世界能够相互补充，走向进化的终点——引领人类回归原始。人类补完计划就是为了实现这个神圣目的而创立的。不过当然，Seele实施“人类补完计划”的原因并不是想成为神，也不是让人类进化，而是赎罪——向神低头。</p><p>这种感觉就像是《三体：死神永生》里的终极神级文明“归零者”的目的——让整个宇宙重启，恢复10维世界。就像是《玲音》里的物联网终极形态——所有人都是相连的，地球（人类）作为一个整体会产生意识。就像《攻壳机动队》第二季结尾的意识上传到网络上，完成人类的进化。大概就是这种感觉，想一想补完之后的世界，还有点小激动。</p><p>这里引用结尾的大白绫波丽（莉莉丝）的台词：“没有人痛苦，没有人悲伤，没有战乱，没有纷争，没有饥饿，没有寒冷，没有支配，没有服从，没有了AT field，失去了自身形态的世界，何为自己，何为他人，模棱两可的世界，自己无处不在，同时又不存在于任何地方，脆弱的世界，一切都不复存在的——幸福的世界。”</p><p>②老碇的目的：最开始的目的很可能是自己成为神，也可以说是创造神（真是够野心），和碇唯交往只是为了接近她背后的Seele。在形式上，他虽然是受人类补完委员会和Seele的指示在指挥NERV，但是在暗中他有着自己的成神计划。当碇唯的初号机事故发生后，老碇明白了失去了才懂得珍惜的道理，他发现自己失去碇唯的同时爱上了碇唯，所以老碇最终目的是自己成为神，和碇唯再相会（真是够浪漫）。</p><p>③使徒的目的：自己去碰触（回归）亚当引发第三次冲击毁灭罪恶的人类，因为他们是亚当的后代，可以看作拥有亚当的灵魂，使徒不在乎什么人类补完。</p><p>④这里有一个隐藏的目的，就是碇唯的目的（也可能是老碇最开始的目的）：碇唯看清了Seele，也看清了老碇，她赞成Seele的表面目的——为了防止第三次冲击，但绝不赞成人类补完计划。她加入Seele其实是为了防止第三次冲击的发生，及研究如何用上EVA的技术，让真嗣（也可以说是全人类）活下来，人类得到“永生”，永远在宇宙中生存下去，或是留下人类在宇宙中活过的证明。冬月最终也没告诉老碇当年碇唯事故的真相——碇唯是以自己的意志留在初号机里的。</p><p>⑤普通人类的目的：作为不明真相的围观群众莫名其妙遭遇天灾（第二次冲击），灾后重建万物复苏生机盎然的时候又遭遇怪物入侵，打倒怪物保卫世界和平人人有责。</p><p><strong>【2.4.2群雄博弈】</strong></p><p>首先要说明的是：剧中各方势力的具体计划以及导致的结果还有人类补完计划具体的过程或者触发第三次冲击的前提都没有直接给出，都是被推导出来的，线索还零碎稀少，难免有的地方会和大家的理解有所出入，分析过程枯燥绕口，故在此省略，直接给大家看结果。</p><p>先说一下第三次冲击的触发条件，也是各方势力的具体计划：</p><p>①使徒的灵魂和亚当的肉体的结合（使徒回归亚当，使徒希望的），一共有三种不同的使徒灵魂：绫波丽（受控制的莉莉丝灵魂）、普通使徒（亚当灵魂）和渚薰（受控制的亚当灵魂）。</p><p>②量产机型与完整的莉莉丝举行处死仪式。（人类回归莉莉丝，Seele希望的。）</p><p>③量产机型与初号机举行处死仪式。（人类回归莉莉丝，Seele希望的。）</p><p>④亚当与完整的莉莉丝禁忌融合。（人类不灭，EVA成神，老碇造神，老碇希望的。）</p><blockquote><p>普遍认为处死仪式是必须的，但并不是触发第三次冲击的关键。（处死仪式一看就是来自《圣经》中的耶稣之死，耶稣是神之子，真嗣也是。按照基督教的传说，要把人类从原罪中解救出来，需要将神之子钉在生命之树做的十字架上。血流向大地后，人类就可以偿还当初犯下的原罪。所以对应后来真嗣和初号机发动第三次冲击的仪式看出——初号机被刺入隆基努斯枪，化身生命之树。）</p></blockquote><p>剧中的战斗过程不再赘述，有特点的战斗后面有分析，这里说一下比较重要的几点：</p><p>在渚熏出现之前，Seele虽然看老碇不爽，而且越来越怀疑他，但是和NERV依然是合作关系，都是为了打倒之前的使徒，不能让使徒的灵魂碰到亚当的肉体。</p><p>渚熏是Seele派来的使徒，说明此时Seele已经发现了老碇的背叛，宁可要触发条件①，也不能让老碇成神。因为Seele的核心价值观是”赎罪”，宁可下下策计划①导致人类灭绝也不能让老碇的大逆不道成功。</p><p>但是老碇有3件重要的事一直瞒着Seele：</p><p>（1）他偷换了亚当的肉体，囚禁在最终教条区的莉莉丝肉体被误认为亚当的肉体（使徒也被忽悠了）。真正的亚当肉体已经被微缩成胚胎被碇源渡移植到右手。（漫画中是老碇吞了亚当，亚当出现在了老碇的左手，这里的左手当然是隐喻恶魔之手。）</p><p>（2）加持良治是老碇派到Seele的间谍，又被Seele信任派到NERV当间谍，亚当就是加持带给老碇的，对加持良治的利用也是碇源渡能瞒天过海的关键。</p><p>（3）他偷偷复制了亚当计划，创造了没有灵魂的EVA零号机。然而没有灵魂同步，EVA便无法使用，没有驾驶员怎么办，老碇的办法是用碇唯的DNA创造了没有灵魂的容器，之后放入莉莉丝的灵魂——绫波丽诞生了。绫波丽存在的目的除了驾驶EVA，还有就是为了以后的禁忌融合。</p><p>渚熏到了最终教条区发现原来亚当被换成了莉莉丝，并且由于渚熏选择了自由（也就是选择死亡），所以最后计划①被淘汰掉了，于是Seele决定亲手执行计划，开始进攻NERV基地。</p><p>其实Seele最初的计划是用莉莉丝完成处死仪式，也就是上面的计划②。而仪式需要朗基奴斯之枪，但是老碇利用消灭鸟使徒（就是会精神攻击的那个）的借口由零号机把朗基奴斯之枪扔到了月球轨道上。所以Seele启动了备用方案，利用莉莉丝的复制品——初号机和搭载S2机关的EVA量产型执行补完仪式，也就是计划③。（后来朗基努斯之枪被Seele回收并造出了复制品）</p><p><strong>【2.4.3 EOE】</strong></p><p>在EOE（即The End Of Evangelion，EVA的结局场景）中，明日香被美里藏在二号机里，关键时刻二号机觉醒，明日香也冲破了心之壁，感受到了妈妈（二号机）的爱，成功顿悟，从精神崩溃中走了出来，开始了和量产机的战斗。</p><p>真嗣被美里所救，搭乘初号机来救明日香，看到明日香的惨状后再次崩溃，真嗣的惨叫召唤了朗基努斯之枪，初号机处死仪式（计划③）正式开始。</p><p>与此同时老碇把手中的亚当在获取了绫波丽的核心同时放入了绫波丽的子宫（计划④：禁忌融合），亚当的肉体和莉莉丝的灵魂结合，但可惜的是，绫波丽拒绝了老碇，使他的成神梦想破灭，接着绫波丽回归莉莉丝肉体并且和初号机结合，触发第三次冲击，真嗣成为神。所以实际上计划③和计划④算是同时进行的。</p><p>而人类补完计划回归莉莉丝的过程也像极了受精过程（成群精子争先恐后的抢着进入卵子），就像基尔最后说的“肇始与终结都在同一个地方”一样，死亡即是重生。</p><p><img src="https://pic4.zhimg.com/80/92d08e4e4bbbbf7f2e410eb47d2eb053_720w.webp"></p><p>但是在壮观的仪式即将完成之前，真嗣“最后的决定”使整个计划产生了变化：</p><p>之后庵野秀明给了我们一个脑洞大开极其牛B的结局——所有人都变成了橙汁，只剩下碇真嗣和明日香（也就是暗示亚当和夏娃），真嗣要掐死明日香，明日香却抚摸着真嗣的脸，真嗣松开了手，明日香说：“真恶心。”</p><p>《EVA》就此戛然而止，剧终。（EOE这部分在后面的人物分析中有详解）</p><p>所以最后的结局就是Seele很郁闷，老碇很郁闷，观众更郁闷，粉丝们更兴奋。</p><p><strong>【2.4.4漫画版EOE】</strong></p><p>相比较而言，漫画版的结局（贞本义行版）就很正能量：</p><p>真嗣在补完过程尾声“最后的决定”中顿悟了，看清了——即使痛苦，即使人和人不能完全理解，但是哪怕有一瞬间，人和人直接也是可以冲破心之壁的。</p><p>爱过，就已足够</p><p>最终凌波丽和真嗣告别，再次又露出了微笑。</p><p>真嗣也想起了和母亲的约定——让人类幸福生活下去：</p><p>“已经没关系了，一切的生命都有了复原的力量，都有了活下去的力量，亦真亦幻，若实若虚。而真相，就在我们心中，人的形状是由心创造的，如果每个人能想象出自己的形象，每个人都能恢复人形的。”（于是大家又都被打回了原形。）</p><p>碇唯也化作神——她与初号机永存于宇宙之中，守望着真嗣，以及全人类，成为人类活过的证据，即使那是孤寂的。“我会注视着你死去，然后再次诞生，今后，不论你诞生多少次，悄悄的，在远方。”</p><p>碇唯可谓真•圣母，漫画的结局里只有碇唯的目的成功了。</p><p>漫画里最后的场景就是轮回之后的真嗣，去京都上学，朋友来送行，背景音“二号列车即将到站（二号机，明日香）”，和轮回之后的明日香邂逅，剑介也露了个镜头，最后背包上挂着的美里的十字架项链闪烁着象征希望一样的光芒。</p><p><img src="https://pic2.zhimg.com/80/d92030ac07c3e7ef89f7842bf1d2f98d_720w.webp"></p><p><strong>【3.人物分析】</strong></p><p>《EVA》的人物设计以及对人物的塑造可谓做到了极致，每一个人物都无法简单的以好坏来定义，每一个角色都有着自己背后的故事，每个人都是非常复杂，就算单独把每个人物的故事抽出来都不失为一个不错的故事，何况各个人物的故事加一起配合庵野秀明独特的表现手法——爆炸了。</p><p>首先负责任地说一点——《EVA》的各路主角里没一个正常人。</p><p>文艺一点说就是——剧中角色的一生，尽是悲伤之事。</p><p><strong>【3.1碇真嗣】</strong></p><p><img src="https://pic3.zhimg.com/80/b5a757a8c8d2ad1840e7144241a46a6a_720w.webp"></p><p><strong>【3.1.1每人心中都有一个碇真嗣】</strong></p><p>如果搞一个动漫中最惨的主角排行榜，碇真嗣不名列前茅我第一个不服。</p><p>性格缺陷赖童年，这简直是一定的。亲眼目睹母亲的死，虽然当时很小不记得了，但在潜意识中是一直存在的，虽然是官二代，可之后被父亲抛弃，寄养在伯父伯母家也被亲戚疏远，没有朋友。服从别人是真嗣的生活方式，迷茫是真嗣的内心写照。既没有入世的能力和觉悟，也没有出世的资本和理由。性格内向，行为被动，虽然理想很简单也很天真，但是和乱世的时代背景背道而驰。毫无存在感，后来在EVA驾驶中找到些许，来自葛城美里的话：“或许，除了EVA，他已经没有别的容身之处了，究竟是从什么时候开始的呢？”</p><p>引用漫画中真嗣真实的内心独白：“我似乎觉得，我的心灵和身体渐渐变得支离破碎。每当有悲伤或痛苦的事情发生，我会觉得这并不是自己，会以一种事不关己的方式来看，仿佛还有另外一个自己，没事的，我可以撑过去的。如果将“心”封闭在体内的最深处，这么一来，身体的痛，心灵的痛，就连恐怖，也会在毫无感觉的情况下过去吧。”</p><p>典型的“精神胜利法”，逃避一切的懦弱，无家可归，厌世情节的大结局心态（长期开启贤者模式），类似抑郁症的封闭感觉状态，这也正是那个时代众多OTAKU的缩影，是一个很典型的一类人的形象。</p><p>真嗣也直接被形容成小豪猪，当然并不是说真嗣长得萌，而是来自叔本华的“豪猪理论”：“一群豪猪在一个寒冷的冬天挤在一起取暖。但是它们的刺毛开始互相击刺，于是不得不分散开，可是寒冷又使它们聚在一起，于是同样的事发生了。经过几番聚散，最后它们发现最好是彼此保持相当的距离。”</p><p>“爱是一种伤害”，这句话用在真嗣身上再合适不过了。</p><p>虽然人物表象看似都是缺点，可无论剧情走到哪里，在矛盾逼迫之下，在几次面临抉择的时候，真嗣的本性都会呈现出来，虽然结果还是悲惨的（比如冬二事件），但真嗣都没有跨过自己最后的底线——善良。（这里指的是EOE之前的普通剧情，因为我感觉最后真嗣已经被玩坏了，失去了自我，连EVA整个世界观也变成了非道德性，善良也无从说起。）</p><p>开始时真嗣还幻想着爸爸要见自己定有原因，可惜老碇打心底里对儿子就没有爱（漫画版EOE中是老碇从枪口下救下了真嗣，有直接表达）。“原来是打算使唤我，才把我叫来了，就算我不驾驶，别人也会驾驶吧”这样的想法在真嗣的价值观里根深蒂固，而实际情况也确实如此，真嗣拒绝驾驶EVA的时候大家都没有强迫他，直接把绫波丽叫来了，前后两次离开NERV也都很简单，老碇没有任何挽留之意不说，也丝毫没有感谢之情，反而是一种“不驾驶EVA，你在这里没什么用，滚吧”的态度。</p><p><img src="https://pic4.zhimg.com/80/616f648198a7613db1d7973030e05c43_720w.webp"></p><p>存在感又没了，真嗣变得自我否定，更加自卑，对别人强加给自己的“时代使命”抱着不理解的、逃避的态度。当然，在实际行动上是服从的，不过是心理脆弱，通过妥协来寻找安全感（相信每一个经历过孤独的人都会秒懂，寻找安全感是麻醉寂寞的普遍手段）。</p><p>不成熟的迷茫决定了内心的软弱，在离开NERV（也就是离别的车站那集）场景中，本已下定决心不再驾驶EVA的真嗣却因为律子一句“善意”的谎言——“你爸爸有话要我转告你：任务达成，辛苦了”，变得动摇。这里为什么善意加了引号，因为律子想借此谎言让真嗣回心转意，充分利用了真嗣服从别人而活彷徨不定的弱点，律子明明自己之前还对老碇说：“最坏的情况是给真嗣洗脑，不过对同步率会产生影响”，真是讽刺。</p><p>当然，真嗣毫无悬念的再次上当，TV版中并且和美里有一种“列车驶过，你还在，我也还在”的眼神交流，漫画里则是两人发自肺腑的真心话，冬二同学等人来送行，真嗣也交到了朋友。所以我们的故事也将继续，当时我还天真地以为这也不失为一种不错的继续：雷天使(八面体使徒)那集，真嗣见证了凌波微笑，鱼天使(海底的那个使徒)那集，真嗣认识了明日香，音乐天使(会分裂的使徒)那集，真嗣和明日香的关系更亲近和微妙，胎天使(岩浆里的使徒)那集，真嗣救了明日香一命，雨天使(蜘蛛使徒)和空天使(炸弹使徒)那集，真嗣和明日香和绫波丽合作更默契，并都在战斗中担任重要角色，屡次拯救世界的又逐渐取得美少女芳心（第二个绫波丽），真可谓走上人生巅峰指日可待。</p><p>然而真嗣再次驾驶EVA，悲剧却从未停止。</p><p>之后就是真嗣的好朋友冬二成为三号机驾驶员，却没想到三号机被使徒附体，真嗣被命令干掉三号机，零号机和二号机一击就被KO，真嗣出场，真嗣知道里面有驾驶员，阻止使徒拯救人类的前提是杀掉一个和自己一样的孩子，善良软弱的真嗣肯定是拒绝的。老碇见儿子无用，毅然启动“傀儡系统”，初号机当即脱离真嗣的控制，对冬二驾驶的三号机开始了疯狂虐杀，老碇硬生生地让亲生儿子在无助的惨叫中杀死自己的好朋友（这里不得不提一下真嗣的声优绪方惠美，真嗣痛苦的惨叫真是让人头皮发麻，心都碎了）。所有人都被残忍的初号机和冷酷的老碇以及血腥的战斗吓尿了，只有老锭嘴角微微一笑，犹如邪神附体。</p><p>而真嗣是干掉了三号机后才知道里面是冬二，如此虐心的瞬间对真嗣心理产生二次冲击，彻底击垮了真嗣的心理防线（三号机这集漫画版和TV版设定略有不同，此处略）。有时候愤怒的真嗣内心的小宇宙也会爆发一下，任性驾驶初号机“威胁”要毁灭NERV，可惜轻而易举就被拿下，在外人看来就像幼稚的撒娇耍脾气，更是让真嗣自卑到了极点。</p><p>被赋予所谓的“使命”的自己不过是他人的棋子，自己的三观立刻崩塌。三号机事件的结局就是真嗣心已死，万念俱灰，再次离开NERV。</p><p>其实真嗣的三观是在不断崩塌的（冬二事件），之后又重建（力天使那集同步率%400暴走生吃使徒等等），再崩塌（第二个绫波丽为了救自己而死），再重建（和渚熏的二三事），再崩塌（亲手杀死渚熏），再重建（葛城美里为了自己而死），再崩塌（亲眼目睹明日香最后一站的惨状），再重建（补完仪式开始），再崩塌（EOE中拒绝补完要掐死明日香），再重建（明日香抚摸着真嗣的脸庞），真是惨……我他喵都快写不下去了。</p><p>总之就是——自己在乎的人，一个一个的都消失了。</p><p>然而更惨的是——真嗣无法自杀：因为自杀行为正是肯定了意志本身的显现（参照渚熏），而真嗣明显不是这种人。这里我想引用一下叔本华的观点：“人们对于死亡最大的恐惧在于他们无法想象这样一个事实：我死了，但这个世界却仍然运行着，而这个观点的错误在于人们认为死亡代表了自己的表象归于无。”</p><p>看着这样的真嗣，如果能把《EVA》的最后一句台词（“真恶心”）前面加上两个字，我希望是：“活着，真恶心。”</p><p><strong>【3.1.2真嗣为什么对着明日香手淫】</strong></p><p>观众可能对这样的情节设定感到很不适，救世主美少年居然对双马尾傲娇妹做出如此下流之事，其实在很多作品中都有类似这种让人不适的“性情节”，比如《美国往事》中的男主面条，在无法和黛博拉在一起的情况下，选择强奸了他的一生所爱。在《子夜》中，大佬吴荪甫在破产前夕，绝望之下，强奸了送东西的吴妈。其实我们只要稍作分析便不难理解这种让人不适的剧情设定。</p><p>当时的情况是这样的：真嗣的心理因为杀掉渚熏而万念俱灰，而病房相对安静而安全，也没有任何工作人员，只剩下真嗣和明日香。而此时的真嗣，愤怒，焦虑，无助，精神濒临崩溃边缘，而懦弱正是真嗣的性格本质，所以真嗣想逃避，绫波丽是第三个，物是人非事事休，渚薰也被自己亲手所杀，美里忙于战斗不见踪影，身边只有明日香，虽然明日香已经被精神污染病床不起，可真嗣还是幻想着明日香会成为自己的避风港，能从明日香那里得到安全感，幻想着明日香醒过来罩着他。当然，无论真嗣怎么疯狂摇晃明日香，都没反应，直到不小心把衣服扣子摇掉了，露出了美胸，真嗣再也忍不住了，撸了一管，感到了更大的空虚，悔恨，痛苦，内疚，自卑。</p><p>相信大家都懂一个道理：性，是一种普遍的发泄方式（很负责任地插一句：男性撸管并不都是因为来感觉了，有相当一部分原因是想要发泄）。内在环境可以回想一下当时的剧情，换了一般人都承受不了那么巨大的压力，更何况是懦弱的真嗣。外在环境是明日香卧床不起毫无反抗能力，别说是撸一管了，就算来一发都是可行的。</p><p>那么隐藏问题来了，为什么是手淫，而不是强奸：</p><blockquote><p>手淫，和强奸一样，本质上是性行为的一种，但是手淫在行为上和强奸，有点不同的解释，强奸是对客体实施的行为，手淫是对自己实施的行为，但本质上，强奸者和手淫者，都有懦弱的性格特点，强奸者相对于手淫者，有更多的潜在暴力倾向，换句话说，强奸者将对自己无能的愤怒施加在他人身上，从而获取自信，而手淫者通过将对自己无能的愤怒，自我发泄出来，从而逃避压力给自己造成的不适（此段来自知乎）。</p></blockquote><p>真嗣明显属于后者，要知道，救世主不是那么好当的，我相信在那种压力和精神崩溃边缘的情况下，别说是天生丽质明日香了，就算床上躺着的是凤姐，真嗣也撸的出来。而且这可能是真嗣的第一次，他还不懂什么叫做爱。（双关语，是的，中文就是这么博大精深。）</p><p><img src="https://pic1.zhimg.com/80/24e13eade95bfaecfca1347a14883530_720w.webp"></p><p>所以说，<strong>真嗣对明日香手淫，是真嗣性格本质的终极体现。</strong></p><p>另一方面，这也是庵野秀明对广大不成长的观众的愤怒和桀骜，之前的镜头大部分都是第三人称视角，而右手精液的那个镜头，突然变成了第一视角，让屏幕前的观众变成了真嗣。来感受一下这邪恶而熟悉的右手，像不像屏幕前的你我他。</p><p>还有一方面，这段剧情也非常巧妙的暗示了EVA的主旋律：</p><p>第一集真嗣和绫波丽，手上是血，绫波丽代表莉莉丝，代表母性，血液代表血缘关系。</p><p>最后一集真嗣和明日香，手上是精液，明日香代表夏娃，代表配偶，精液代表生殖关系。</p><p><img src="https://pic3.zhimg.com/80/a4c76e29ee808fc731e1d5da4e5d02d2_720w.webp"></p><p>从这三方面看这样的剧情设定，怎一个”妙”字了得。</p><p><strong>【3.1.3真嗣为什么要掐死明日香】</strong></p><p>这恐怕是个未解之谜了（先吐槽一下这个小节我写得好纠结），这里写一下鄙人愚见还有网上其他的主流意见，仅供参考，便于大家理解即可，剧情进行到EOE这里，几乎都是庵野秀明非道德性的show time，也没有什么所谓的正确答案了，一味的追求“正确”答案恐怕会身陷过度解读的囹圄。</p><p>让我们从EOE初号机出动之后的剧情开始分析，上一个问题已经说明了当时真嗣的心理状态是濒临崩溃的，在启动补完仪式时彻底崩溃，三观尽毁，对整个世界或者说对“其他人”是充满恐惧的，而同时真嗣的内心也正渴望被“其他人”关怀被“其他人”拯救，这时候突然出现了美里客厅的剧情，真嗣向明日香歇斯底里的求救，导演的用意很明显了，明日香代表的正是“其他人”。在整个补完过程中，本是大家一起看似美好的灵魂合体互相接受的大团圆，所有人都接受真嗣关心真嗣，可唯独明日香唱反调，而且是一反常态的绝情，拒绝接受。（明日香台词“但是，唯独是你，我绝对死都不愿意。”）之后真嗣开始掐住明日香的脖子，意图也表现的直接明了——（“其他人”）都去死吧！</p><p>美里客厅里发生的“掐脖子”这一幕是不是真实发生的争议比较大，有的认为这是真嗣的思想中的场景，并不是真实发生，更多人认为这是真实场景，是仪式开始时候真嗣的回忆。关于这段网上有详细的探讨，有兴趣的朋友可以挖掘一下，这里不再赘述，因为本文之前也说了，是为了让大家更好的理解EVA，讨论过多的梦和现实还有弗洛伊德神马的也并不是EVA的主旨，顺便说一下我个人更倾向于后者（迷之微笑脸）。</p><p>总之就是补完的最后，绫波丽（莉莉丝）让真嗣自己选择，真嗣选择放弃补完计划作为人类继续活下去，之后莉莉丝崩坏，真嗣醒来，看到了绫波丽的幻想，这个镜头很关键，通过绫波丽（莉莉丝）和真嗣的关于“梦和现实”的对话，我们可以判断绫波丽代表美好的“梦”，也可以说是“希望”（补完之后的世界，幻象消失也正好回应了当时的剧情——补完结束）。明日香代表残忍的“现实”（未补完的世界，“其他人”拒绝我的世界）。</p><p>我本来想把“梦和现实”的那段仔细讨论一下的，可是写了不少都不满意，都删掉了，偷个懒直接引用EVA研究站的一句话吧：“一个人要正视“现实”的痛苦，并最终接受它，是需要足够的勇气，并经历一个必须的过程的，而EOE这一幕则正是象征着这一点。“梦”是虚幻而美好的，从中人们可以找到生存下去的“希望”（即EOE的最后，丽对于真嗣而言的象征意义），但是“希望”必须建立在“现实”的基础之上，才能最终体现出其价值——这就是为什么EOE末尾，真嗣最后一次望见绫波丽的幻影时，是透过明日香的胸部上方望见的缘故。”</p><p><img src="https://pic4.zhimg.com/80/984ccf5f03a0ef874002f7bd3cb4a457_720w.webp"></p><p>之后整个《EVA》最匪夷所思的情节出现了：</p><p><img src="https://pic2.zhimg.com/80/0b630d9386ec8665f3a374e755f542b5_720w.webp"></p><p>补完计划的结果并不是真嗣想要的，真嗣希望的是回到原来生活的环境，有朋友，有同学，有和他越走越近的绫波丽，甚至还有老爸，一个他不怎么喜欢，但是可以慢慢习惯和改变的世界。但是现在的世界却一无所有，只有那个残忍拒绝了自己的明日香，所以真嗣感到很绝望，是的，非常的绝望。</p><p>来感受一下漫画中真嗣的台词：</p><p>“美里小姐所谓的该保护的，跟我想保护的，却不一样，我真正想保护的，结果都一一失去了。我不得不保护的，跟我拼了命保护的——这个世界，对我而言，真的是我绝对要保护而且不得不保护的吗？”</p><p>“我已经不需要朋友了，失去朋友的那种痛苦我受够了，那种痛苦，与其要我再尝一次，我宁可一开始就没有朋友。早知如此，我根本就不该来这里认识任何人，像以前啊样孤孤单单的反而好些。”</p><p>真嗣恨这个世界，恨这样的现实（明日香），恨这个世界的未来（明日香），我想，他应该也恨自己吧。要掐死明日香表达的正是真嗣的仇恨，也是真嗣懦弱性格的使然——真嗣到最后都没有成长，仍然要逃避现实。掐住明日香脖子的那一刻，真嗣是真的打算“灭绝”人类。而且恐怕他掐死明日香之后也是打算自杀的。他自我厌恶，所有的负面情绪都到了极致，最终爆发了出来。真嗣（庵野秀明）在这一刻斯坦利·库布里克，拉斯·疯·提尔灵魂附体化身为凌迟人性毫不留情残忍至极的邪神。</p><p>如果《EVA》在这里戛然而止，那么这必定是一部充满恶意的邪恶之作。因为这里真嗣（庵野秀明）的想法就是——都他妈去死吧！我也去死吧！（有意思的是同一年的夏天，也就是1997年7月，庵野秀明的老师宫崎骏导演的《幽灵公主》和《EOE》同时上映，而宫崎骏表达的主题是——活下去！既生秀明何生骏。）</p><p><img src="https://pic1.zhimg.com/80/f7c3f2270e2f339b39e1f7b8bce86800_720w.webp"></p><p>当然，庵野秀明虽然被称为痞子导演，却也没有把事情做绝——明日香轻抚着真嗣的脸庞，真嗣松开了手，哭了。而此时明日香的手和眼睛多了绷带（之前的镜头绷带没露出来，绷带的解读我放在了后面明日香的人物分析中），明日香以一句“真恶心”结束了《EVA》。</p><p><img src="https://pic2.zhimg.com/80/52a5ee68068317b54e09263b50e6f131_720w.webp"></p><p>不得不说，EOE的情节真乃庵野秀明的神来之笔，极简的镜头却让信息量得到了爆炸，各种暗示和隐喻呼应了整个EVA主题不说，最主要的是深入思考之后确实有干货，整个EOE把导演的意图表达的淋漓尽致：</p><blockquote><p><strong>面对“幸福的梦”和“残酷的现实”时，能够不被虚假而幸福的梦境所惑，正视现实的残酷和痛苦，并超越这份痛苦，最终勇敢地接受现实，承认现实，适应现实。现实并不是想像的那样残酷无情，它一样存在着“希望”在内。</strong></p></blockquote><p>翻译成大白话就是——OTAKU们，醒醒吧，走出这美好的意淫，让我们不断思考着操蛋三观的大脑休息休息，拥抱这庸俗，残忍，恶心的世界吧，拥抱残酷而充满希望的现实吧。</p><blockquote><p>另一方面也是因为在TV最后两集放送之后庵野秀明所收到的不计其数的由不满的观众所寄出的恐吓信，则几乎彻底的抹杀掉了导演本来就不太多的善意。所以在EOE中他选择将这些无法体会良苦用心的、甚至拒绝成长的观众的丑态和窘态通过真嗣的形象表现了出来加以嘲讽（真嗣被明显设计成了一个让观众有代入感的角色）。所以到此我们也能大体上判断EOE结尾处的真嗣究竟处在哪一个阶段了：旧的世界观刚被彻底否定，自己又不愿付出努力和勇气去做信仰之越，这才导致无路可退又无处前行的真嗣做出了掐人这种绝望而歇斯底里的行为。</p></blockquote><p>神来之笔，神来之笔，神来之笔。</p><p><strong>【3.1.4如此碇真嗣人设的意义】</strong></p><p>关于人物方面大家问的最多的问题就是庵野秀明为什么要设计这样一个主角——懦弱，孤独，内向。</p><p>当时的时代，一般正常的主角都是充满正能量的，风格化很强的。就算是开始很弱，但目的永远是明确的，在普通的动画中，是不会出现碇真嗣这样的角色的，更别提当主角了，因为他完全没有成长。对比常人所理解的动画作品的思维定式——主角的成长，《EVA》更注重贯彻与体现导演的自我意识。</p><blockquote><p>比起其他普通的鸡汤动画，《EVA》描述的却是自闭的人打破自我、寻求与外界接触的过程。它并没有鼓吹压抑个人意志，让人去服从社会的价值观和准则。所以《EVA》的人物并没有像其他的青春题材作品一样，去表现人物的成长，相反却在描写了真嗣等人的“拒绝成长”，同时也在公然地与传统价值观所要求的“社会需要的人才”对抗，甚至可以说毫无妥协和迁就之意。</p></blockquote><p>没错，《EVA》就是这样的毫无鸡汤。</p><p><strong>【3.2明日香】</strong></p><p><img src="https://pic2.zhimg.com/80/4701e079d9447c70d0baae0f445b7d79_720w.webp"></p><p><strong>【3.2.1并不傲娇的明日香】</strong></p><p>一提到明日香大家想到的应该都是“傲娇”这样的词，百度上也说了：明日香与《龙珠》中的“贝吉塔”和《幽游白书》中的“飞影”合称“动漫三大傲娇始祖”。有意思的是她的著名台词“あんたバカ？”（你白痴啊？）曾一度在日本校园中十分流行。</p><p>正好我是一个《龙珠》骨灰级粉丝，《幽游白书》虽然我也看过，但我还是觉得傲娇始祖是贝吉塔无疑。因为和贝吉塔比起来，明日香的内心脆的跟纸一样，明日香的傲娇是精神残疾和病态心理的伪装结果，有点像战争电影里经常出现的“创伤后反应综合症”。</p><p>明日香的本质更像是另一个版本的碇真嗣，像一个“完全相反”的真嗣，明日香表现的逃避也和真嗣不一样，她是积极做好其他事来逃避，死不承认自己的懦弱一面。外在的真嗣表现的很“女人”，而外在的明日香则表现的很“男人”。性格完全相反就不用说了，内心本质上也完全不同：真嗣是害怕孤独，明日香是追求自我实现——拥抱孤独。和其他人的互动方面，大家似乎都很在意真嗣，却很少有人试图接近明日香的内心（不知道大家注意到没，老碇从来没和明日香有过一句对话）。 <strong>可怜的明日香用傲娇的伪装把自己保护起来以获得安全感的同时也隔绝了外界的温柔，明日香是绝对的，纯粹的，孤独之人。</strong> 这里引用一句明日香的另一句著名台词吧：“我要自己一个人活下去。”</p><p>和其他主角不同的是绫波丽，美里都存在母性的爱。只有明日香没有，完全是类似恋人的身份，有点像我们人生中又爱又恨的另一半的感觉。这里虽然说是类似恋人的身份，而且明日香最后隐喻的是夏娃，但希望大家还是不要问我”明日香喜不喜欢真嗣”这样的问题了，因为这也是未解之谜。（顺便说一下，我倾向于喜欢。）</p><p>EOE的最后，真嗣要掐死明日香，而明日香却抚摸这真嗣的脸庞，这个举动也证实了她的成长：在重新找回自我之后，已经能肯定自己的存在，她不再需要依靠别人的肯定来补完自己，她变得冷漠，对真嗣只剩下可怜，虽然真嗣要掐死自己，可是看着真嗣的脸，她就像看到了曾经的自己，此时趴在她身上的真嗣不正像当时趴在加持身上的自己么。如果往好一点说：明日香抚摸真嗣脸庞的这个举动，她是想把曾经被自己隔绝了的外界的温柔还给当初的自己。</p><p>不管怎么说吧，真嗣倒最后都没有成长，而明日香最后成长了（对比现实社会也是普遍女人比男人更早成熟），只是这成长的过程未免太过残酷，成长的滋味也是阵阵酸楚，<strong>明日香就像一颗洋葱，剥开一层一层的面具，里面尽是辛酸和眼泪。</strong></p><p><strong>【3.2.2可怜的悲剧】</strong></p><p>如果搞一个动漫中最可怜主角排行榜，明日香不名列前茅我第一个不服。</p><p>还是那句话：性格缺陷赖童年，这简直是一定的。早些年的实验失败，让明日香母亲的部分灵魂融入二号机而精神错乱，明日香童年的一切行为都是为了赢得母亲的注意，可是在被选为EVA驾驶员欣喜若狂地要向母亲证明自己的时候，目睹的却是母亲的自缢，之后明日香永久开启了“自我实现”模式。</p><p><img src="https://pic2.zhimg.com/80/727a7ffcb56b6f8bd020dffd467afd45_720w.webp"></p><p>（注意图右边有倒影，是明日香妈妈抱着洋娃娃。）</p><p>明日香是有3&#x2F;4的德国血统，1&#x2F;4的日本血统的混血儿，混血不只颜值高，她同时也是一个神童，而且在青少年时即获得大学学位，当然这并不是浪漫的偶然——明日香其实是试管婴儿，类似《千钧一发》里的基因选择，是一个被挑选出来的人。漫画中被真嗣问到爸爸的问题，用明日香自己的话说就是“我的爸爸就是妈妈在精子银行买的精子。”至于没有爸爸会不会寂寞，明日香的回答是：“我最幸福的事，就是得到认同。”</p><p>虽然天生很优秀，但是在对抗使徒的战斗中存在感却最低，同样是“被制造出来”的人，绫波丽在战斗中的表现都比明日香要强，明日香除了第一次对战鱼天使，其他战斗中都是5号位角色（打酱油的）。</p><p><img src="https://pic3.zhimg.com/80/5fbed5aa92d881ea4e0a3f2325c97c02_720w.webp"></p><p>真正的明日香，是一个内心自卑却不愿意承认，企图用自大来掩盖这一点的少女，但她显然不是一个很善于伪装的人，另一方面由于自己本身的优秀，她的自大看上去更像是骄傲，可惜外表的傲娇内心却脆弱至极，“看看我”的要求没有被任何人承认。而被自己瞧不起的“木偶”丽，和“白痴”真嗣却存在感十足，更不能忍的是高冷绫波丽还慢慢对真嗣有了好感，让明日香本来就脆弱敏感的内心产生一种吃醋嫉妒自卑但是又不愿意承认并持续逞强导致心理状态直线下滑同步率下降最终又被使徒精神攻击真实内心暴露导致精神崩溃卧床不起变成了洋娃娃一般（好长的一句话），而众所周知明日香讨厌像洋娃娃一样活着，有一集是明日香大姨妈来的时候在卫生间抱怨“为什么女人就一定要受这种罪！我以后是绝对不会生小孩的！”讽刺的是明日香最后却正是成了未来的人类母亲（夏娃），就像成长中我们都变成了那个当初最不喜欢的自己。</p><p><img src="https://pic4.zhimg.com/80/8d56f03592bbac7df37e7411c5c2a78b_720w.webp"></p><p><strong>【3.2.3孤独的战士】</strong></p><p>在EOE的战斗中，Seele进攻NERV时，美里为了救明日香把她放进了二号机并藏在了湖底，就像明日香的处女战一样，都是在水下，而且这个镜头更是别有用心：与其说是二号机在湖里的苟且，倒不如说更像是羊水里一个孕育中的胎儿。</p><p><img src="https://pic4.zhimg.com/80/e17d2ebaa81b78cf23a1093ec795041f_720w.webp"></p><p>随着明日香对生存的挣扎越发强烈，感受到了二号机（明日香母亲）的即使死了也要保护女儿的强烈意志。伴随着二号机从水中和处女之战一样英姿飒爽的一跃而起，明日香脸上也再次流露出久违的自信和快乐的笑容，我们知道她终于解开了这段幼年的心结，自己的初衷终于得以实现，明日香觉醒了，华丽的干掉第一个量产机时，沐浴在鲜血中的明日香也回归了母语，说出了德语Erst（第一个）。种种迹象表明——这不仅是一个的钟灵毓秀新生儿之出世，更是一个脱胎换骨的战士之涅槃，同时也呼应了EVA多次出现的“轮回”主题，我曾见过很多主角霸气侧漏的出场，但是分析了明日香的经历再看这个出场，我必须给满分。</p><p>可是老天就是这么不公平，初号机的暴走各种拯救世界所向无敌，明日香的最后之战却未能如愿1V9，我也曾见过很多主角的最后一站，或惨烈，或悲壮，各种猎奇场面像一场场视觉饕餮盛宴层出不穷，但我从见过一个美少女的最后一站竟是如此血腥残忍令人发指（被穿刺肢解分尸剥皮吃肉），这个最终之战，把我吓尿了。</p><p>此刻在我脑海里莫名其妙的萦绕着鲁迅先生的这句话：真正的战士，敢于直面惨淡的人生，敢于正视淋漓的鲜血。</p><p><strong>【3.2.4既定的宿命】</strong></p><p>明日香的成长之旅伴随着身份的不断变化，可怜的悲剧女孩，孤独的战士女人，以及这小节要讲的既定的命运——未来的母亲。（此段关于明日香的女性身份参考自<a href="https://link.zhihu.com/?target=http://tieba.baidu.com/p/2513098405">魂之轮回–明日香的补完之战_eva吧_百度贴吧</a>《魂之轮回–明日香的补完之战》）</p><p>细心的小伙伴应该都注意到了明日香最后抚摸真嗣的镜头，多了眼罩和绷带，大家都知道眼罩和绷带是绫波丽的特有标志，这里把这样独有的元素给了明日香，隐喻了明日香将代替绫波丽（莉莉丝）成为新的人类之母（夏娃）。（《旧约》中正是如此）</p><p>明日香和绫波丽的对手戏并不多，印象比较深刻的就是二人在电梯里那集，过了好长好长的静止镜头之后，绫波丽对着沉默的明日香说了这句话——“如果不能敞开心扉，EVA是没法动起来的。”实际上绫波丽是给了明日香一个“成为母亲的可能性”的暗示，也可以说是教明日香怎么成长，最后虽然是明日香扇了绫波丽一耳光，可是被教育的却是明日香。</p><p>如果脑洞再大开点，明日香最后说的“真恶心”这句话，也正是真嗣最开始驾驶EVA泡在橙汁里说的话，真嗣以这句台词开始了EVA的故事，而明日香以这句台词结束了EVA的故事。</p><p><img src="https://pic3.zhimg.com/80/486c41c9d2a59f55a784f4557736013a_720w.webp"></p><p><strong>【3.3绫波丽】</strong></p><p>按照惯例这里应该先放一张女神的照片，其实本来绫波丽应该放在明日香前面来讲的，不过在这之前我还是不得不再吐槽一下这段我真的是拖了好些天才写出来，因为绫波丽这个人物真的是太难写了，所以索性就放在明日香后面了。众所周知绫波丽是“三无少女”（无口、无表情、无心，也就是沉默寡言、缺乏面部表情，难以被窥知心理的内心封闭的少女）的鼻祖。每集的台词就那么两三句，真是少得可怜，但是这个前无古人的角色又贯穿了整个《EVA》剧情的始终，而且还像是一种鬼魅般神秘的存在。关键绫波丽主动表现自己人物特性的场景太少了，都是通过真嗣或者其他事件来展开的（和明日香完全相反），加上庵野痞子的手法还他喵很隐晦，在细节和暗示上做到了极其变态的程度，以至于不深入分析一次看懂的观众根本不存在，在绫波丽这个人物上，导演完完全全没考虑过观众的感受，所以说想要深入分析好绫波丽真的是非常非常费脑细胞的一件事，可以说读懂了绫波丽，也就在一定程度上看懂了《EVA》。</p><p>好了不吐槽了正文开始。</p><p>如果搞一个动漫中最美女神排行榜，绫波丽不名列前茅我第一个不服。（这里的“美”并不是单纯指外表，我确实是想了很多词来形容丽，最后还是觉得“美”最合适。）</p><p>不同于现在，当时对克隆人&#x2F;人造人&#x2F;机器人这类的角色人设是有，但是对人物性格的塑造和对角色自我意识的分析，绫波丽绝对是里程碑式的存在。绫波丽并不是传统意义上的人类，她是碇唯的DNA+莉莉丝的灵魂组成的人造人（母亲+恋人的属性同时出现在一个角色身上应该还是第一次），说句不好听的，是被制造出来当作工具使用的。当然，保险起见工具不能只制造一个，所以绫波丽是有很多个的。一号绫波丽在还是个孩子的时候被赤木直子博士掐死了，三号绫波丽是子宫使徒交战之后出现的，完成补完计划，最后变成EOE中的大白绫波丽（莉莉丝），三号之后的绫波丽都被律子在培养槽里销毁了，所以我们这部分着重讲一下有血有肉的二号绫波丽和超然物外的三号绫波丽。</p><p>先来个裸照吧。</p><p><img src="https://pic1.zhimg.com/80/db49f099dd27dbb06a86173619889930_720w.webp"></p><p><strong>【3.3.1二号绫波丽的成“人”之路】</strong></p><p>有关绫波丽的一切变化都几乎都和真嗣有关，光写绫波丽的话只会写成学术文，这里我就不再不懂装懂地谈自我意识怎么形成的了（有兴趣的可以去看弗洛伊德啥的），所以让我们通过丽和真嗣的一些事来走进绫波丽吧。</p><p>绫波丽给人的第一印象是一个身受重伤却不顾自己安危依然服从命令的机器人形象，并成功让真嗣“心软”，去驾驶初号机。之后有关绫波丽的性格表现也很多是通过真嗣来展开的，比如真嗣开始对绫波丽为什么总是自己一个人而感兴趣（学校场景，游泳课那段）来表现绫波丽的神秘，日常生活好像和她毫无关系。还有真嗣嫉妒绫波丽和老碇走的近（在EVA驾驶室中偷窥丽和老碇的谈话的场景），平时三无的丽和老碇却很是亲切，因为此时的她心中在乎的只有老碇一人。绫波丽的住处都是一模一样的一排楼，这里暗示她是个复制人。</p><p><img src="https://pic4.zhimg.com/80/ec26f5c1c9f1d5c829c947cb9f1747fb_720w.webp"></p><p>丽毫不避讳裸体，比起被袭胸，她在意的只有老碇的眼镜是否损坏。</p><p><img src="https://pic1.zhimg.com/80/91c5415625b369260615b05db7fa3440_720w.webp"></p><p>而真嗣与丽第一次“谈心”则是在雷天使战斗前夕，真嗣问丽：“绫波为何要驾驶这东西？”丽的回答是：“因为羁绊。”这里的羁绊当然指的是和老碇的羁绊，此时的绫波丽依然是洋娃娃一样的存在，就像一个机器人知道自己的程序是被写好的一样，她被制造出来的意义就是为了完成老碇的计划，生命中唯一在乎的就是老碇对自己的关爱。这也是丽第一次通过自己表现人物性格——“如果不做EVA驾驶员，或许我就会变的一无所有，那不就跟死没什么两样么。”</p><p>其实此时的绫波丽在本质上和真嗣是一样的，都是内心空洞的。表面上乖巧老实，实际上什么都无所谓，无精打采一直以来，她只不过看破了红尘，装作活着的样子罢了，她也知道即使死了也还会有另一个自己出现。</p><p><img src="https://pic3.zhimg.com/80/6728a88b1e57db9aa4c14e799fd16862_720w.webp"></p><p>一种无力感，宿命感让绫波丽本就冰冷的外表上又披上一层悲伤的面纱，就像丽登上零号机之前用毫无感觉的口气说着让人悲伤的告别：“再见。”</p><p><img src="https://pic2.zhimg.com/80/71031cb7fd4065c2e4b9f936323635a9_720w.webp"></p><p>仿佛看破了生死一般，拥有着每一次见面都可能是最后一次的觉悟，丽在战斗中“舍命陪君子”的战斗方式让人感觉她比真嗣“更一无所有”。</p><p>但是通过雷天使的战斗，碇真嗣开始走进了绫波丽的内心，真嗣和老爸如出一辙的强行打开插入栓之后，出现了《EVA》中最为经典的场景——“绫波丽的微笑”。</p><p><img src="https://pic3.zhimg.com/80/07db1892269ec86417f95233d92373e2_720w.webp"></p><p>同时这也是《EVA》中极少数正能量场景之一，看到如此漠视自己生命的丽，即使是懦弱的真嗣也会心生怜悯：</p><p>“一定要活下去，这是我们曾经的约定。”</p><p>“只要活着的话，总有一天，一定会觉得能够活着是一件挺不错的事。虽然距离这一天或许还很遥远，不过在那一天来临之前，我们还是活下去吧。”（那一天也许暗示的就是人类补完计划的那一天，此段来自漫画版真嗣的台词。）</p><p>这就是为什么大家在各种论坛里看见类似“三大经典动漫场景”或者“评十个动漫中最美场景”的帖子中都会有这个——绫波丽的微笑。经常被《EVA》粉丝称道的就是“世界上只有两个人的微笑最值钱，一个是蒙娜丽莎，一个是绫波丽。”</p><p>绫波丽的微笑可以说标志着她真正成为“人”的第一步，换个角度也可以理解为她背叛老碇的开始，在这之后真嗣在丽心中的位置越来越重要，虽然明日香强行出现要转移真嗣注意力，可之后真嗣还是去刻意的去了解丽。</p><p><img src="https://pic3.zhimg.com/80/a3f0904c66bd464260aa944b2c06f2d6_720w.webp"></p><p>（注意这里的镜头表现的是明日香的视角）</p><p>在学校场景中，真嗣说丽拧抹布时有一种妈妈的感觉，这里不只是为了单纯的暗示绫波丽的母性身份（莉莉丝+真嗣妈妈）。个人认为更多的是表现真嗣对丽的感觉吧——就像一种像妈妈一样的恋人的感觉。</p><p><img src="https://pic2.zhimg.com/80/a1d80401e48236a79fd564e3626130e1_720w.webp"></p><p>后来明日香的台词也暗示了丽妈妈的身份：</p><p><img src="https://pic1.zhimg.com/80/af4d91a87e82febd358ceec0b20dbbd0_720w.webp"></p><p>不过大家不要误会，我认为这时的真嗣不能完全认为是俄狄浦斯情结（恋母情结），怎么说呢，感觉就像一些男孩谈恋爱时会从女友身上寻找母亲的影子一样，而真嗣从小就母爱缺失，再加上丽是碇唯的DNA制造出来的，外表上和真嗣妈妈长的很像，虽然真嗣不记得妈妈的样子，但是妈妈的形象一直存在于真嗣的潜意识之中，而且丽的形象正如同那种只可远观而不可亵玩焉的存在，同时又是仿佛兮若轻云之蔽月，飘摇兮若流风之回雪的感觉。她有一种初恋+暗恋结合的最美感，就是那种哪怕不会与她交往也会单方面付出的感觉，所以丽对真嗣的吸引力可见一斑，而真嗣对丽的吸引力也在逐日提升，只是丽不懂怎么表达罢了（比如去医院看望真嗣）。</p><p>在夜使徒的作战中，初号机被吞噬，丽也因为明日香说“风凉话”而与明日香发生争执（明日香表示好冤枉，人家明明也是担心真嗣的，只是豆腐心刀子嘴而已），这对一个很少对外表现情绪的丽来说是很反常的，而此时丽捍卫真嗣在心中的形象就像开始给了真嗣一耳光来捍卫老碇在自己心中的形象一样。</p><p>感受一下丽的台词：“在我的心里总是有个空荡荡的部分，就像人偶一样，一点都不实在，那个空洞有时会让我害怕，不安，我一直觉得，我可以用想着碇司令这件事来填补那个空洞，可是，不知道从什么时候开始，那里有了碇同学了。”</p><p>可以说真嗣在绫波丽的成“人”之路上扮演着重要的角色，让丽有了许多的第一次，比如第一次微笑，第一次脸红，第一次谢谢，第一次反抗命令等等，越来越人性。</p><p><img src="https://pic1.zhimg.com/80/a9e3a2c973cb5b0f40d1310af484cfdc_720w.webp"></p><p>还有最重要的，随着丽越来越喜欢真嗣，她也开始思考自身的存在价值。大家都懂的，一旦跳入哲学这个大坑，就注定要悲剧。没错，绫波丽是整个《EVA》中提出哲学问题最多的角色，其他问题就不一一赘述了（比如人是什么？我是什么？），这里讲一下丽反复提出的问题吧（我相信屏幕前的小伙伴和我一样都曾经提出过这样的问题，当然这个问题是没有固定答案的）——“我是谁？”</p><p>在与子宫使徒的战斗中，丽给出的答案和我的恰好基本一致：“我就是我，我是由积累的时间和与别人的交流而成为我的，是实质，不是假的。因为有跟别人的交流，所以我才成为现在的样子。随着与别人的交流和时间的流逝，我的心的形态渐渐改变…那就是从前一直被称为绫波丽的，也是今后不断地成长的绫波丽。”</p><p>来自<a href="https://link.zhihu.com/?target=http://waitbutwhy.com">http:&#x2F;&#x2F;<strong>waitbutwhy.com</strong></a>（这个网站真的好有趣，强烈推荐）的一篇文章里有很形象的比喻：我其实不是一个事物，而是一个故事，一个不断发展的主题。我不是一组大脑数据，我是一个内容一直在变换的数据库，不断成长和更新。我不是一组原子，我是一套告诉这些原子该怎么组织的指令。（当然也有其他“负能量”的答案，比如：每个人几乎每天晚上意识都会消失一阵子，之后重建起来，今天的你已经是一个全新的你了，只不过仍然记得昨天的事情而已，连续性其实只是一种幻觉。这里推荐一本书《自私的基因》。）</p><p>这里扯了这么多强行提高文章逼格的东西看似跑题，实际却反映出了二号绫波丽成了一个真正有血有肉的“人”——肯定自我的存在，肯定自我意志。</p><p>而丽为什么反复提出这样的问题，正是源自她内心深处的矛盾——碇源渡给自己的“命运”与“真嗣的感情”（自己的自由意志）之间的矛盾。虽然屈服于“命运”是二号绫波丽一直以来的普遍选择（偶尔违反命令往往都和真嗣有关），但是通过与子宫使徒的战斗，丽被使徒一语道破内心——“这就是所谓的‘寂寞’，那是浸满了悲伤的，你自己的心啊”，丽也意识到自己灵魂深处的真心是“和真嗣在一起”。</p><p>在她心底深处由真嗣激发的“真正宝贵的东西”，始终没有抹去，而这一感情也在二号绫波丽的最后时刻，以“眼泪”和“自杀”这两种最为激烈的形式绽放，虽然依旧是红白蓝冷色调的外表，但是此刻的丽，竟然爱得如此炽热，为心爱的人而死，并且是完完全全是出于她自身的意志，遗憾的是为了保护自己刚刚得到的一份无比珍贵的“羁绊”，却又不得不放弃这份“羁绊”。</p><p>悲伤，常伴丽的左右。</p><p>二号凌波丽最后做出了选择——和使徒同归于尽。在丽的生命最后一瞬间，她看到了老碇，个人认为这里可以理解为“告别自己的命运”吧。而在漫画版中，丽最后的微笑更添一份对老碇的感恩，歉意，以及一种心灵上的诀别。在死亡的同时得到自我价值实现，通过死亡来感受活着，真是典型的日本美学。</p><p><img src="https://pic1.zhimg.com/80/5300487772e9aef2c0bb055eb037b078_720w.webp"></p><p><strong>二号绫波丽就像经历了一个完整人生的人——懵懂的开始，自我的矛盾，途中的彷徨，毅然的抉择，炽热的感情，无悔的遗憾。</strong></p><p>生而为人，昙花一现，她很满足。</p><p><strong>【3.3.2三号绫波丽的成”神”之路】</strong></p><p>三号绫波丽是子宫使徒之战之后出现的，她也意识到了自己是第三个。</p><p>如果说老碇对二号丽还是有复杂的感情的，那老碇把三号丽则完全看作是工具。三号丽的最初最明显的变化也是对老碇的感情否定，回到家卸下了绷带（三号丽是“新生”的，这里绷带当然是伪装用的，卸下了绷带也可以理解为暗示丽卸下了伪装，提示之后就是丽心里的真实想法）：把二号丽（也可以说曾经的自己）非常珍爱的老碇眼镜摧毁。但是三号丽为什么还留在老碇身边服从老碇呢，因为她仅仅是“渴望回归虚无”而已，也可以说是莉莉丝的灵魂逐渐觉醒了吧，与其说她对老碇已经没有了曾经的依恋，倒不如说憎恨老碇也不过分。</p><p>在得知丽还“活着”的时候，真嗣迫不及待地去医院看望丽，可是丽又恢复了冷漠，当时我还以为丽对真嗣的感情没有“上传备份”，不禁感慨物是人非，后来发现，丽虽然没有子宫使徒之战的记忆，但她并没有忘记对真嗣的感情，再回想当时，她之所以对真嗣突然冷漠其实是在逃避自我，她只是继续思考着，纠结于自己的命运，意识到自己和真嗣注定不是一种存在，和二号丽开始的感觉不一样，可以说是莉莉丝的使徒本质使然。从丽这一段很重要的心中独白可以看出来：</p><p>一号丽：“你害怕自己会消失，不再在这里。害怕自己从大家心中消失。”</p><p>三号丽：“怕？我不明白。”</p><p>一号丽：“只属于自己的世界也会消失。”</p><p>一号丽：“自己会消失啊。”</p><p>三号丽：“不，我很高兴。因为我想死，我想要的是绝望。”</p><p>二号丽：“但是不行，我无法回归于无，那个人不让我回去。”</p><p>三号丽：“他还不让我回去吗。”</p><p>二号丽：“因为那个人需要我，我才会存在的。”</p><p>三号丽：“但是已经结束了，我不再被需要了，那个人把我舍弃了。我曾是那样盼望着这一天能够到来的……可现在却，很害怕。”</p><p>三号丽意识到二号丽作为“人”和真嗣在一起的羁绊自己不曾拥有，成“人”之路注定不属于自己。</p><p>不难看出，她的矛盾也从老碇给自己的“命运”与真嗣给自己的“自由意志”变成了自我两种自由意志的冲突——自己渴望“回归莉莉丝”与“和真嗣在一起”的冲突，这也是丽对自己价值的终极思考——即“我是为了什么而存在”。</p><p>这样的矛盾一直持续到最后的最终教条区，老碇要通过三号丽来完成自己的意愿——亚当和莉莉丝的禁忌融合：老碇将手伸入丽的左胸，获得丽的心（可以理解为莉莉丝灵魂的核心），然后向下深入丽的小腹，是表现将亚当与莉莉丝在丽的子宫里孕育（这段剧情看似很色情，实际却意义非凡）。</p><blockquote><p>之后出现了出现了标题：真心为你（“まごころ、君に”），迎来了《EVA》剧情的最大高潮。由于翻译问题，此处的“真心为你”表达的意思其实是“给你，我的真心”，并不是“为了你”的意思。而“给你，我的真心”不只是表面上的献出了自己，更是三号丽心中对真嗣的告白。</p></blockquote><p>唉，催人泪下。</p><p>最后的三号丽听见了真嗣的呼唤（虽然真嗣本意并非如此，真嗣当时心理正是扭曲的巅峰，被明日香吓到了而已），确定了自己的价值，是为了真嗣而存在，所以也当然的直截了当“背叛”了老碇，无论老碇如何苦苦跪求。</p><p><img src="https://pic4.zhimg.com/80/5a813a73b6dc2df7e661b14981c0b6df_720w.webp"></p><p>可是当时去见真嗣（也可以说是救真嗣）的唯一方法就是通过回归莉莉丝，而回归莉莉丝也就意味着与真嗣永别，因为以后可能会有莉莉丝，而不再会有绫波丽，就算丽也能作为莉莉丝的意识，但是丽的心中肯定是希望是以“绫波丽”的身份与真嗣在一起的，所以说此乃真正的永别，丽的心里是绝望和悲伤的。她虽然没有二号丽最后时刻的记忆，却和二号丽做了一样的决定——“再一次”为真嗣而死，如此可憎的宿命轮回，真是让人唏嘘不已。</p><p>“我回来了”</p><p>“欢迎回来”</p><p><img src="https://pic4.zhimg.com/80/e7abcb175e3a74a6d5ecdd451c2e27d3_720w.webp"></p><p>在高清大图中能看到此时的丽眼中是含着泪水的，是的，真嗣又让丽“第一次”流泪了。这样的抉择真的是一种莫大的痛苦，救自己爱的人的代价是牺牲自己、不能和自己爱的人在一起，即使给你我的真心，即使给你我一切的一切。</p><p><strong>人世间最悲伤的事莫过于此。</strong></p><p>如果说二号丽是感情不断成长的少女，那三号丽就像一个看破命运和世间沧桑的老者，在矛盾中思考着迷茫着，最后如醉方醒，含着热泪决绝而去。</p><p><strong>【3.3.3大白绫波丽的真”心”为你】</strong></p><p>随着三号绫波丽的“真心为你”，作为“人”的绫波丽已经不在了，取而代之的是完整的莉莉丝复活了，而绫波丽刻在骨子里作为人的意识依然存在，可以把大白绫波丽理解为依然具有绫波丽意识的莉莉丝。（比如开始莉莉丝的眼睛是开始是黑色的，真嗣呼唤了“凌波”之后，变成了红色。）</p><p><img src="https://pic3.zhimg.com/80/c249bd725239006252e6a789784a5f3e_720w.webp"></p><p>随着《来吧，甜蜜的死亡》响起，丽（莉莉丝）迎合着真嗣的想法（即使是扭曲的消极的想法）发动了第三次冲击，丽就像黄泉路上的领路人，让大家都变成了橙汁，死前都看见了属于自己的补完对象，在自己一生最憧憬的存在的幻觉中死去（除了明日香，可见明日香是有多孤独）。在极其壮观而诡异的仪式和梦与现实的最终讨论之后，欢迎来到幸福的世界——LCL之海。</p><p>可是这并不是真嗣想要的世界，整个LCL场景中，真嗣手中一直攥着美里的十字架正影射了他内心的真实想法——回到过去的世界中。</p><p>真嗣的心理在EOE中已经三观尽毁，在认为自己已经不再被这个世界需要时，丽用实际行动接纳了真嗣，并告诉他现实并非他所想，伴随着出现了这个很有争议却信息量很大的场景。</p><p><img src="https://pic3.zhimg.com/80/5fa27480af3654dfaa573898272645c6_720w.webp"></p><p>这里并不是单纯表现丽“接纳”（无论是外表还是内在）了真嗣；这更是“需要”与“接纳”的结合（男需要，女接纳）；也正是副标题（I need you）与标题（真心为你）的结合。</p><p>从这三方面看这个很色情的场景，真他喵完美啊。</p><p>当然真嗣是拒绝补完的，真嗣握着丽的手说“谢谢”也并不是他突然顿悟了成长了（最后要掐死明日香就是证据）。真嗣在心智已经极端扭曲的情况下，他只是感谢丽是唯一主动接纳自己的人。所以当真嗣问道在“我心中的你们（丽和渚熏，莉莉丝和亚当）到底是什么？”，丽也在这里亲口道出了自己在《EVA》中的象征意义——是希望。</p><p><img src="https://pic1.zhimg.com/80/5e1e203daae32c2c3a9a454e9ace43f4_720w.webp"></p><p>真嗣是丽的一切，丽只是真嗣黑暗世界中的一点光。</p><p>最后的最后真嗣想回到原来的世界（I need you，丽），大白丽为了完成真嗣的意愿，崩坏了自己的形体，与二号丽和三号丽一样，选择了为真嗣而死（给你我的真心，真嗣）。</p><p><strong>从这三个绫波丽与真嗣的羁绊来看丽对真嗣的感情——最深刻的爱，莫过如此。</strong></p><p><strong>【3.3.4绫波丽的影响】</strong></p><p>绫波丽被赋予的属性是开创性的，而恰好《EVA》中对丽的人物塑造无论是从手法，细节，还是其他方面的描写都达到了巅峰。“三无”这个属性也越来越多的被模仿，更重要的是，像“三无”这样开创性的属性也越来越多的出现在后来的动漫作品中，如果往大了说，绫波丽的出现，让动漫界的角色更加丰富多彩。</p><blockquote><p>绫波丽已经不再仅仅只是《EVA》的女主角，她树立了整个日本动漫界女性角色的标杆，她是ACGN世界的一个传奇，一个几乎永远不可超越的神话，一个自诞生日开始就凭借每集不到三句对白就可以连续蝉联日本多年动画人物调查的NO.1的宝座超人气偶像。没有一个女性角色可以真正取代她的位置。（此段来自腾讯评论）</p></blockquote><p><strong>【3.4葛城美里】</strong></p><p><img src="https://pic2.zhimg.com/80/06fa870201eea67f4cdc87c7b43cd141_720w.webp"></p><p>大家一定会好奇我为什么会放上这样一张图，因为美里的截图一般都是以表情包的形式存在。</p><p><img src="https://pic2.zhimg.com/80/4268139452bba828beb263b3992c3f95_720w.webp"></p><p><img src="https://pic2.zhimg.com/80/b4f5b28596ff83a8f6d2f7403fcac57d_720w.webp"></p><p>但是和明日香不一样，上面这些表情包并不是伪装，和第一张图一样，都是是真实的美里自己。美里有一种精神分裂的感觉，早年失语症3年没说话之后突然性格大变，成了特别活泼开朗粗枝大叶豪爽女汉子，根据我自身的经历与感想，我的理解是“有的人在思考了很久之后会突然决定做一个和从前完完全全不同的自己”，而且内心深处“对曾经自己的思考”也没有完全舍弃，有一种“完全不同的两个人却合为一体”的感觉。</p><p>美里其实是第二次冲击的南极考察队唯一生还者，她的父亲在冲击爆发的时候把唯一的救生艇让给了她，自己胸前的伤疤和父亲留下十字项链就是那时留下的全部东西。随后美里为南极打捞队所救，后回到日本。年幼的美里患上失语症，三年间没有说过一句话。随后就如赤木律子所说，重新开口的美里仿佛是想把三年间没说的全部说回来，变成了一个十分聒噪的人。</p><p>童年的悲惨经历可谓比真嗣更胜一筹，但是美里走出来了，所以她也是《EVA》中少有的“成人”的代表。至于她那3年究竟在思考些什么，我们不得而知，但是从剧中的线索可以看出，美里和真嗣很像，都恨着自己的父亲，可是最后美里的父亲却救了自己，让美里对父亲有一种爱恨交织的复杂感觉，父亲不可原谅的同时又让自己感动。或许她已经原谅了父亲，或许她没有勇气原谅父亲，又或许她是没勇气承认自己已经原谅了父亲，美里变得无法解释自己，所以干脆让这些统统抛在脑后，选择变成完全不同的另一种人。</p><p><strong>【3.4.1美里与加持】</strong></p><p>除了“有思想有能力”这方面（工作方面的出色表现在剧中有目共睹，这里就不再唠叨了），表现美里是“成人”的还有另一个角度——性。</p><p>首先是美里和加持，他们交往的时候，她和他可以在床上待一个星期什么也不做（除了做爱），好像美里长久的空虚爆发了一样，美里也在恋爱中逐渐察觉到自己对加持的感情其实是在寻找父亲的影子，她只是喜欢和他上床而已，只是追求这种熟悉而陌生的安全感罢了。所以她单方面选择了分手，和加持分手后再次相遇也可以互相安然上床，也反映出美里“成人世界”的成熟和坦然，或许美里和很多在各个路口迷茫的成年人一样吧：性，是她用来逃避的常用手段。</p><p>至于美里到底爱不爱加持，我认为是不爱的。加持对美里来说更像是可以上床的蓝颜知己一样复杂的存在吧。</p><p>不得不提一下美里和加持走夜路的场景真的是非常非常经典（再对比一下现在的偶像剧情节，真是弱爆了）：</p><p>加持：“年纪都不小了，别像个小孩子一样嘛，葛城你都穿上高跟鞋了，时光的流逝真是好快啊。”</p><p>美里：“加持君，我变了吗？对不起，那时我单方面的要求分手，我还说喜欢上了别人，那是——骗你的。加持君你很像我的父亲，我……想在其他男人的身上寻找父亲的影子，当我发觉这点时……我好怕。这只是为了逃避，我只是想从“父亲”这个咒缚下逃避而已……和真嗣一样，都是胆小鬼，而且我还是个只会在需要时才想依靠男人的狡猾女人，或许我那时候就是在单纯的利用加持君罢了。”</p><p>加持没说什么，只是吻了上去。</p><p><img src="https://pic2.zhimg.com/80/ec2aec75edb68aabce9fd9d64ef70ac1_720w.webp"></p><p>美里的高跟鞋虽然从手中掉落了（卸下了成人的伪装），可是她的手却没有抱上去，因为美里心里已经明白，她和加持不会幸福的在一起。</p><p><strong>【3.4.2美里与真嗣】</strong></p><p>美里对真嗣的感情是什么样的？不好说，可以肯定的是美里是爱真嗣的，只不过这种爱表现的很隐晦，也很复杂。</p><p>在初号机被夜使徒吞噬的时候，真嗣看到了一位长发的妈妈，不用多说，长发妈妈明显是指的是美里，而真嗣被救出来第一眼看到的也正是歇斯底里害怕失去自己的美里。</p><p><img src="https://pic2.zhimg.com/80/0ebc0fb2a9fc6e489805c3f511b05195_720w.webp"></p><p>在生活方面美里对真嗣的关心和照顾，以及在战斗之中对真嗣的关切体现得很明显，而且主动帮真嗣走出困境，他们的关系已经从最开始的同事上下级逐渐变成姐弟一样的家人，但是这种姐弟关系并不是一直单纯，美里对性的开放也让她和真嗣的关系暧昧的很。在二号丽死去的时候，真嗣很低落至极，美里更是直接对真嗣进行了性暗示。</p><p><img src="https://pic3.zhimg.com/80/0a97f790b62b0b478472fcee8d83a3a6_720w.webp"></p><p>美里：“真嗣，我要开门了。”</p><p>真嗣：“美里小姐，我哭不出来。明明感到悲伤，却哭不出来。”</p><p>美里：“真嗣，我现在能做的，只有这些而已。”</p><p>真嗣：“别这样！别这样，美里小姐。”</p><p>美里：“对不起。”</p><p>美里（自言自语）：“他应该很寂寞才对，难道是害怕女人吗？不，他是害怕与人接触。”</p><p>美里：“PENPEN，过来~”</p><p>美里：“原来如此，不管是谁都可以，真正寂寞的人是我自己。”</p><p>这个场景极简却很富有情色意味（比如那个邪恶的椅子），不只是表现了美里对真嗣的复杂感情，还有美里对自我的悲观逃避，虽然表面上看似自己说自己是“不管谁都可以”的放荡女人，“性”是自己和别人感情的第一需求，但实际上“性”并不是她感情中的唯一需求，她并不是“谁都可以”（比如美里利用戴眼镜小哥日向的单恋，还有和加持开房时候也承认了分手后几年自己性经历缺失）。但是我认为导演还有更深层的意思——通过二号丽死后的这段二人场景和加持死后的二人场景对比并结合之前的各种情节，我们发现美里就是大人版本的真嗣，心中也有别人进不去的深渊。就像真嗣疑似俄底浦斯情结（恋母情结）一样，美里也疑似伊拉克特拉情结（恋父情结），美里看着真嗣就像是看到了曾经的自己，所以希望保护他，打开他的心扉，结果却不如愿，“豪猪理论”不只是可以用来形容真嗣，也可以用来形容和真嗣同一屋檐下的她。</p><p><img src="https://pic3.zhimg.com/80/cf17d2b30eb04e5ce8b5e92b58bd85aa_720w.webp"></p><p>所以说美里和真嗣之间的感情不同于普通男女之间的爱情，更像一种母子，姐弟，家人，亲人，性启蒙，自己的影子，还有暧昧的情人的感觉。</p><p>即使是最后真嗣已经万念俱灰，美里依然没有放弃他，并成功救下了真嗣（漫画中是老碇救了真嗣，美里随后赶到），当下Seele也正对NERV大举进攻，她当时唯一的想法就是把真嗣送到当时最安全的初号机里，途中在掩护真嗣的时候中枪，意识到自己命不久矣，美里把自己最珍贵的父亲遗物十字架交给了真嗣（就像美里父亲一样，为了保护心爱之人而死），为唤起真嗣心中的正能量做最后的挣扎，并且给了真嗣最后的无私关怀和安慰还有希望——成人之吻。（《EVA》又一大泪点。）</p><p><img src="https://pic3.zhimg.com/80/e5f0fe74137c73bc6303592941b30e22_720w.webp"></p><p>这一吻是母亲的祝福，还是情人的吻别，还是亲人的告别，或许已经不重要了。</p><p>多情自古伤离别，更那堪决绝生死劫。</p><p><strong>【3.5碇源渡】</strong></p><p><img src="https://pic3.zhimg.com/80/6ccf949db77c8879ea3c40260f72b6ea_720w.webp"></p><p>如果搞一个动漫中最讨厌的角色排行榜，碇源渡不名列前茅我第一个不服。（他喵的有人不讨厌他吗，麻烦站出来一下。）</p><p>络腮胡子，深色眼镜，尤其是那个双手交叉，貌似就没有其他造型，这也是老碇最经典的动作，也被各种模仿和恶搞。（连A站表情包都有。）</p><p><img src="https://pic2.zhimg.com/80/c4f674f22e5f7c8eca592ba649e44f99_720w.webp"></p><p>老碇是一个为了目标不择手段，却又极度冷静的可怕之人。他也正是Seele中的“犹大”（《圣经》中背叛耶稣的人）。当然老碇的能力是毋庸置疑的，指挥能力出众，果断而有效，颇有君王风范，在某种程度上来说，确实很”男人”。</p><p><img src="https://pic1.zhimg.com/80/589d7056c2c4b2c3f1d53cf6b2f39e60_720w.webp"></p><p>傀儡系统虐杀冬二的三号机时，这得意的微笑更是表现出他的心狠手辣，为了自己的信念可以付出一切，与其他所有人为敌都是其次，哪怕与神为敌也在所不惜。如果说真嗣是逃避世界，明日香是被世界所抛弃，那老碇就是毁灭世界之后再创造世界。比如和冬月在南极的时候，冬月感叹到二次冲击后的南极如地狱一般，老碇说：“我们人类现在不就站在这里，以生物的身份活得好好的。”</p><p>就如之前我们分析最终目的那段所说，老碇是很有野心的，并且伪装得极深，不仅把NERV成员玩弄于股掌之间，人际关系也利用的得心应手（比如利用赤木直子，还利用直子的女儿律子，利用冬月，利用加持，利用丽都不用说了，连自己儿子都利用），还和Seele上有政策下有对策，对关键的是他还把观众给忽悠了，到EOE才最终确定自己的最终目的是碇唯，可谓最有心机。</p><p>老碇的人物形象已经深入人心了，唯一可能有疑问的地方就是老碇的感情，他到底爱不爱自己的儿子？</p><p>之前说老碇对真嗣无爱现在想想未免太片面了，但是说老碇爱真嗣又比较牵强，说成是一个不懂得表达父爱的人对自己不肯成长的儿子的恨铁不成钢可能比较贴切。</p><p>“人都是靠自己的力量长大的，只有孩童才会依赖父母，学会自立吧真嗣。”</p><p>“不用想要和我相互了解，人们不知为了什么，都为了相互理解而努力，不过，你记住，人与人之间是绝对无法完全理解的。”</p><p>“人类，就是这么悲哀的生物。”</p><p>老碇最后关头被三号丽背叛，计划失败，最终归宿是被初号机吃掉了。（漫画中是被律子反杀。）</p><p>“抱歉，真嗣。”这是他的最后一句话。</p><p><strong>【3.6赤木律子】</strong></p><p><img src="https://pic1.zhimg.com/80/ebaf764e0b956b9401558cf7aa9ffed0_720w.webp"></p><p>标准的理科女科学家的冷静形象，负责NERV的技术工作和MAGI的维护，也是少数知道NERV秘密的人之一。</p><blockquote><p>MAGI是律子的母亲赤木直子研发的，是一种超高科技的人工智能生物计算机，由三台电脑Caspar、Balthasar和Melchior组成（名字来自《圣经》中的东方三胜贤），分别植入了赤木直子作为母亲、科学家和女人的人格，这三种直子的人格组成的矛盾构成了MAGI。（来自百度百科）</p></blockquote><p>直子本是NERV的创始人之一，同时有伟大的科技成就，可惜却爱上了不该爱的人——碇源渡，因为老碇爱的是碇唯，对直子的暧昧只不过是想利用她的技术而已，碇唯因事故融入初号机之后，直子以为自己能备胎逆袭，却没想到老碇对碇唯的爱如此之深——她发现了绫波丽（的身世秘密）。在一号绫波丽的刺激之下，掐死了象征着自己情敌碇唯的一号丽（有个细节一号丽被掐死的时候双眼倒影着渚薰，不过有的版本删掉了这段），之后从Melchior（女人）的台子上跳下去自杀，早早就结束了生命，这一幕也被年轻的律子看在眼中（漫画中增加了律子冲动要掐死丽的一段）。</p><p>年轻时候的律子是一身学生装清纯的打扮，跟随母亲赤木直子进入NERV之后，完全改变了形象，黄金发，大耳环，短皮裙，高跟鞋，红丝袜，白大褂。虽然外表时尚性感的不得了，可是性情却趋于冷漠，从外表的巨大改变能看出来律子是想要摆脱母亲的影子而独立的，可惜她还是走上了母亲的道路，她也爱上了老碇，从对美里的话中（“正如自我平衡和瞬态平衡，维持现状之力与改变现状之力，同时拥有这两种矛盾性质的东西才称为生物，是指男人和女人啊”）看似对感情的态度很成熟，可惜一到自己身上就不行。典型的痴情形象，甘心做老碇的感情奴隶，情愿为老碇做牛做马做替罪羊，为了老碇不惜牺牲驾驶员来完成任务。律子对母亲的死并没有多大的反应，也可以让人联想到母亲在她心中的情敌身份可能大于母亲的身份（恋父情结）。</p><p>开始我在想，也许律子理想中的家就想她电脑中的这张图片一样（图片分别来自漫画和动画），但是后来的镜头给了上老碇的特写，更加肯定了律子母亲的情敌形象。</p><p><img src="https://pic3.zhimg.com/80/c73733d233e3c33f67d938575f8b4b82_720w.webp"></p><p>从毁掉了剩余的容器（没有灵魂的绫波丽）的场景中律子的台词我们可以体会她对老碇的感情：“那又不是人，是做成人形的东西，可我连那样的东西都不如，我甚至比不上它们，只要想到那个人，再大的屈辱我都能忍受，我的身体怎么样都无所谓，可是我不希望…他用这种想法看待我，偏偏…偏偏他…我实在太傻了，明明早就知道了，却还是和我妈妈一样傻。”</p><p>又是一个傻女人，为了心爱之人心甘情愿被利用和出卖，还要帮心爱之人达成目的，即使那个人的目的并不是和自己在一起。（比如最后Seele进攻NERV时候想入侵MAGI，已经被抛弃的了律子还是选择出马抵抗了MAGI被入侵。）</p><p>一说起抵抗MAGI被入侵就不得不单独提下TV版第13集，这集非常出彩，使徒是类似于电脑病毒的存在，会不断根据环境变化而进化成新的程序，想要让MAGI最后判定NERV自爆（MAGI平时处理问题一般少数服从多数，但是自杀这种特殊问题采用一票否决制）。这集有一种两个顶尖黑客对决的紧迫感（我想到了特德·姜的《领悟》，真的非常非常非常爽），节奏时快时慢，律子也展现了超厉害的技术，她利用“进化的终点就是死亡”（可以理解为：进化的终点是不进化，不进化即不改变，不改变即死亡），最终消灭了使徒。</p><p>这集把律子的性格表现的很立体不说，并道出了MAGI的来历，关键是还留下了一个小伏笔（《EVA》中的各种铺垫伏笔细节真的是做到了变态的程度）。表面上看是赤木律子输入了促进使徒进化的程序让使徒进化过速而最终灭亡，但在赤木律子打败使徒之后是这么对美里说的：“我其实把程式改写了，因为我自己不太可能做母亲，因此不了解身为母亲的妈妈，但是我尊敬身为科学家的她，可是却憎恨身为女人的她，Casper里输入的是身为女人的模式，到最后她也维持了自己是女人这件事，真不愧是我妈的作风。”</p><blockquote><p>从这段对话我们可以看出，Casper原来代表的应该是母亲的身份，在与使徒交战中被输入的是女人的模式，以至于直接影响了EOE中的剧情，也就是最后关头律子对老碇心灰意冷试图炸毁NERV总部时了，她也为自己之前的感情买了单，由于MAGI被自己修改，Casper一票否决了律子的自爆提议，所以律子才会诧异：“母亲居然选择了男人而背叛了女儿。”（来自百度百科）</p></blockquote><p>老碇杀死律子之前对她说的话，被导演刻意隐藏了（无声的对白），但是从律子的反应可以看出（你骗人！），可以联想老碇大概说的是“我爱你”或者是“谢谢你”也有可能是“你真让我失望”。（漫画中老碇说的是：我曾经爱过你。）</p><p><strong>【3.7加持良治】</strong></p><p><img src="https://pic1.zhimg.com/80/84d04877a15f80143ddced6ea7f332c0_720w.webp"></p><p>加持良治是一个三面间谍，游走于Seele和NERV和日本政府之间，加持算是《EVA》里比较特殊的一个角色了，因为他很正常。（囧）</p><p>加持表面风流但不下流，虽然看似轻佻，但是他很成熟稳重并且也能看破人心（比如面对明日香的色诱），能用一个吻解决问题绝不扯人生哲理（比如对美里），加持也是少数给真嗣提供正能量的人之一，经常帮助真嗣振作（“愈是了解痛苦的人，便愈能以温柔待人，这与懦弱是不同的”），而加持追求的是什么呢，应该就是真相吧（漫画中增加了加持的童年故事，加持是牺牲了弟弟和同伴的命而活下来的）。并且从美里的话（“正如加持所推测的”）中可以看出他确实知道了很多真相，发现了选择EVA驾驶员的组织只是个幌子，背后操作的应该是老碇，也发现了最终教条区的存在等等。自己也因为知道的太多了而惹祸上身，意识到自己命不久矣，和美里最后一次上床时把自己所有调查资料交给了她（漫画中是加持和美里最后一吻时把资料交给了她），在救下了冬月教授之后，被不明人士杀害（漫画中杀手带着手套，所以暗指是被老碇杀害）。</p><p><img src="https://pic3.zhimg.com/80/0029e693dffc16b6f11d006bc612883a_720w.webp"></p><p>不得不说加持作为一个配角，太抢戏了。</p><p>他和30岁这代人一样，都是不允许幸福的人。</p><p><strong>【3.8渚熏】</strong></p><p><img src="https://pic3.zhimg.com/80/31a0b92a971a010a37d373b70fb83c42_720w.webp"></p><p>渚熏是《EVA》里最不像“人”的一个角色，无论是台词还是性格还有最后的抉择，都是“神性”的体现。渚熏是完美的，像是改正了所有缺点的真嗣。</p><p>TV版里的渚熏戏份很少（没办法，当时缺钱），完全像其他使徒一样龙套的存在，只把关键部分表现了出来，所以很多只看过TV版的观众会觉得这个角色很“莫名其妙”（这里非常推荐去看《EVA》漫画版，里面的渚熏戏份很足，过度也很自然），尤其是渚熏对真嗣的“爱”。</p><p>首先说一下，《EVA》并不是耽美（多指动漫中男与男的恋爱）作品，所以“攻”“受”“基佬”“同性恋”这些词用在渚熏身上并不恰当，渚熏爱真嗣其实讲的是基督教最常用的一个词——神爱世人。</p><p>渚熏最开始是作为代替明日香的第五号驾驶员被Seele派到NERV的，目的是为了阻止老碇的计划。但是渚熏并没有直接去最终教条区，因为他和其他使徒不同，他是有自主意识的，他对Seele是怀疑的，他想看看一切是否如Seele所说，在这期间他遇见了真嗣（象征人类，李林），并爱上了满身缺点的真嗣。</p><p>至于神为什么爱世人，这样的宗教情节我就回答不上来了，因为TV版剧情就这么定的，可以理解为基督教中神对世人的怜悯，渚熏也算是知道剧情走向的一个角色。大家可以参照漫画版中的设定：渚熏参加了子宫使徒的作战，因为通过子宫使徒与二号丽相连，感受到了二号绫波丽炽热的爱，自己也被这种感情所感染。在感情上从无到有，从神仙下凡到化作凡人具有七情六欲，倒是有一种绫波丽的感觉。（漫画中的渚熏和真嗣更是基情满满，包含了喜闻乐见的捡肥皂与人工呼吸情节。）</p><p><img src="https://pic1.zhimg.com/80/38077f3bd5304e3dbb10e5bdd8c06664_720w.webp"></p><p>在Seele的催促下，渚熏最终还是行动了，到了最终教条区，他才发现其实所有的使徒都被NERV和Seele的圈套所蒙骗了，发现在那里的竟是莉莉丝的本体而非亚当，渚熏感叹道：“莉莉斯！是吗？原来是这样啊？李林。”这一段渚薰可以说是真正以神的使者的身份对人类的罪恶行为进行着批判。</p><p>最后时刻，渚熏选择被真嗣杀死：“对我来说生存和死亡是一样的，死亡对我而言是唯一的自由。”</p><blockquote><p>对于吃下生命之果的使徒来说，他们拥有永恒的生命，但也只是这样的永恒，而他们的使命就只有找到亚当并与之融合。“能活下去的只有一方”，说的就是这一直延续的使命，一旦人类到达生命之树，也就意味着使徒的灭亡。这是“生与死是同等”的意义。“死亡对于我来说是觉得自由”也是一样，作为得到生命之果的代价，使徒失去了繁衍后代的能力，失去了未来，相对的，人类这一方却拥有无数的可能。（此段来自百度百科）</p></blockquote><p>漫画中的台词表现的更加直白：“唉，不管要不要引发第三次冲击，我这个个体都注定要消灭的，所以说真的，第三次冲击根本怎么样都无所谓，我只配拥有一项绝对的自由，那就是凭自主意志决定自己要怎么死，所以我，想要由你来消灭我。”</p><p><img src="https://pic4.zhimg.com/80/38731c55e112671120dd6a3d5f081693_720w.webp"></p><p>这个画面定格了整整64秒，虽然说为了省钱是主要原因，但这个安排不得不称为精妙无比，非常走心。让观众感受到真嗣这1分钟里内心的挣扎，此时的背景音乐（正是贝多芬的第九交响乐——《欢乐颂》）也迎合着渚熏此刻的心，也是渚熏这个角色所代表的哲学意义——自由。</p><p>自由天使，名副其实。</p><p><strong>【4.特点分析】</strong></p><p>其实叫特点“分析”可能并不恰当，因为本人并非相关专业人士，只是个普通影迷而已，相信细心的小伙伴可能已经发现，之前有的部分看似写得行云流水头头是道，无非也是照葫芦画瓢，一旦涉及到专业层面便无所适从，可能无法从各个方面客观分析好《EVA》的特点，所以这部分更多的是我自己的主观感受，希望能和诸位有所“同步”。这部分的图片也会多一点，看着没有之前那么累了。</p><p><strong>【4.1细节】</strong></p><p>在特点方面首先想到的就是剧中的细节，正如之前所说，《EVA》在细节方面做到了极其变态的程度，这里随便写一些我注意到的，大家感受一下。</p><p>剧中很多的设计都是有来历有意图的：</p><p>（1）印象最深刻的是NERV的这个Logo标：</p><p><img src="https://pic1.zhimg.com/80/2edf91b0ed6631935fb250e35611b1f8_720w.webp"></p><p>首先NERV是德语“神经”的意思，上面遮挡了一部分字母的是无花果叶子，在创世记中，亚当和夏娃吃了智慧树的果实后以自己一丝不挂为耻，于是用无花果树叶盖住自己的生殖器。</p><p>再看“God’s in his heaven, All’s right with the world.”，表面上看来只是引用了英国诗人Robert Browning的诗《Pippa’s Song》中的一句，可是这句诗却有着双重含义：字面意思大概想说“上帝在他的天堂里，人间一切都安好。”在Seele看来，这句话是对神的崇敬，所以用在Seele的下属组织NERV上感觉还不错。而在老碇眼中，此句诗暗含深意：上帝深居于自己的天堂，人间一切照旧运转如常，上帝的归上帝的，人类的归人类的，人类的事情人类自己处理就好了，不需要神去做什么，言外之意就是神做不到的事情就让我们人来做吧。</p><p>所以这句诗还有另外一种翻译——神不为之，人为之。</p><p>这也正是老碇认为的科技的力量可以主宰万物，以人类的力量来取代神的力量。人类对自己手中拥有了神的力量感到害怕，但也有人喊出了踢翻上帝宝座的豪言。老碇在漫画中的交代最直白：我不是要像神赎罪，我要像神复仇！</p><p>有一种“天地不仁，以万物为刍狗”的感觉。</p><p>（2）除了主题部分的宗教元素，其他方面的宗教设计也有很多，出场率最高的应该是使徒的攻击，我还是第一次看到十字架一样的爆炸轨迹：</p><p><img src="https://pic1.zhimg.com/80/35521ef0ac6916a11945bc44443262bc_720w.webp"></p><p>其他场景也有各种十字架：</p><p><img src="https://pic4.zhimg.com/80/97fe51eba46f14bc79f8d9459fe0bc9f_720w.webp"></p><p>（3）还有这个通向最终教条区的电梯的设计，明显是DNA：</p><p><img src="https://pic2.zhimg.com/80/ff2c6bcc3a111368d0821ccc0c691e65_720w.webp"></p><p>还有25话的片尾曲中的字幕设计，也被设计成了DNA的螺旋状和橙汁的颜色：</p><p><img src="https://pic4.zhimg.com/80/c533075c23245c56af423ba21d060d57_720w.webp"></p><p>还有这里MAGI的构造，明显是大脑：</p><p><img src="https://pic2.zhimg.com/80/15bef694720b35f115de00d5ef0f05c9_720w.webp"></p><p>还有丽的培养槽设计，也是大脑：</p><p><img src="https://pic4.zhimg.com/80/830f66f8c3098a606377c6683eeff83f_720w.webp"></p><p>之后还有很多通过场景的细节来表现人物：</p><p>（4）真嗣离家出走的时候：</p><p>有一段是真嗣独自坐在电影院的角落，当时他的眼神是这样的。</p><p><img src="https://pic1.zhimg.com/80/7f6cec60bc1a4eb9e94498eb73b25de0_720w.webp"></p><p>并且在这之前的场景都是黑夜的阴郁风格，而当真嗣看到了影院中的情侣在这种世界末日的环境下（当时电影里的内容也是和世界末日有关）毫无顾虑的接吻，他的眼神变了。</p><p><img src="https://pic1.zhimg.com/80/e56779362a2a44346d79d5f48e4d3638_720w.webp"></p><p>从这之后的场景进入白天，迎来阳光，真嗣也来到了山上看到自己守护的第三东京市。</p><p>其实通过描述场景以及其他手法（比如镜头、构图、色调等）来表现人物在《EVA》中是非常常见的（只是不全神贯注思考的观众可能不会注意到），在我们看的大多数的普通动画（甚至是电影）里，表现人物的基本只有剧情和台词，像《EVA》这种直接+间接+暗示来表现人物是很难得的，在人物表现上《EVA》可谓消耗了非常多的脑细胞，这也正是《EVA》甩了很多其他普通动画几条街的原因之一。</p><p>（5）比如明日香这里：</p><p>随随便便放几张图，就算你不认识明日香，估计也能猜到她是一个怎样的人了。</p><p><img src="https://pic1.zhimg.com/80/d8d1063ac1d06194a79d3ed0256b07b8_720w.webp"></p><p><img src="https://pic3.zhimg.com/80/1cea1bd54ccf50324d8baeb0a0c95916_720w.webp"></p><p><img src="https://pic4.zhimg.com/80/25de0ac8921b71caf26894c49df2ef8b_720w.webp"></p><p><img src="https://pic4.zhimg.com/80/f10b5e5018e770a670f695902b4b33e7_720w.webp"></p><p><img src="https://pic3.zhimg.com/80/87dfe55d0522a0a4b359e9e5d02a7876_720w.webp"></p><p>标准的“巅峰式”，当然站得越高，摔得越狠。</p><p>（6）还有这里，加持一直用脚在桌子底下调戏美里：</p><p><img src="https://pic4.zhimg.com/80/ef4db3a18ae8459bf3234203a1f138b3_720w.webp"></p><p>（7）律子第一集对真嗣说的话：</p><p><img src="https://pic4.zhimg.com/80/a16c67188c1a035d0f36debe9face167_720w.webp"></p><p>广播说：“第1层第8号装甲板损坏。”</p><p>律子说：“真嗣，已经没有时间了。”</p><p>开始并不会觉得有什么问题，可是看到后来才知道，NERV一共有20多层护甲呢。这里仅是第1层的第8号坏了，律子却忽悠真嗣说已经没有时间了，律子的心理可见一斑。</p><p>（8）小光和冬二的对话：</p><p><img src="https://pic2.zhimg.com/80/a67adeffdcc3b745fbbbf35205753a11_720w.webp"></p><p>小光提出要给冬二送便当的时候，按照正常的冬二性格应该是神经超大条的那种回答，可是冬二的回答却一反常态”抢答”，表现的很主动，不仅仅是因为当时他心里心事重重，也因为他是知道班长对自己的心意的。</p><p><img src="https://pic4.zhimg.com/80/67dc36c2d7dba8c388fae1e58dc0fd93_720w.webp"></p><p>小光背后的书上写的是：“爱的手工便当”，只可惜没人吃了。</p><p>（9）MAGI内部的字条：</p><p><img src="https://pic2.zhimg.com/80/29db97d3593ca7a7f476108bf6430311_720w.webp"></p><p>“碇这个大笨蛋。”</p><p>开始并没有注意到，看第二遍时候注意到这里，不禁感叹赤木母女二人的宿命。</p><p>（10）摩耶变成橙汁时候，电脑上面的字：</p><p><img src="https://pic4.zhimg.com/80/eea2bb5363552ed6aa3334b9399be72b_720w.webp"></p><p>“I NEED YOU .”</p><p>（11）律子的猫：</p><p>律子的桌子上有两只猫玩偶相信大家都注意到了，律子接到电话说外婆家的猫去世了，也暗示了加持的死，销毁了剩余的绫波丽之后，对老碇说的第一句话也是“猫死了”，而且美里有一句冒犯了律子的话也让人很在意。</p><p><img src="https://pic4.zhimg.com/80/17a4f942da7e32bab6e8bd2c4c31e40b_720w.webp"></p><p>这里“猫”的含义就很暧昧了，有不少的小伙伴也认为猫代表的是加持，毕竟“有图为证”哈哈哈。</p><p><img src="https://pic4.zhimg.com/80/b8c9859d18a498b1dbea39a27f863677_720w.webp"></p><p>嗯，还真是好奇心害死“猫”。</p><p>再有就是摩耶的抱枕上（那玩意应该是抱枕吧），也有律子的猫。</p><p><img src="https://pic3.zhimg.com/80/578ed159c3ad6db6b8c55e90654f7a9e_720w.webp"></p><p>（12）Seele的老大：</p><p><img src="https://pic2.zhimg.com/80/a8dd9bc714e51278f9d9bfc0a40b8c19_720w.webp"></p><p>Seele的老大基尔变了橙汁之后，发现他原来是改造人，怪不得这么想升天。其他人变橙汁都很干净利索，甚至可以说唯美，只有他和老碇，比较吓人。</p><p>（13）Seele的石板：</p><p><img src="https://pic1.zhimg.com/80/0b71bf19c38a5dc9d6b71c012336993c_720w.webp"></p><p>来自库布里克大神的《2001太空漫游》，看过电影都秒懂。</p><p>（14）二号绫波丽的手：</p><p><img src="https://pic4.zhimg.com/80/98ff0fb8ede4735c86b5b9eab0bb836f_720w.webp"></p><p>这里称不上是什么细节吧，只是第一次看没注意到，第二次看的时候注意到了这只手，感慨万千唉。</p><p>（15）律子的眼神</p><p><img src="https://pic3.zhimg.com/80/971b138d0ac10377d28f928f6aa56f86_720w.webp"></p><p>老碇：“丽，辛苦了，一起去吃饭吧。”</p><p>律子此时的眼神。</p><p>（16）这两张图把三人的性格表现的很到位：</p><p><img src="https://pic2.zhimg.com/80/393550b2e565cb187e3939e2e6724e79_720w.webp"></p><p><img src="https://pic1.zhimg.com/80/0929a19228da22e56e6b171f9705077c_720w.webp"></p><p>（17）不知道为什么，庵野秀明似乎很喜欢德语，EVA是德语中夏娃的拼法，英语EVE，同理Evangelion也是德语拼法，英语是Evangelist，在明日香受精神污染时闪过的也非英语而是德语，EOE中的神曲《Komm,süsser Tod》也是德语，意思是：《来吧，甜蜜的死亡》。不知道为什么，庵野秀明似乎也很喜欢掐脖子，比如初号机掐住了三号机，真嗣要掐死明日香，还是两次，赤木直子掐死了绫波丽，漫画中赤木律子也要掐死绫波丽，渚熏一登场就掐死了猫咪。（不过话说我印象中最深刻的掐脖子也是出自一部宗教题材的电影《反基督者》。）</p><p>（18）细节体现性格：真嗣和美里剪刀石头布决定谁做家务时，4次都是石头对石头，第5次真嗣出了剪刀，美里出石头胜出。</p><p>（19）冬月教授每次出场都是以一个怀疑主义者的身份出现在老碇身边的，时刻提醒着老碇，而冬月的目的表现的很少却也简单明了——见到碇唯，只是比老碇表现的更温柔罢了。冬月对碇唯是发与情，止于礼的情感，让我联想到了“我生君未生，我生君已老。”</p><p><img src="https://pic1.zhimg.com/80/b42e8e3c66f2b6d050b2c1fdc70fa6bc_720w.webp"></p><p>（20）加持电梯里吻美里，美里出了电梯说：“我已经和你没有关系了。”加持说：“你的嘴唇和你说的话，我该相信哪边呢？”同时美里把加持递给自己的东西打翻在地，之后美里在加持走了之后把东西又整理好，之后又愤怒的摔了出去。通过这里几个非常简单的镜头，就把美里的心理表现的很到位：美里并不是对加持愤怒，而是因为加持（父亲）的话，对自己的愤怒。（这种讲故事的功力我真是佩服的Orz。）</p><p>（21）摆渡人绫波丽</p><p><img src="https://pic3.zhimg.com/80/2808bc23f4d0b3c044f1b7c0145377e2_720w.webp"></p><p>（22）EOE仪式开始，游荡的秋千像钟摆一样不停摆动，真嗣和同伴建好了NERV，同伴走了之后真嗣又毁掉了NERV，钟摆停止了摆动。有很多电影里都有催眠情节，梦与现实的隐喻，美好与残酷的对比。</p><p><img src="https://pic3.zhimg.com/80/71e358e6e0644db769490c4a7641c9e6_720w.webp"></p><p>一部细节很多的作品必然是用心良苦的，而且我这里写的细节只不过是《EVA》中的一部分，我最近看知乎上有个帖子说的就是《EVA》的细节，里面的答案都很不错，有兴趣的小伙伴可以去看看。</p><p><strong>【4.2配乐】</strong></p><p>一说到配乐就不得不提一下鹭巢诗郎了，这个长的比庵野还丑的人就是TV版和剧场版的音乐监督。无论是很燃的战斗场面还是钢琴曲与交响乐，《EVA》的原创配乐几乎都是出自他之手，原创配乐的水平大家也有目共睹(强烈推荐一波新剧场版的配乐，大赞)。</p><p>好的配乐会让一部神作超神，什么才是好的配乐呢，对人物来讲，听曲即能识人，对场景来说，闻声即能同步，《EVA》无疑做到了这点。每集才20多分钟，一共才20多集的动画和两部剧场版却有上百首配乐跟着，如果算上新剧场版和改编的几乎近千首，如果说气势磅礴的战斗背景音让人内心爆燃只是展现了配乐的基本功的话（比如使徒进攻时候的紧张配乐《Marking Time, Waiting for Death》从没见过如此魔性的定音鼓），那么在《EVA》人物方面的配乐可以说是大神级，以绫波丽和明日香最为突出。</p><p>丽的配乐都恰到好处，《REI I》和《REI II》和《REI III》都把不同时期丽的感情表现的很传神，前期二号丽的冰冷，后期二号丽的爱，三号丽的悲情等等，不得不说，钢琴真的太适合丽了，而且后来各种的改编的交响乐版本也都很棒。《Thanatos——If I can’t be yours》，这首歌的出现正是绫波丽回归莉莉丝的时候，此曲也是《EVA》剧场版的剧终曲，这首歌所表达的正是丽最炽热的爱，也是最缠绵的悲伤。Thanatos是死神的意思，歌名的大概意思就是“如果我不能成为你的，那我愿为你而死”，“That I may not be what I think I am ”、“Cos we can’t fulfill our dream in this life ”、“What am I, if I can’t be yours”尤其是这几句小节结尾的高音真是唱的我泪如涌泉，不得不感谢作词作曲的鹭巢诗郎，还有献声的LOREN&amp;MASH。</p><p>还有一首丽的主题曲是《天国の記憶》，正是丽的声优林原惠美唱的，也是醉了。再有和丽有关的就是众所周知的《Fly me to the moon》了，虽然这首歌不是《EVA》原创，但是它后来也被改编成各种版本（美里和加持夜路场景的插曲也是《Fly me to the moon》），TV中每集的片尾曲都是自己改编的不一样版本的《Fly me to the moon》，有纯音钢琴曲，纯小提琴演奏，吉他钢琴合奏等等众多版本，或者还有自己家声优唱的，“带我去月亮”也巧妙的迎合了《EVA》的主题——人类补完计划。并且片尾的MV可谓非常传神，水波隐喻LCL之海，整个MV都是倒影，配上丽不断旋转的身影（个人感觉丽一会顺时针旋转一会逆时针旋转，非常魔性），也给人飘渺虚幻的感觉。</p><p>至于真嗣的《I.SHINJI》有好几个版本，TV中由于制作问题，大家可能不会注意，网上有一些原版和改编的交响乐，尤其是交响乐，感觉把真嗣的温柔和悲伤都演奏了出来。再有就是《Both of You, Dance Like You Want to Win!》是真嗣和明日香62秒高能战斗的配乐，这段配乐的节奏和剪辑达到了神同步，很带感。</p><p>除了原创音乐，另一方面《EVA》中大胆并大量的运用了古典音乐。比如真嗣的大提琴是巴赫的《大提琴组曲的第一号》，连明日香都忍不住偷偷观看并鼓掌称赞。</p><p>至于明日香的配乐，都非常特别。比如TV22集，沉闷的阴雨天只有环境音，突然一束光罩在了二号机身上，并且毫无征兆的突然响起了“哈~利·路亚”，让观众毫无准备的强行开启高能模式，之后动画节奏突变，配乐也越来越高潮，看的我目瞪口呆。</p><blockquote><p>这段配乐是摘自韩德尔巨作《Messiah，Part Ⅱ，42. Hallelujah，chorus》（弥赛亚第二部第42章，赞美主，合唱曲）。歌词也是圣经《启示录》第11、19章的经文：“哈利路亚！世上的国成了我主和主基督的国，他要作王，他是万国之王、万王之王，他要担当国政直到永永远远。哈利路亚！”</p></blockquote><p>特别指出明日香最后一站的配乐绝B完美：整个BGM的节奏和战斗节奏完全一致，无论是开始的对峙到力压群雄再到惨烈之死，巴赫一首如此温柔的曲子，配的却是血腥无比的场景（其他作品中，很多变态杀手的背景音乐都偏爱巴赫）。战斗的尾声配的是原创音乐《空しき流れ》，低沉的钢琴中，明日香正在疯狂的叫喊着：“杀了你！杀了你！杀了你！杀了你！杀了你！”</p><p>另一首非常梦幻的配乐也是来自巴赫的《Jesus bleibet meine Freude》应该是Cantata No 147的名字，名字是德语，意思是耶稣永远是我的幸福。这周唯美的曲子出现在LCL海之中，是最接近《EVA》主旨剧情的配乐。（“那我的梦在哪里”，“那是现实的延伸”，“那我的现实在哪里”，“那是梦的终结”。）</p><p>值得单独提出的是渚薰的配乐，渚薰踏出那一步的时候，响起了《贝多芬第九交响曲》的终曲乐章——《欢乐颂》，《第九交响曲》也是贝多芬唯一一部引入人声的交响曲作品，渚薰此时的形象也是最接近神的时候，这部交响曲被公认为贝多芬在交响乐领域的最高成就，也是贝多芬音乐创作生涯的最高峰和总结，并且伴随着渚薰在最终教条区的64秒经典定格，此时演奏的也正是《欢乐颂》最高潮的部分，之后也随着渚薰头颅落地的一刻，音乐也戛然而止。</p><p>《欢乐颂》表现的感情也正和渚薰的代表的哲学意义完美配合：</p><blockquote><p>自由平等博爱是欢乐的前提，人们必须努力争取，才能获得解放，欢乐不是上帝的赠品，它要靠人们去奋斗，欢乐属于解放了的人们自己。</p></blockquote><p>最后让我们感受一下《EVA》神曲《Komm,süsser Tod》，是人类都变橙汁回归到莉莉丝时的配乐，作词的是庵野秀明，编曲则是鹭巢诗郎，歌名虽然是德文，但歌词是英文的。意思就是：“来吧，甜蜜的死亡”。没错，这是一首日本人用德语标题写的英文歌，也应该是《EVA》中最出名的歌了吧。</p><p>曲风和曲名完全一致，我早些年听的时候根本不知道是个啥，只是有种“面朝大海，春暖花开”的微笑着拥抱死亡的招魂之感。后来才知道，曲名居然真的是“来吧，甜蜜的死亡”， <strong>这真的是一首看似希望却又充满绝望唯美的死亡之歌</strong> ，前部分旋律如此的温柔安详，后半段配尖锐的小提琴真的是几乎把我融化了。</p><p>网上的好多评论都说“希望自己的葬礼上能放这首歌”，我希望的则是让雷姐（Lana Del Rey）来演唱。</p><p>这一定很美吧。</p><p><strong>【4.3风格】</strong></p><p><img src="https://pic2.zhimg.com/80/a9e74b391d42c71cf0dcce11d904a12d_720w.webp"></p><p>如图所说，《EVA》有很多的“成人”标签：</p><p>（1）血腥暴力残忍：</p><p>①初号机虐杀三号机的场景：</p><p><img src="https://pic3.zhimg.com/80/1a235cc9ba27381565511b4e64b6c582_720w.webp"></p><p>②二号机眼睛被枪刺穿，明日香的眼睛血流如注：</p><p><img src="https://pic2.zhimg.com/80/f57f34293db613271cfbfed24cef9081_720w.webp"></p><p>③力天使的战斗中二号机被肢解斩首：</p><p><img src="https://pic1.zhimg.com/80/bd3a178077574f391b832cf3e78e7a20_720w.webp"></p><p>④三号机的血染红了周边楼房：</p><p><img src="https://pic1.zhimg.com/80/a5ed5d8859da03d5abf983775c24d374_720w.webp"></p><p>⑤初号机捏碎冬二驾驶舱：</p><p><img src="https://pic2.zhimg.com/80/0ccaf98d526dc1ea51de1bf25a54a0dd_720w.webp"></p><p>⑥老碇：</p><p><img src="https://pic3.zhimg.com/80/5c4529aa5ff54089370079d344e15fb6_720w.webp"></p><p>⑦初号机暴走生吃使徒</p><p><img src="https://pic3.zhimg.com/80/e153aa9a11c02f0a52c19be337b312e2_720w.webp"></p><p><img src="https://pic4.zhimg.com/80/8bc20b05494aa88e1d932b9a24a569c3_720w.webp"></p><p>还有更血腥暴力的明日香之最后一站，我就不上图了，以免影响大家食欲。</p><p>（2）色情和性暗示：</p><p>除去剧中非常多的裸体场景，其他暗示场景有很多。</p><p>①美里还真是福利多多啊：</p><p><img src="https://pic2.zhimg.com/80/4c930a97590c3fd37894aefde63241bd_720w.webp"></p><p>②这个天眼的形状：略眼熟</p><p><img src="https://pic1.zhimg.com/80/b21261515a1c1348d551856f671fa4c8_720w.webp"></p><p>③量产机的插入栓：红长直</p><p><img src="https://pic3.zhimg.com/80/284616339b0251fc8b01b3797c1a303e_720w.webp"></p><p>④三冲的爆炸：（子宫，不要问我是怎么知道的）</p><p><img src="https://pic1.zhimg.com/80/1b4fda72b138c76ccb41809615771ef8_720w.webp"></p><p>⑤《圣经》中神破了耶利哥之墙：（而最后真嗣成了神）</p><p><img src="https://pic3.zhimg.com/80/2bb68ab0e810fa563c53df35ce11b3aa_720w.webp"></p><p>⑥这个就不用多说了吧：（分娩）</p><p><img src="https://pic1.zhimg.com/80/f293fa226eae39e07410347ceccf1500_720w.webp"></p><p>这是一部充满了宗教、色情、暴力、哲学的作品，而且这些“成人”标签是第一次出现在动画片中。</p><p><strong>【4.4手法】</strong></p><p>关于”钱”的问题一直围绕着《EVA》，好多寓意深刻的场景都被解释为“没钱了才这样拍”，在这里必须要为庵野洗白一下：不得不承认有很多地方确实存在资金不足的问题，但是也着实有很多地方是导演的刻意如此，所以“《EVA》之前还是挺欢快激情的，只是后来没钱才做成黑化的”类似这样的观点我是比较反对的。</p><p>因为《EVA》开始的风格就是黑暗的，诡异的，悬疑的，逐渐增加了逻辑性的，心理学的，暴力的，惊悚的，哲学的，最后成了导演的内心大秀场。</p><p>白噪音，空镜头，意味深长的台词，又省钱又神秘的静止镜头，独特的构图，对比强烈的场景安排，贯穿始终的宿命感，突然高能的古典音乐，多线叙事和平行蒙太奇等一系列表现手法让《EVA》成为一部风格很诡异的作品。</p><p><strong>【4.4.1场面描写】</strong></p><p>细心的观众应该会发现，人物对话的时候，画面往往是人物身边的东西，比如律子打电话，画面是她的电脑桌，美里打电话，画面是她的身边的物品，学校老师讲课，画面是孤独的学校，人物对话时表现的却是场景，这一点在剧中无处不在，好像刻意隐藏角色的表情一样。大家应该对这种感觉很熟悉，比如影视剧中经常有去世的人留下的的遗言被别人读出来，就是这种感觉，还有一种情况我们会产生这种感觉——那就是我们做梦的时候。通过这种反差的场面描写，更能烘托出悬疑神秘的气氛。</p><p>另一个突出悬疑神秘气氛的就是对镜头的把握，要么是远镜头，人物占画面比例很小，要么是特写，人物占画面比例很大，为什么没有中镜头呢，因为中镜头是偏喜剧风格的。而特写能突出人物，更显悲剧性（大家可以细心观察，悲伤的电影中特写很多，而喜剧风格的电影则几乎没有人物特写）。而且剧中类似“偷窥”的远镜头特别多，而且没有配乐，只有嘈杂的背景音和台词，在这种风格的镜头里，想不悬疑都难。并且有些镜头导演的用意很深，比如最后两张图，表现的就是明日香的视角。</p><p><img src="https://pic3.zhimg.com/80/b77fcd411828cdd314fe5906a32f763a_720w.webp"></p><p><img src="https://pic1.zhimg.com/80/aeca64a5dfcebd5ecbf30fbf119a050c_720w.webp"></p><p><img src="https://pic3.zhimg.com/80/5dd8e3c6ae7da0f6471650044bb90532_720w.webp"></p><p><strong>【4.4.2对比】</strong></p><p>除了台词+景物描写给我们带来的悬疑感，另一个让我印象深刻的是对比的运用，剧中无论是剧情还是人设甚至是镜头都存在大量的对比。</p><p>比如细节那段说过的真嗣在电影院的眼神变换前后的场景一个黑夜阴郁，一个白昼阳光，就是很好的对比。</p><p>还有冬二事件那集，冬二惨遭虐杀和班长为他做的爱心便当形成鲜明的对比，放大了这种虐心的悲伤。</p><p>还有雨使徒那集的开头，冬月教授对摩耶说了一些关于MAGI的事，说MAGI不只是超级计算机，也用来做政府决策，MAGI是完全遵照民主主义工作的系统，议会就仅仅遵照MAGI的决议执行，这可是最不耗时，最有效率的政治。坐着观光车一样的地铁，摩耶感叹到不愧是科学主宰的世界啊，好自豪啊之类的，而随后的停电也是狠狠的讽刺了这点，这个凝聚了现代科学之精华的设施，没了电，什么都用不了，连EVA都是手动启动的。（空调没电，老碇为了解热把脚放在水桶里，还保持着自己的经典动作，也是够萌的了。）</p><p>另外还有一些构图和场景安排的对比，不废话了，直接放几组图大家感受一下：</p><p><img src="https://pic3.zhimg.com/80/35f59eef86abd8b760a8b7090b809d2e_720w.webp"></p><p><img src="https://pic1.zhimg.com/80/2617b9672c4f5bd45daa34fb74a2ad9c_720w.webp"></p><p><img src="https://pic2.zhimg.com/80/c0626fc0b4f56c20f1837d8d6cbd5f69_720w.webp"></p><p>还有一些同一人物不同时期的对比，比如人物分析中提到的明日香讨厌像洋娃娃一样的活着，而自己却被精神攻击成了洋娃娃一样的傀儡，自己因为大姨妈来了说讨厌做女人，之后却成为了夏娃。还有绫波丽，无论是2号丽还是3号丽甚至大白丽，最终都选择为真嗣而死，着实令人唏嘘不已。</p><p>还有一些台词的对比，比如真嗣在车站准备离开NERV那集，真嗣说：“我回来了”，美里说：“欢迎回来”。同样的台词也出现在三号绫波丽和莉莉丝之间，丽与莉莉丝的相似也启发了观众思考真嗣与美里的相似。</p><p>好的对比不只是为了放大情绪，或者暗示和隐喻，也让一种宿命感笼罩着《EVA》，比如律子和绫波丽就是典型的宿命案例，这种可憎的宿命感，也正是《EVA》悲情的重要组成部分。</p><p>而且纵观整部《EVA》，前部分和后部分的对比也很强烈，TV第16集就是一个标志性的分水岭。如果说16集之前庵野秀明把黑暗风格表现的很隐晦，那16集之中初号机从夜使徒逃出这一血腥一幕，正式宣布这种黑暗暴发了，《EVA》的悬疑剧情也达到了最高，美里的开始怀疑，丽对真嗣的感情，明日香的同步下降，以及EVA的真正面目，NERV的真相等等，并且导演开始频繁使用意识流，有一种《柯南》中“凶手就是你”之后的剧情开始了。</p><p>之后整部动画无论是从色彩还是构图以及配乐都进入了黑暗风格（虽然之前也没怎么阳光），而且因为公司缺钱，所以每个人物每句台词每个场景的特别珍贵，所以细节也非常之多，人物表现上也更隐晦，当然对于类似我这种观众，应该是更过瘾吧。</p><p><strong>【4.4.3平行蒙太奇】</strong></p><p>大家肯定会好奇，这么多人物和故事导演是怎么讲的，刚看完真的是一脸懵逼的表情，其实人物线、剧情现就那么几条，只是导演讲故事的水平太高了而已。</p><p>像这么大一盘棋，按照庵野痞子的性格自然不会一下全盘托出（比如”我要救出露西亚，我要当火影，我要当海贼王”这类的），当然也不会流水账一样的把故事讲出来，让大家做一做阅读理解就拉倒了。《EVA》是典型的多线叙事，剧中一些传统的表现手法功底很足不必多说，非常出彩的是多线叙事和平行蒙太奇的运用。</p><p>没错，庵野秀明是一个十足的心机导，前期埋下的伏笔非常非常非常多（并且绝不揭露），暴力的战斗只是表面，实际暗地里用足了隐喻与暗示，不管是动作戏还是文艺戏都结合的很好，表面看主线是机器人大站外星人，随着后来剧情发展，越来越多的支线参杂进来，越来越多的人物线交织在一起。</p><p>比如TV第15集，也就是真嗣与明日香的吻，美里与加持的吻就是很不错的多线叙事，而且15集的剧情和情感表现正好是《EVA》暴风雨前的宁静，不得不佩服一波导演可怕的大局观。</p><p>其实好多观众说看不懂非常正常，因为《EVA》本身也并不是一部大众作品，《EVA》并不是《肖申克的救赎》，也不是《阿甘正传》正常人看完都会说非常棒，而是类似《发条橙》《迷失东京》《穆赫兰道》这样的存在（强烈推荐李安和诺兰的电影，在这两者之间达到平衡），所以很多人看完表示无感也在意料之中，因为并不是所有观众在看的过程中一致都是全神贯注的思考着。</p><p>当然除了没认真看没仔细想之外，观众更多的是被庵野秀明绕进去了，而且导演不止绕了你一两下，比如剧中有很多精彩的倒叙让观众消耗着脑细胞，还有另一个很常见的手法就是用犀利的剪辑只把开始和结果呈现出来，省略中间过程，而这样的好处是减少了观众的被动接受，并且省略的部分是观众有能力却无法完全脑补的东西，抱歉我不知道这类手法的专业术语叫什么，在朴赞郁的电影和侯孝贤的《刺客聂隐娘》里比较常见，也有观众调侃说有一种放PPT的感觉，但是不得不说这个PPT让我看的陷了进去。</p><blockquote><p><strong>而EOE为何如此震撼就是因为把之前所有伏笔都一次性的爆发了出来。</strong></p></blockquote><p>并不是一次交代了一个结尾再讲其他事，而这仅仅是剧情上的爆发，在人物命运上也都集体达到了巅峰，各个人物事件多线并进同时达到剧情高潮（《超感猎杀》里有一集结尾是“群交+神交”，大概就是这种感觉），真嗣，明日香，美里，仪式，丽，律子，等等。并且这不是普普通通的平行蒙太奇，不是类似《爱情是狗娘》、《云图》、《巴别塔》这样的表现手法，虽然几个故事线和几个人物线在陈述，发展，矛盾，高潮，结局及寓意等达到了一致，但彼此之间并没有多大联系，《EVA》不一样，《EVA》所有的剧情线和人物线，全他喵是纠缠在一起的，剪不断理还乱的是《EVA》，而且各线达到了微妙的平衡的同时，又最终汇聚在了一点——庵野秀明的内心（人类补完计划开始），就像我们身上各路血管各司其职，并且互相合作，最后都汇聚在心脏（之后被一枪崩掉了），可谓平行却交错的蒙太奇，类似的比如《性爱大师》第二季第三集，还有《梦之安魂曲》等等都有这种感觉。</p><p>写到这里我已经不知道该怎么表达我的激动之情，只能说三生有幸遇见一个会讲故事的人讲故事，是多么的享受。</p><p><strong>【4.5镜头与构图】</strong></p><p>看一部在镜头、构图、色彩上都非常给力的作品是什么感觉，这部分我就不废话了，直接上图，小伙伴来感受一下吧。（吐血推荐两部电影《修女艾达》和《荒野猎人》，炒鸡炒鸡赞的摄影，太爽了。）</p><p><img src="https://pic2.zhimg.com/80/a684ad72d141c338c38367c43ebe7141_720w.webp"></p><p><img src="https://pic3.zhimg.com/80/e116c23044340941b72ad37c63948ff6_720w.webp"></p><p><img src="https://pic2.zhimg.com/80/321cc96d48260b71c30dcd24afabb3fd_720w.webp"></p><p><img src="https://pic2.zhimg.com/80/b2bc3f6f0aa96b0f4f46a5ed17da87a9_720w.webp"></p><p><img src="https://pic3.zhimg.com/80/5db6967c1eefbbed8d9eac030f0c6932_720w.webp"></p><p><img src="https://pic3.zhimg.com/80/8823d87ce90f1ce6b225ad89f91d5106_720w.webp"></p><p><img src="https://pic3.zhimg.com/80/50bab3735ad5d40b6fb625ce3a04d756_720w.webp"></p><p><img src="https://pic2.zhimg.com/80/ca9fa845e2c79d664963144743f00fad_720w.webp"></p><p><img src="https://pic3.zhimg.com/80/49ecd4e22da49e6c867521a4efb8c066_720w.webp"></p><p><img src="https://pic3.zhimg.com/80/3d57bc6c4fec0f289587cdded618e1ee_720w.webp"></p><p><img src="https://pic2.zhimg.com/80/33c1df6d579dc6aa5ee8fab6a0002ded_720w.webp"></p><p><strong>【4.6台词】</strong></p><p>除了一些暗示性很强的台词，《EVA》精彩的台词也有很多，有不少地方如果不是看了第二遍根本get不到feeling，这里简单写一下印象深刻的：</p><p>（1）摩耶对傀儡系统的看法：“我尊敬前辈，也会做好自己的工作，可是我还是不能接受。”</p><p>律子说：“有洁癖是很辛苦的，特别是生活在人群中，感觉到“脏”的时候，你就明白了。”</p><p>（2）加持对真嗣的开导：</p><p><img src="https://pic1.zhimg.com/80/53e6fe7409602fc083b360c0f1ae6194_720w.webp"></p><p>（3）停电的那集，3人的台词都很微妙：</p><p>真嗣感叹道：假设没有灯火、人造的光，星星是多么明亮啊，真是一种讽刺。</p><p>明日香反驳到：可以，如果没有光明，就感觉没人住，有了光明才会感觉踏实。</p><p>绫波丽说：人类就是因为害怕黑暗，才使用火来赶走黑暗从而生存下来的。</p><p>（4）绫波丽关于自我世界观的独白：</p><p>山、稳重的山、随着时间变化的东西；</p><p>天空、蓝色的天空；</p><p>眼睛看得见的东西、眼睛看不见的东西；</p><p>太阳，只有一个，独一无二的东西；</p><p>水、让感觉溶解；</p><p>舒服的事……碇司令。</p><p>花、需要的东西有很多，不需要的东西也有很多；</p><p>天空、红色、红色的天空……红的颜色……我讨厌红色的颜色；</p><p>流动的水、血、血的味道；</p><p>血的颜色，一个身体里不流血的女人；</p><p>人类；</p><p>由红色的赤土造出来的人类；</p><p>人类是什么，由男人与女人造出来的人类；</p><p>城市、人造出来的东西；</p><p>EVA、人造出来的东西。</p><p>人又是什么？是神造出来的东西，是人和人造出来的东西，由男人与女人造出来的；</p><p>我所拥有的是什么，是生命，心、心中包含的东西、插入栓；</p><p>这就是……魂之座；</p><p>这是谁？</p><p>这是我。</p><p>我是谁？</p><p>我是什么？</p><p>我是什么？</p><p>我是什么……</p><p>我是什么？我是我自己、这个东西是我自己。</p><p>把我自己做出来的型。从眼中看到的我。</p><p>但是我感觉到不再是我……真的好奇怪。</p><p>身体快熔掉的感觉……我愈来愈不懂了。</p><p>我的型体好像正逐渐消失。我感觉到“不是我”的存在。</p><p>是谁在呢？在这之前…是谁在这里…</p><p>碇君？这个人我知道。葛城少校、赤木博士、大家、同学、贰号机驾驶员、碇司令……</p><p>你是谁？</p><p>你是谁？？</p><p>你是谁？？？</p><p>（然后绫波丽突然就看到了没有穿着拘束器和盔甲的EVA初号机）</p><p>（5）所谓长大成人，就是不断的聚了散，散了又聚，为了让彼此不会受伤害而保持一个适当的距离。</p><p>（6）生是死的开始，死是现实的延续，而再生是梦的终结。喜欢我吗？微笑是虚伪的，真实是痛苦的。</p><p>（7）所谓的奇迹，要真的发生才有价值。</p><p>（8）这段可谓是经典中的经典：</p><p>碇真嗣：“梦是什么？”</p><p>凌波丽：“是现实的延续。”</p><p>碇真嗣：“现实又是什么？”</p><p>凌波丽：“是梦的终结。”</p><p>（9）生与死的价值是同等，只有自己选择的死亡才是真正的自由。</p><p>（10）人们不知道为了什么，都为了相互了解而努力。不过你记住，人与人之间是绝对无法完全理解的，人类就是这样悲哀的生物。</p><p><strong>【5.综合评价】</strong></p><p><strong>【5.1客观评论】</strong></p><p>（1）首先《EVA》对后世的影响是革命性的，动画制作委员会制度起源于《EVA》。</p><blockquote><p>简而言之就是一部动画的组委会，由制片人牵头成立，主要由掏钱投资该动画制作的企业代表，以及动画公司的企划负责人，如果有漫画或者小说原作，那么还有出版社代表组成。而它最重要的功能，就是实现了动画制作的“风险均摊，利益均沾”，让很多优质动画得以面世。</p></blockquote><p>毫不夸张的说，如果没有《EVA》，最近20年很多优秀的动画作品都不会出现。目前“制作委员会”制度已超出动画界，在电影界也有电影采用这种方法，比如《入殓师》（也是体现日本文化的一部佳作，曾获奥斯卡最佳外语片，强烈推荐）。</p><p>同时《EVA》的出现一扫ACG的低迷，带动了整个ACG的发展，一部作品拯救了一个行业，这么说应该不过分吧。《EVA》创造的经济价值是很夸张的，网上数据很多，我就不搬出来了，无论是漫画还是动画或者衍生品都是各种第一，比如常年位居周边产品销量第一第二的就是绫波丽和明日香。即使是20年后的今天，《EVA》新剧场版依然异常火爆，票房爆炸，值得注意的是《EVA》并不是像《柯南》这种的连载20年900多集算上TV原创数不清多少集的长寿动画。《EVA》仅有每集才20分钟的24集，两集蛋疼的PPT动画，两部剧场版，4部新剧场版，和十几卷的漫画而已。</p><p>（2）抛开其他方面，单讲《EVA》本身的艺术水品，放眼望去成千上万部动画作品，能达到《EVA》这种级别的屈指可数。领先时代的人设，错综复杂的剧情，强烈的意识流手法，大量宗教、哲学意象的运用，风格化极强的镜头与构图，原创配乐。这些元素如果单独出现在电影大师的作品中也许我们不会意外，但是同时出现在一部动画作品上，我的表情是一脸懵逼的。一部优秀的作品必定有出彩的地方，比如情节与剧情，或者情感与情绪，或者人物的塑造，或风格质感与配乐，或是思想中心等等，《EVA》在这些方面都做到了业界的佼佼者，无论艺术性和观赏性都近乎完美，所以《EVA》被称为日本动画史上的一座里程碑，同时被公认为日本历史中最伟大的动画。</p><p>（3）《EVA》独特的被模仿性与不可模仿性：</p><p>被模仿性主要体现在人设方面，比如“三无”、“傲娇”等等的属性，包括《EVA》的叙事手法，为后来者提供了良好的模版，也可以说《EVA》之后，更多的动漫作品开始更多的承载成人内容，也可以说更多的人开始制作具有艺术价值的动漫，而非简单无脑低龄向。</p><p>尽管表面的商业方面能模仿，但是《EVA》的深层次的内涵是无法被模仿的，也可以说《EVA》的“原创性”是无法模仿的，不要看它表面上表现出很强的商业性，实际却充满了非常强烈的个人主观意识，《EVA》从开始到结束构造都很另类，就好像是为了自我满足而制作的完全的个人电影那样。</p><blockquote><p>庵野秀明自己也说过《EVA》这部作品是他人生的影射，而反映自己人生正是其独特的创作理念，庵野秀明通过《EVA》来分析自己的内心深处，进一步来剖析了一代人（Otaku）的内心世界。所以这是一部具有双重性和矛盾性作品：一方面它表现出很强的Otaku向性，另一方面又对所谓Otaku的精神世界进行了彻底的批判。</p></blockquote><p>所以对《EVA》的内涵评价不只限于“EVA是在用极其隐晦的手法反映出了缺乏社会适应的心理问题，并揭露了时代弊病”，也有人认为《EVA》是一部使Otaku有增无减的邪恶之作。</p><p>如果说宫崎骏动画“教育性”很强，那么也可以说庵野秀明的动画“自学成才性”很强。以至于《EVA》之后如此多的模仿者，却无一能达到《EVA》的高度，大概就是因为如此吧。</p><p>其实无论《EVA》邪恶与否，能欣赏到一部把排列组合玩得如此高深莫测的作品，洒家这辈子也是值了。别看剧中的主角不成长，但是看懂的观众，无一不成长起来了，这是一部一旦看懂了，就会被深深震撼的作品。</p><p>《EVA》就像我们如堕烟海的人生路上的指明灯，以至于我未来的下半辈子一想起《EVA》就有一种振聋发聩醍醐灌顶的卧槽感觉。</p><p><strong>所以，综上5万字所述，这是一部近乎完美的神作。</strong></p><p><strong>【5.2个人感受】</strong></p><p>到这里本文基本也就接近尾声了，首先就是写这篇文章的过程让我意识到原来意志力是一种消耗品，也认识了自己是个懒惰的loser，拖延症真是坑爹啊，此文断断续续写了3个月，四分之三的内容却在第一个月就搞定了，前期很有激情，天天下班回家第一件事就是打开电脑开启贤者模式思考人生专注写文，可是后期拖延症发作，即使草稿已经拟好，可我连复制粘贴都懒得按，所以也使得此文的后续写作过程变得十分痛苦。不管怎么说吧，拖延症与执行力这方面我算是吸取了不少教训。</p><p>另一方面也认识到了自己年轻时候思考过多（注意是思考过多）行动过少，看似不做欲望的奴隶，看清了很多规律问题，变得成熟，获得成长，实则蠢得要死，错过了很多东西。如果有20出头正值当年的朋友看到这篇文章，我希望你们别过度思考类似“为什么活着”或者“一些事情的意义”这类的在《EVA》这样的作品中的问题，或者是其他哲学向的问题。比如乌尔奇奥拉就曾说过：“我们所处的世界毫无意义，而生存于此的我们也没有意义，无意义的我们思索这个世界，就连得知此处没有意义都没有任何意义。”</p><p>说一说我对《EVA》的一些感受吧，本人虽是无神论者，但是从小确实受过不少基督教这方面的熏陶，所以对宗教题材的作品不属于“完全不感冒”的类型，算是一种幸运吧，长年孤独的生活留给我很多独自思考的时间，也让我爱上了这些需要动脑的作品，所以整个观影过程对我来说是非常过瘾的，并且《EVA》的后坐力和信息量非常之大，让我“脑袋上面有个电灯泡亮了”的时候，恨不得怒拍大腿一百下啪啪啪啪啪（此处省略95个啪）。</p><p>过瘾虽过瘾，但是说句心里话，看过《EVA》之后的感觉是极其痛苦的，也让我意识到我自己的性格是真嗣和明日香的结合，无论以后我的三观是崩塌抑或重建，《EVA》肯定是有影响的，就像我前阵子很迷阿西莫夫、《三体》、赛博朋克（强烈推荐一波《攻壳机动队》）之类的科幻小说，接受“我是原子的宇宙”很容易，接受“我是宇宙的原子”很痛苦，虽然在很多日本作品中，还是有很多关于这类问题的鸡汤：</p><p>比如我最近看的《澄沙之味》：“我们的出生，是为了见识这个世界，去倾听这个世界，所以啊，就算没有成为什么，在我们身上，都有活下去的意义。”</p><p>或者《火影忍者》里大蛇丸说过的：“活着本来没有什么意义，但是活着，就可以找到有趣的事情，就想你发现了这朵花，而我又发现了你一样。”</p><p>《猜火车》也告诉我们：“生活的本质就是这些琐碎。”</p><p>还有《七宗罪》的最后一句：“Ernest Hemingway once wrote，『The world is a fine place and worth fighting for』，I agree with the second part。”（欧内斯特·海明威曾经写过『世界是美好的，值得我们去奋斗』，我同意后半句。）</p><p>可是如果对这个世界的感受绝大部分都是痛苦呢？活下去并不会有有趣的事情发生呢？日本文化中的物哀我们真的能坦然接受吗？如果我们的人生像《EVA》一样是一部彻头彻尾的悲剧呢？</p><p>美，不只是因为创造，也在于毁灭。这样的道理我都懂，却依旧过不好这一生。</p><p>就像饿了，可能有不愿意吃的菜也会吃，毕竟也会填饱肚子，可是如果吃的是屎呢？</p><p>我想，《EVA》已经给了我答案。</p><p>如果用一句话来结束这篇文章，我希望借用一下明日香的台词：“活着，真恶心，我要一个人活下去，不依赖任何人。”</p><p>如果可以配上一段画面，我希望是明日香精神污染后惨叫的独白，以及它背后隐喻的含义。</p><p>如果用一个字来结束这篇文章，我希望是： <strong>吃</strong> 。</p><p><strong>——本文编辑于2016年3月~6月——</strong></p><p><strong>分析的引用来源：</strong></p><p><strong>（本人才疏学浅，第一次写长文，感谢各位大神，确实受益匪浅。）</strong></p><p><strong>《EVA的创作背景》<a href="https://www.zhihu.com/question/31771628">https://www.<strong>zhihu.com&#x2F;question&#x2F;3177</strong>1628</a></strong></p><p><strong>《魂之轮回–明日香的补完之战》<a href="https://link.zhihu.com/?target=http://tieba.baidu.com/p/2513098405">魂之轮回–明日香的补完之战_eva吧_百度贴吧</a></strong></p><p><strong>《小谈eoe结尾》<a href="https://www.zhihu.com/question/22210528/answer/85716493">https://www.<strong>zhihu.com&#x2F;question&#x2F;2221</strong>0528&#x2F;answer&#x2F;85716493</a></strong></p><p><strong>感谢Boring Monkey<a href="https://www.zhihu.com/people/boringmonkey">https://www.<strong>zhihu.com&#x2F;people&#x2F;boring</strong>monkey</a>的指正</strong></p><p><strong>《时间线》参照<a href="https://link.zhihu.com/?target=https://movie.douban.com/review/4898021/">EVA全解析：动漫界至高神作到底在讲什么 转自奇法大陆</a></strong></p><p><strong>《配乐部分》参照<a href="https://link.zhihu.com/?target=http://evangelion.baike.com/category-44037.html">EVA音乐 - EVA百科</a></strong></p><p><strong>感谢张翼的答案，<a href="https://www.zhihu.com/question/24206396/answer/102978697?from=profile_answer_card">https://www.<strong>zhihu.com&#x2F;question&#x2F;2420</strong>6396&#x2F;answer&#x2F;102978697?from&#x3D;profile_answer_card</a>。</strong></p><p><strong>感谢<a href="https://link.zhihu.com/?target=http://evangelion.baike.com/">EVA百科</a>王_子谦</strong></p><p><strong>——全文完——希望对你有所帮助——感谢阅读——</strong> </p><p>摘自 <a href="https://zhuanlan.zhihu.com/p/20864898">https://zhuanlan.zhihu.com/p/20864898</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EVA全解析（TV版-旧剧场版）&quot;&gt;&lt;a href=&quot;#EVA全解析（TV版-旧剧场版）&quot; class=&quot;headerlink&quot; title=&quot;EVA全解析（TV版+旧剧场版）&quot;&gt;&lt;/a&gt;EVA全解析（TV版+旧剧场版）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;本文适合认真</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>shell 脚本的一种混淆方式</title>
    <link href="https://runoneall.github.io/article/shell-%E8%84%9A%E6%9C%AC%E7%9A%84%E4%B8%80%E7%A7%8D%E6%B7%B7%E6%B7%86%E6%96%B9%E5%BC%8F.html"/>
    <id>https://runoneall.github.io/article/shell-%E8%84%9A%E6%9C%AC%E7%9A%84%E4%B8%80%E7%A7%8D%E6%B7%B7%E6%B7%86%E6%96%B9%E5%BC%8F.html</id>
    <published>2024-06-16T02:06:37.000Z</published>
    <updated>2024-06-16T02:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>灵感来源于：<a href="https://gitlab.com/rwkgyg/sing-box-yg">rwkgyg&#x2F;sing-box-yg</a></p><p>目前各种 PaaS、SaaS、BaaS 等等平台，在用来托管一些常用的应用——如 Xray、Alist 等等应用时，经常会提示违规，不允许部署。在经过大量的测试后，我发现此类平台多以关键字检测作为封禁的因素，所以只要做到日志、文件名、文本文件内容不含此类关键字，就能继续部署，正常使用。</p><p>多数情况下，部署此类应用都是通过一个功能完善的 Shell 程序自动化进行，在其中把文件名和日志做好处理即可，但是最后 shell 脚本本身的内容又不可避免的会出现 Xray、Alist 等应用的下载链接，导致 Shell 脚本本身被平台查处封禁。当然通过多个变量拆分构造下载链接避开关键字也是一种处理方法，但是无疑这增加了脚本的编写复杂度，所以在通过查看 rwkgyg&#x2F;sing-box-yg 时我获取了灵感，编写了一个 Python 脚本专门用于混淆 Shell 脚本：</p><p><strong>PYTHON</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># 读取你的脚本</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;script.sh&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    script = f.read()<br><br><span class="hljs-comment"># 使用 base64 对你的脚本进行编码</span><br>encoded_script = base64.b64encode(script.encode()).decode()<br><br><span class="hljs-comment"># 定义每个字符串段的大小</span><br>chunk_size = <span class="hljs-number">4</span><br><br><span class="hljs-comment"># 将编码后的脚本分割成多个小段</span><br>chunks = [encoded_script[i:i+chunk_size]<br>          <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(encoded_script), chunk_size)]<br><br><span class="hljs-comment"># 创建一个新的文件来存储最终的脚本</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;final_script.sh&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-comment"># 输出每个变量赋值语句</span><br>    variable_names = []<br>    <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> chunks:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            var_name = <span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)  <span class="hljs-comment"># 生成一个 UUID 作为变量名</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> var_name.startswith(<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> var_name.startswith(<span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> var_name.startswith(<span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> var_name.startswith(<span class="hljs-string">&#x27;3&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> var_name.startswith(<span class="hljs-string">&#x27;4&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> var_name.startswith(<span class="hljs-string">&#x27;5&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> var_name.startswith(<span class="hljs-string">&#x27;6&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> var_name.startswith(<span class="hljs-string">&#x27;7&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> var_name.startswith(<span class="hljs-string">&#x27;8&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> var_name.startswith(<span class="hljs-string">&#x27;9&#x27;</span>):<br>                <span class="hljs-keyword">break</span><br>        variable_names.append(var_name)<br>        f.write(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;var_name&#125;</span>=\&#x27;<span class="hljs-subst">&#123;chunk&#125;</span>\&#x27;\n&#x27;</span>)<br><br>    <span class="hljs-comment"># 输出连接所有变量的语句</span><br>    f.write(<span class="hljs-string">&#x27;eval &quot;$(echo -n &quot;&#x27;</span>)<br>    <span class="hljs-keyword">for</span> var_name <span class="hljs-keyword">in</span> variable_names:<br>        f.write(<span class="hljs-string">f&#x27;$<span class="hljs-subst">&#123;var_name&#125;</span>&#x27;</span>)<br>    f.write(<span class="hljs-string">&#x27;&quot; | base64 --decode)&quot;&#x27;</span>)<br><br><span class="hljs-comment"># 修改文件权限，使其可执行</span><br>os.chmod(<span class="hljs-string">&#x27;final_script.sh&#x27;</span>, <span class="hljs-number">0o755</span>)<br></code></pre></td></tr></table></figure><p>这个 Python 脚本的原理很简单，就是先把原 Shell 脚本使用 Base64 编码，然后分割成很多个字符串，再使用 UUID 作为变量名，把每个字符串都存储在一个变量中，最后把 UUID 变量全都连起来，使用 <code>eval</code> 命令执行。</p><p>简单粗暴，效果很好，用了的都说好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;灵感来源于：&lt;a href=&quot;https://gitlab.com/rwkgyg/sing-box-yg&quot;&gt;rwkgyg&amp;#x2F;sing-box-yg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前各种 PaaS、SaaS、BaaS 等等平台，在用来托管一些常用的应用——如 Xray、Al</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://runoneall.github.io/article/hello-world.html"/>
    <id>https://runoneall.github.io/article/hello-world.html</id>
    <published>2024-06-15T08:25:00.000Z</published>
    <updated>2024-06-16T01:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
